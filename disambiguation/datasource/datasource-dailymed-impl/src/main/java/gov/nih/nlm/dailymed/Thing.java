/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 11/20/10 11:41 AM
 */
package gov.nih.nlm.dailymed;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> ActiveIngredient </li>
 *   <li> ActiveMoiety </li>
 *   <li> AdverseReaction </li>
 *   <li> BoxedWarning </li>
 *   <li> ClinicalPharmacology </li>
 *   <li> Contraindication </li>
 *   <li> Description </li>
 *   <li> Dosage </li>
 *   <li> EquivalentClass </li>
 *   <li> FullName </li>
 *   <li> GenericDrug </li>
 *   <li> GenericMedicine </li>
 *   <li> InactiveIngredient </li>
 *   <li> Indication </li>
 *   <li> Name </li>
 *   <li> Overdosage </li>
 *   <li> PossibleDiseaseTarget </li>
 *   <li> Precaution </li>
 *   <li> ProducesDrug </li>
 *   <li> RepresentedOrganization </li>
 *   <li> RouteOfAdministration </li>
 *   <li> SameAs </li>
 *   <li> SideEffect </li>
 *   <li> SupplementalPatientMaterial </li>
 *   <li> Supply </li>
 *   <li> Warning </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 11/20/10 11:41 AM
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/activeIngredient */
	public static final URI ACTIVEINGREDIENT = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/activeIngredient",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/activeMoiety */
	public static final URI ACTIVEMOIETY = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/activeMoiety",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/adverseReaction */
	public static final URI ADVERSEREACTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/adverseReaction",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/boxedWarning */
	public static final URI BOXEDWARNING = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/boxedWarning",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/clinicalPharmacology */
	public static final URI CLINICALPHARMACOLOGY = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/clinicalPharmacology",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/contraindication */
	public static final URI CONTRAINDICATION = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/contraindication",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/description */
	public static final URI DESCRIPTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/description",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/dosage */
	public static final URI DOSAGE = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/dosage",false);

    /** http://www.w3.org/2002/07/owl#equivalentClass */
	public static final URI EQUIVALENTCLASS = new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/fullName */
	public static final URI FULLNAME = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/fullName",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/genericDrug */
	public static final URI GENERICDRUG = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/genericDrug",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/genericMedicine */
	public static final URI GENERICMEDICINE = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/genericMedicine",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/inactiveIngredient */
	public static final URI INACTIVEINGREDIENT = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/inactiveIngredient",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/indication */
	public static final URI INDICATION = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/indication",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/name */
	public static final URI NAME = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/name",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/overdosage */
	public static final URI OVERDOSAGE = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/overdosage",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/possibleDiseaseTarget */
	public static final URI POSSIBLEDISEASETARGET = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/possibleDiseaseTarget",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/precaution */
	public static final URI PRECAUTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/precaution",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/producesDrug */
	public static final URI PRODUCESDRUG = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/producesDrug",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/representedOrganization */
	public static final URI REPRESENTEDORGANIZATION = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/representedOrganization",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/routeOfAdministration */
	public static final URI ROUTEOFADMINISTRATION = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/routeOfAdministration",false);

    /** http://www.w3.org/2002/07/owl#sameAs */
	public static final URI SAMEAS = new URIImpl("http://www.w3.org/2002/07/owl#sameAs",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/sideEffect */
	public static final URI SIDEEFFECT = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/sideEffect",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/supplementalPatientMaterial */
	public static final URI SUPPLEMENTALPATIENTMATERIAL = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/supplementalPatientMaterial",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/supply */
	public static final URI SUPPLY = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/supply",false);

    /** http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/warning */
	public static final URI WARNING = new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/warning",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/activeIngredient",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/activeMoiety",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/adverseReaction",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/boxedWarning",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/clinicalPharmacology",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/contraindication",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/description",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/dosage",false),
      new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/fullName",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/genericDrug",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/genericMedicine",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/inactiveIngredient",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/indication",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/name",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/overdosage",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/possibleDiseaseTarget",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/precaution",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/producesDrug",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/representedOrganization",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/routeOfAdministration",false),
      new URIImpl("http://www.w3.org/2002/07/owl#sameAs",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/sideEffect",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/supplementalPatientMaterial",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/supply",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/dailymed/resource/dailymed/warning",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ActiveIngredient' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllActiveIngredient_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ACTIVEINGREDIENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ActiveIngredient' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllActiveIngredient_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ACTIVEINGREDIENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ActiveIngredient' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllActiveIngredient_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ACTIVEINGREDIENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ActiveMoiety' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllActiveMoiety_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ACTIVEMOIETY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ActiveMoiety' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllActiveMoiety_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ACTIVEMOIETY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ActiveMoiety' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllActiveMoiety_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ACTIVEMOIETY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AdverseReaction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAdverseReaction_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ADVERSEREACTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AdverseReaction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAdverseReaction_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ADVERSEREACTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AdverseReaction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAdverseReaction_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ADVERSEREACTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'BoxedWarning' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBoxedWarning_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.BOXEDWARNING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'BoxedWarning' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBoxedWarning_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.BOXEDWARNING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'BoxedWarning' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllBoxedWarning_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.BOXEDWARNING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ClinicalPharmacology' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllClinicalPharmacology_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CLINICALPHARMACOLOGY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ClinicalPharmacology' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllClinicalPharmacology_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CLINICALPHARMACOLOGY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ClinicalPharmacology' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllClinicalPharmacology_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CLINICALPHARMACOLOGY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Contraindication' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContraindication_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CONTRAINDICATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Contraindication' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContraindication_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CONTRAINDICATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Contraindication' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllContraindication_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CONTRAINDICATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Dosage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDosage_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DOSAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Dosage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDosage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DOSAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Dosage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDosage_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DOSAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentClass_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EQUIVALENTCLASS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentClass_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EQUIVALENTCLASS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentClass_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EQUIVALENTCLASS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'FullName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFullName_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.FULLNAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'FullName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFullName_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.FULLNAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'FullName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFullName_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.FULLNAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GenericDrug' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenericDrug_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENERICDRUG, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GenericDrug' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenericDrug_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENERICDRUG, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GenericDrug' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGenericDrug_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENERICDRUG, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GenericMedicine' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenericMedicine_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENERICMEDICINE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GenericMedicine' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenericMedicine_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENERICMEDICINE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GenericMedicine' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGenericMedicine_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENERICMEDICINE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InactiveIngredient' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInactiveIngredient_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INACTIVEINGREDIENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InactiveIngredient' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInactiveIngredient_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INACTIVEINGREDIENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InactiveIngredient' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInactiveIngredient_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INACTIVEINGREDIENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Indication' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIndication_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INDICATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Indication' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIndication_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INDICATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Indication' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIndication_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INDICATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllName_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.NAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllName_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.NAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllName_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.NAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Overdosage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOverdosage_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.OVERDOSAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Overdosage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOverdosage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.OVERDOSAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Overdosage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOverdosage_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.OVERDOSAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PossibleDiseaseTarget' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPossibleDiseaseTarget_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.POSSIBLEDISEASETARGET, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PossibleDiseaseTarget' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPossibleDiseaseTarget_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.POSSIBLEDISEASETARGET, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PossibleDiseaseTarget' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPossibleDiseaseTarget_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.POSSIBLEDISEASETARGET, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Precaution' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrecaution_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PRECAUTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Precaution' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrecaution_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PRECAUTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Precaution' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPrecaution_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PRECAUTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ProducesDrug' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllProducesDrug_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PRODUCESDRUG, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ProducesDrug' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllProducesDrug_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PRODUCESDRUG, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ProducesDrug' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllProducesDrug_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PRODUCESDRUG, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'RepresentedOrganization' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepresentedOrganization_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.REPRESENTEDORGANIZATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'RepresentedOrganization' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepresentedOrganization_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.REPRESENTEDORGANIZATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'RepresentedOrganization' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRepresentedOrganization_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.REPRESENTEDORGANIZATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'RouteOfAdministration' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRouteOfAdministration_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ROUTEOFADMINISTRATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'RouteOfAdministration' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRouteOfAdministration_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ROUTEOFADMINISTRATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'RouteOfAdministration' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRouteOfAdministration_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ROUTEOFADMINISTRATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SameAs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSameAs_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SAMEAS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SameAs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSameAs_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SAMEAS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SameAs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSameAs_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SAMEAS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SideEffect' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSideEffect_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SIDEEFFECT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SideEffect' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSideEffect_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SIDEEFFECT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SideEffect' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSideEffect_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SIDEEFFECT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SupplementalPatientMaterial' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSupplementalPatientMaterial_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SUPPLEMENTALPATIENTMATERIAL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SupplementalPatientMaterial' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSupplementalPatientMaterial_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SUPPLEMENTALPATIENTMATERIAL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SupplementalPatientMaterial' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSupplementalPatientMaterial_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SUPPLEMENTALPATIENTMATERIAL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Supply' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSupply_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SUPPLY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Supply' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSupply_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SUPPLY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Supply' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSupply_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SUPPLY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Warning' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWarning_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.WARNING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Warning' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWarning_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.WARNING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Warning' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWarning_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.WARNING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c71613 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasActiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACTIVEINGREDIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c71613 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasActiveIngredient() {
		return Base.has(this.model, this.getResource(), ACTIVEINGREDIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c71613 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasActiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACTIVEINGREDIENT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c71613 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasActiveIngredient( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACTIVEINGREDIENT, value);
	}

     /**
     * Get all values of property ActiveIngredient as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllActiveIngredient_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ACTIVEINGREDIENT);
	}
	
    /**
     * Get all values of property ActiveIngredient as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllActiveIngredient_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACTIVEINGREDIENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ActiveIngredient as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllActiveIngredient_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACTIVEINGREDIENT);
	}

    /**
     * Get all values of property ActiveIngredient as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllActiveIngredient_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACTIVEINGREDIENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ActiveIngredient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllActiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ACTIVEINGREDIENT, Thing.class);
	}
	
    /**
     * Get all values of property ActiveIngredient as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllActiveIngredient_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACTIVEINGREDIENT, Thing.class);
	}

    /**
     * Get all values of property ActiveIngredient     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllActiveIngredient() {
		return Base.getAll(this.model, this.getResource(), ACTIVEINGREDIENT, Thing.class);
	}

    /**
     * Get all values of property ActiveIngredient as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllActiveIngredient_as() {
		return Base.getAll_as(this.model, this.getResource(), ACTIVEINGREDIENT, Thing.class);
	}
 
    /**
     * Adds a value to property ActiveIngredient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addActiveIngredient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ACTIVEINGREDIENT, value);
	}
	
    /**
     * Adds a value to property ActiveIngredient as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addActiveIngredient( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ACTIVEINGREDIENT, value);
	}
    /**
     * Adds a value to property ActiveIngredient from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addActiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ACTIVEINGREDIENT, value);
	}
	
    /**
     * Adds a value to property ActiveIngredient from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addActiveIngredient(Thing value) {
		Base.add(this.model, this.getResource(), ACTIVEINGREDIENT, value);
	}
  

    /**
     * Sets a value of property ActiveIngredient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setActiveIngredient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACTIVEINGREDIENT, value);
	}
	
    /**
     * Sets a value of property ActiveIngredient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setActiveIngredient( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACTIVEINGREDIENT, value);
	}
    /**
     * Sets a value of property ActiveIngredient from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setActiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ACTIVEINGREDIENT, value);
	}
	
    /**
     * Sets a value of property ActiveIngredient from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setActiveIngredient(Thing value) {
		Base.set(this.model, this.getResource(), ACTIVEINGREDIENT, value);
	}
  


    /**
     * Removes a value of property ActiveIngredient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeActiveIngredient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACTIVEINGREDIENT, value);
	}
	
    /**
     * Removes a value of property ActiveIngredient as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeActiveIngredient( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACTIVEINGREDIENT, value);
	}
    /**
     * Removes a value of property ActiveIngredient given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeActiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ACTIVEINGREDIENT, value);
	}
	
    /**
     * Removes a value of property ActiveIngredient given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeActiveIngredient(Thing value) {
		Base.remove(this.model, this.getResource(), ACTIVEINGREDIENT, value);
	}
  
    /**
     * Removes all values of property ActiveIngredient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllActiveIngredient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACTIVEINGREDIENT);
	}
	
    /**
     * Removes all values of property ActiveIngredient	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllActiveIngredient() {
		Base.removeAll(this.model, this.getResource(), ACTIVEINGREDIENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1649efbe has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasActiveMoiety(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACTIVEMOIETY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1649efbe has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasActiveMoiety() {
		return Base.has(this.model, this.getResource(), ACTIVEMOIETY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1649efbe has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasActiveMoiety(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACTIVEMOIETY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1649efbe has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasActiveMoiety( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACTIVEMOIETY, value);
	}

     /**
     * Get all values of property ActiveMoiety as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllActiveMoiety_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ACTIVEMOIETY);
	}
	
    /**
     * Get all values of property ActiveMoiety as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllActiveMoiety_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACTIVEMOIETY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ActiveMoiety as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllActiveMoiety_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACTIVEMOIETY);
	}

    /**
     * Get all values of property ActiveMoiety as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllActiveMoiety_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACTIVEMOIETY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ActiveMoiety     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllActiveMoiety(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ACTIVEMOIETY, Thing.class);
	}
	
    /**
     * Get all values of property ActiveMoiety as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllActiveMoiety_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACTIVEMOIETY, Thing.class);
	}

    /**
     * Get all values of property ActiveMoiety     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllActiveMoiety() {
		return Base.getAll(this.model, this.getResource(), ACTIVEMOIETY, Thing.class);
	}

    /**
     * Get all values of property ActiveMoiety as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllActiveMoiety_as() {
		return Base.getAll_as(this.model, this.getResource(), ACTIVEMOIETY, Thing.class);
	}
 
    /**
     * Adds a value to property ActiveMoiety as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addActiveMoiety( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ACTIVEMOIETY, value);
	}
	
    /**
     * Adds a value to property ActiveMoiety as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addActiveMoiety( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ACTIVEMOIETY, value);
	}
    /**
     * Adds a value to property ActiveMoiety from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addActiveMoiety(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ACTIVEMOIETY, value);
	}
	
    /**
     * Adds a value to property ActiveMoiety from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addActiveMoiety(Thing value) {
		Base.add(this.model, this.getResource(), ACTIVEMOIETY, value);
	}
  

    /**
     * Sets a value of property ActiveMoiety from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setActiveMoiety( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACTIVEMOIETY, value);
	}
	
    /**
     * Sets a value of property ActiveMoiety from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setActiveMoiety( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACTIVEMOIETY, value);
	}
    /**
     * Sets a value of property ActiveMoiety from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setActiveMoiety(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ACTIVEMOIETY, value);
	}
	
    /**
     * Sets a value of property ActiveMoiety from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setActiveMoiety(Thing value) {
		Base.set(this.model, this.getResource(), ACTIVEMOIETY, value);
	}
  


    /**
     * Removes a value of property ActiveMoiety as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeActiveMoiety( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACTIVEMOIETY, value);
	}
	
    /**
     * Removes a value of property ActiveMoiety as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeActiveMoiety( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACTIVEMOIETY, value);
	}
    /**
     * Removes a value of property ActiveMoiety given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeActiveMoiety(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ACTIVEMOIETY, value);
	}
	
    /**
     * Removes a value of property ActiveMoiety given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeActiveMoiety(Thing value) {
		Base.remove(this.model, this.getResource(), ACTIVEMOIETY, value);
	}
  
    /**
     * Removes all values of property ActiveMoiety     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllActiveMoiety( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACTIVEMOIETY);
	}
	
    /**
     * Removes all values of property ActiveMoiety	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllActiveMoiety() {
		Base.removeAll(this.model, this.getResource(), ACTIVEMOIETY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1253fc55 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAdverseReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ADVERSEREACTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1253fc55 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAdverseReaction() {
		return Base.has(this.model, this.getResource(), ADVERSEREACTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1253fc55 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAdverseReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ADVERSEREACTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1253fc55 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAdverseReaction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ADVERSEREACTION, value);
	}

     /**
     * Get all values of property AdverseReaction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAdverseReaction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ADVERSEREACTION);
	}
	
    /**
     * Get all values of property AdverseReaction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAdverseReaction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ADVERSEREACTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AdverseReaction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAdverseReaction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ADVERSEREACTION);
	}

    /**
     * Get all values of property AdverseReaction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAdverseReaction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ADVERSEREACTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AdverseReaction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAdverseReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ADVERSEREACTION, Thing.class);
	}
	
    /**
     * Get all values of property AdverseReaction as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAdverseReaction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ADVERSEREACTION, Thing.class);
	}

    /**
     * Get all values of property AdverseReaction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAdverseReaction() {
		return Base.getAll(this.model, this.getResource(), ADVERSEREACTION, Thing.class);
	}

    /**
     * Get all values of property AdverseReaction as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAdverseReaction_as() {
		return Base.getAll_as(this.model, this.getResource(), ADVERSEREACTION, Thing.class);
	}
 
    /**
     * Adds a value to property AdverseReaction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAdverseReaction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ADVERSEREACTION, value);
	}
	
    /**
     * Adds a value to property AdverseReaction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAdverseReaction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ADVERSEREACTION, value);
	}
    /**
     * Adds a value to property AdverseReaction from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAdverseReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ADVERSEREACTION, value);
	}
	
    /**
     * Adds a value to property AdverseReaction from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAdverseReaction(Thing value) {
		Base.add(this.model, this.getResource(), ADVERSEREACTION, value);
	}
  

    /**
     * Sets a value of property AdverseReaction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAdverseReaction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ADVERSEREACTION, value);
	}
	
    /**
     * Sets a value of property AdverseReaction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAdverseReaction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ADVERSEREACTION, value);
	}
    /**
     * Sets a value of property AdverseReaction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAdverseReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ADVERSEREACTION, value);
	}
	
    /**
     * Sets a value of property AdverseReaction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAdverseReaction(Thing value) {
		Base.set(this.model, this.getResource(), ADVERSEREACTION, value);
	}
  


    /**
     * Removes a value of property AdverseReaction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAdverseReaction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ADVERSEREACTION, value);
	}
	
    /**
     * Removes a value of property AdverseReaction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAdverseReaction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ADVERSEREACTION, value);
	}
    /**
     * Removes a value of property AdverseReaction given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAdverseReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ADVERSEREACTION, value);
	}
	
    /**
     * Removes a value of property AdverseReaction given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAdverseReaction(Thing value) {
		Base.remove(this.model, this.getResource(), ADVERSEREACTION, value);
	}
  
    /**
     * Removes all values of property AdverseReaction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAdverseReaction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ADVERSEREACTION);
	}
	
    /**
     * Removes all values of property AdverseReaction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAdverseReaction() {
		Base.removeAll(this.model, this.getResource(), ADVERSEREACTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2eb3d77 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBoxedWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BOXEDWARNING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2eb3d77 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBoxedWarning() {
		return Base.has(this.model, this.getResource(), BOXEDWARNING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2eb3d77 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBoxedWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BOXEDWARNING, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2eb3d77 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBoxedWarning( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BOXEDWARNING, value);
	}

     /**
     * Get all values of property BoxedWarning as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBoxedWarning_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BOXEDWARNING);
	}
	
    /**
     * Get all values of property BoxedWarning as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBoxedWarning_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BOXEDWARNING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BoxedWarning as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBoxedWarning_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BOXEDWARNING);
	}

    /**
     * Get all values of property BoxedWarning as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBoxedWarning_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BOXEDWARNING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BoxedWarning     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllBoxedWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BOXEDWARNING, Thing.class);
	}
	
    /**
     * Get all values of property BoxedWarning as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllBoxedWarning_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BOXEDWARNING, Thing.class);
	}

    /**
     * Get all values of property BoxedWarning     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllBoxedWarning() {
		return Base.getAll(this.model, this.getResource(), BOXEDWARNING, Thing.class);
	}

    /**
     * Get all values of property BoxedWarning as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllBoxedWarning_as() {
		return Base.getAll_as(this.model, this.getResource(), BOXEDWARNING, Thing.class);
	}
 
    /**
     * Adds a value to property BoxedWarning as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBoxedWarning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BOXEDWARNING, value);
	}
	
    /**
     * Adds a value to property BoxedWarning as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBoxedWarning( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BOXEDWARNING, value);
	}
    /**
     * Adds a value to property BoxedWarning from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBoxedWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, BOXEDWARNING, value);
	}
	
    /**
     * Adds a value to property BoxedWarning from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBoxedWarning(Thing value) {
		Base.add(this.model, this.getResource(), BOXEDWARNING, value);
	}
  

    /**
     * Sets a value of property BoxedWarning from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBoxedWarning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BOXEDWARNING, value);
	}
	
    /**
     * Sets a value of property BoxedWarning from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBoxedWarning( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BOXEDWARNING, value);
	}
    /**
     * Sets a value of property BoxedWarning from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBoxedWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, BOXEDWARNING, value);
	}
	
    /**
     * Sets a value of property BoxedWarning from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBoxedWarning(Thing value) {
		Base.set(this.model, this.getResource(), BOXEDWARNING, value);
	}
  


    /**
     * Removes a value of property BoxedWarning as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBoxedWarning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BOXEDWARNING, value);
	}
	
    /**
     * Removes a value of property BoxedWarning as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBoxedWarning( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BOXEDWARNING, value);
	}
    /**
     * Removes a value of property BoxedWarning given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBoxedWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, BOXEDWARNING, value);
	}
	
    /**
     * Removes a value of property BoxedWarning given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBoxedWarning(Thing value) {
		Base.remove(this.model, this.getResource(), BOXEDWARNING, value);
	}
  
    /**
     * Removes all values of property BoxedWarning     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBoxedWarning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BOXEDWARNING);
	}
	
    /**
     * Removes all values of property BoxedWarning	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBoxedWarning() {
		Base.removeAll(this.model, this.getResource(), BOXEDWARNING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dac8194 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasClinicalPharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CLINICALPHARMACOLOGY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dac8194 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasClinicalPharmacology() {
		return Base.has(this.model, this.getResource(), CLINICALPHARMACOLOGY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dac8194 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasClinicalPharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CLINICALPHARMACOLOGY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@dac8194 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasClinicalPharmacology( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CLINICALPHARMACOLOGY, value);
	}

     /**
     * Get all values of property ClinicalPharmacology as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllClinicalPharmacology_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CLINICALPHARMACOLOGY);
	}
	
    /**
     * Get all values of property ClinicalPharmacology as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllClinicalPharmacology_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CLINICALPHARMACOLOGY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ClinicalPharmacology as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllClinicalPharmacology_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CLINICALPHARMACOLOGY);
	}

    /**
     * Get all values of property ClinicalPharmacology as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllClinicalPharmacology_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CLINICALPHARMACOLOGY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ClinicalPharmacology     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllClinicalPharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CLINICALPHARMACOLOGY, Thing.class);
	}
	
    /**
     * Get all values of property ClinicalPharmacology as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllClinicalPharmacology_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CLINICALPHARMACOLOGY, Thing.class);
	}

    /**
     * Get all values of property ClinicalPharmacology     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllClinicalPharmacology() {
		return Base.getAll(this.model, this.getResource(), CLINICALPHARMACOLOGY, Thing.class);
	}

    /**
     * Get all values of property ClinicalPharmacology as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllClinicalPharmacology_as() {
		return Base.getAll_as(this.model, this.getResource(), CLINICALPHARMACOLOGY, Thing.class);
	}
 
    /**
     * Adds a value to property ClinicalPharmacology as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addClinicalPharmacology( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CLINICALPHARMACOLOGY, value);
	}
	
    /**
     * Adds a value to property ClinicalPharmacology as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addClinicalPharmacology( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CLINICALPHARMACOLOGY, value);
	}
    /**
     * Adds a value to property ClinicalPharmacology from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addClinicalPharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CLINICALPHARMACOLOGY, value);
	}
	
    /**
     * Adds a value to property ClinicalPharmacology from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addClinicalPharmacology(Thing value) {
		Base.add(this.model, this.getResource(), CLINICALPHARMACOLOGY, value);
	}
  

    /**
     * Sets a value of property ClinicalPharmacology from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setClinicalPharmacology( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CLINICALPHARMACOLOGY, value);
	}
	
    /**
     * Sets a value of property ClinicalPharmacology from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setClinicalPharmacology( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CLINICALPHARMACOLOGY, value);
	}
    /**
     * Sets a value of property ClinicalPharmacology from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setClinicalPharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CLINICALPHARMACOLOGY, value);
	}
	
    /**
     * Sets a value of property ClinicalPharmacology from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setClinicalPharmacology(Thing value) {
		Base.set(this.model, this.getResource(), CLINICALPHARMACOLOGY, value);
	}
  


    /**
     * Removes a value of property ClinicalPharmacology as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeClinicalPharmacology( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CLINICALPHARMACOLOGY, value);
	}
	
    /**
     * Removes a value of property ClinicalPharmacology as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeClinicalPharmacology( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CLINICALPHARMACOLOGY, value);
	}
    /**
     * Removes a value of property ClinicalPharmacology given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeClinicalPharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CLINICALPHARMACOLOGY, value);
	}
	
    /**
     * Removes a value of property ClinicalPharmacology given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeClinicalPharmacology(Thing value) {
		Base.remove(this.model, this.getResource(), CLINICALPHARMACOLOGY, value);
	}
  
    /**
     * Removes all values of property ClinicalPharmacology     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllClinicalPharmacology( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CLINICALPHARMACOLOGY);
	}
	
    /**
     * Removes all values of property ClinicalPharmacology	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllClinicalPharmacology() {
		Base.removeAll(this.model, this.getResource(), CLINICALPHARMACOLOGY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ac08bf9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContraindication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTRAINDICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ac08bf9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContraindication() {
		return Base.has(this.model, this.getResource(), CONTRAINDICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ac08bf9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContraindication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTRAINDICATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ac08bf9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContraindication( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTRAINDICATION, value);
	}

     /**
     * Get all values of property Contraindication as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContraindication_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTRAINDICATION);
	}
	
    /**
     * Get all values of property Contraindication as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContraindication_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRAINDICATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Contraindication as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContraindication_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTRAINDICATION);
	}

    /**
     * Get all values of property Contraindication as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContraindication_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTRAINDICATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Contraindication     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllContraindication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTRAINDICATION, Thing.class);
	}
	
    /**
     * Get all values of property Contraindication as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllContraindication_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRAINDICATION, Thing.class);
	}

    /**
     * Get all values of property Contraindication     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllContraindication() {
		return Base.getAll(this.model, this.getResource(), CONTRAINDICATION, Thing.class);
	}

    /**
     * Get all values of property Contraindication as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllContraindication_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTRAINDICATION, Thing.class);
	}
 
    /**
     * Adds a value to property Contraindication as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContraindication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTRAINDICATION, value);
	}
	
    /**
     * Adds a value to property Contraindication as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContraindication( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTRAINDICATION, value);
	}
    /**
     * Adds a value to property Contraindication from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContraindication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CONTRAINDICATION, value);
	}
	
    /**
     * Adds a value to property Contraindication from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContraindication(Thing value) {
		Base.add(this.model, this.getResource(), CONTRAINDICATION, value);
	}
  

    /**
     * Sets a value of property Contraindication from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContraindication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTRAINDICATION, value);
	}
	
    /**
     * Sets a value of property Contraindication from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContraindication( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTRAINDICATION, value);
	}
    /**
     * Sets a value of property Contraindication from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContraindication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CONTRAINDICATION, value);
	}
	
    /**
     * Sets a value of property Contraindication from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContraindication(Thing value) {
		Base.set(this.model, this.getResource(), CONTRAINDICATION, value);
	}
  


    /**
     * Removes a value of property Contraindication as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContraindication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTRAINDICATION, value);
	}
	
    /**
     * Removes a value of property Contraindication as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContraindication( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTRAINDICATION, value);
	}
    /**
     * Removes a value of property Contraindication given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContraindication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CONTRAINDICATION, value);
	}
	
    /**
     * Removes a value of property Contraindication given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContraindication(Thing value) {
		Base.remove(this.model, this.getResource(), CONTRAINDICATION, value);
	}
  
    /**
     * Removes all values of property Contraindication     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContraindication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTRAINDICATION);
	}
	
    /**
     * Removes all values of property Contraindication	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContraindication() {
		Base.removeAll(this.model, this.getResource(), CONTRAINDICATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@343e6f08 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@343e6f08 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDescription() {
		return Base.has(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@343e6f08 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DESCRIPTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@343e6f08 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DESCRIPTION, value);
	}

     /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DESCRIPTION, Thing.class);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDescription() {
		return Base.getAll(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}
 
    /**
     * Adds a value to property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Adds a value to property Description from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDescription(Thing value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
  

    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDescription(Thing value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
  


    /**
     * Removes a value of property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Removes a value of property Description given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDescription(Thing value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
  
    /**
     * Removes all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Removes all values of property Description	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDescription() {
		Base.removeAll(this.model, this.getResource(), DESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6fad2629 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DOSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6fad2629 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDosage() {
		return Base.has(this.model, this.getResource(), DOSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6fad2629 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DOSAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6fad2629 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDosage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DOSAGE, value);
	}

     /**
     * Get all values of property Dosage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDosage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DOSAGE);
	}
	
    /**
     * Get all values of property Dosage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDosage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DOSAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Dosage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDosage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DOSAGE);
	}

    /**
     * Get all values of property Dosage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDosage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DOSAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Dosage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DOSAGE, Thing.class);
	}
	
    /**
     * Get all values of property Dosage as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDosage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DOSAGE, Thing.class);
	}

    /**
     * Get all values of property Dosage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDosage() {
		return Base.getAll(this.model, this.getResource(), DOSAGE, Thing.class);
	}

    /**
     * Get all values of property Dosage as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDosage_as() {
		return Base.getAll_as(this.model, this.getResource(), DOSAGE, Thing.class);
	}
 
    /**
     * Adds a value to property Dosage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDosage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DOSAGE, value);
	}
	
    /**
     * Adds a value to property Dosage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDosage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DOSAGE, value);
	}
    /**
     * Adds a value to property Dosage from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DOSAGE, value);
	}
	
    /**
     * Adds a value to property Dosage from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDosage(Thing value) {
		Base.add(this.model, this.getResource(), DOSAGE, value);
	}
  

    /**
     * Sets a value of property Dosage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDosage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DOSAGE, value);
	}
	
    /**
     * Sets a value of property Dosage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDosage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DOSAGE, value);
	}
    /**
     * Sets a value of property Dosage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DOSAGE, value);
	}
	
    /**
     * Sets a value of property Dosage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDosage(Thing value) {
		Base.set(this.model, this.getResource(), DOSAGE, value);
	}
  


    /**
     * Removes a value of property Dosage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDosage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DOSAGE, value);
	}
	
    /**
     * Removes a value of property Dosage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDosage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DOSAGE, value);
	}
    /**
     * Removes a value of property Dosage given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DOSAGE, value);
	}
	
    /**
     * Removes a value of property Dosage given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDosage(Thing value) {
		Base.remove(this.model, this.getResource(), DOSAGE, value);
	}
  
    /**
     * Removes all values of property Dosage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDosage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DOSAGE);
	}
	
    /**
     * Removes all values of property Dosage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDosage() {
		Base.removeAll(this.model, this.getResource(), DOSAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d1b6112 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EQUIVALENTCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d1b6112 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEquivalentClass() {
		return Base.has(this.model, this.getResource(), EQUIVALENTCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d1b6112 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EQUIVALENTCLASS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d1b6112 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEquivalentClass( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}

     /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EQUIVALENTCLASS);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EQUIVALENTCLASS, Thing.class);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllEquivalentClass_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, Thing.class);
	}

    /**
     * Get all values of property EquivalentClass     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllEquivalentClass() {
		return Base.getAll(this.model, this.getResource(), EQUIVALENTCLASS, Thing.class);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllEquivalentClass_as() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, Thing.class);
	}
 
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Adds a value to property EquivalentClass from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEquivalentClass(Thing value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  

    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Sets a value of property EquivalentClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEquivalentClass(Thing value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  


    /**
     * Removes a value of property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Removes a value of property EquivalentClass given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEquivalentClass(Thing value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  
    /**
     * Removes all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Removes all values of property EquivalentClass	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEquivalentClass() {
		Base.removeAll(this.model, this.getResource(), EQUIVALENTCLASS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c894a20 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFullName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FULLNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c894a20 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFullName() {
		return Base.has(this.model, this.getResource(), FULLNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c894a20 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFullName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FULLNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c894a20 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFullName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FULLNAME, value);
	}

     /**
     * Get all values of property FullName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFullName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FULLNAME);
	}
	
    /**
     * Get all values of property FullName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFullName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FULLNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FullName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFullName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FULLNAME);
	}

    /**
     * Get all values of property FullName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFullName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FULLNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FullName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFullName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FULLNAME, Thing.class);
	}
	
    /**
     * Get all values of property FullName as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFullName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FULLNAME, Thing.class);
	}

    /**
     * Get all values of property FullName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFullName() {
		return Base.getAll(this.model, this.getResource(), FULLNAME, Thing.class);
	}

    /**
     * Get all values of property FullName as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFullName_as() {
		return Base.getAll_as(this.model, this.getResource(), FULLNAME, Thing.class);
	}
 
    /**
     * Adds a value to property FullName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFullName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Adds a value to property FullName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFullName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FULLNAME, value);
	}
    /**
     * Adds a value to property FullName from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFullName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Adds a value to property FullName from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFullName(Thing value) {
		Base.add(this.model, this.getResource(), FULLNAME, value);
	}
  

    /**
     * Sets a value of property FullName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFullName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Sets a value of property FullName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFullName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FULLNAME, value);
	}
    /**
     * Sets a value of property FullName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFullName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Sets a value of property FullName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFullName(Thing value) {
		Base.set(this.model, this.getResource(), FULLNAME, value);
	}
  


    /**
     * Removes a value of property FullName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFullName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Removes a value of property FullName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFullName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FULLNAME, value);
	}
    /**
     * Removes a value of property FullName given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFullName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, FULLNAME, value);
	}
	
    /**
     * Removes a value of property FullName given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFullName(Thing value) {
		Base.remove(this.model, this.getResource(), FULLNAME, value);
	}
  
    /**
     * Removes all values of property FullName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFullName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FULLNAME);
	}
	
    /**
     * Removes all values of property FullName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFullName() {
		Base.removeAll(this.model, this.getResource(), FULLNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b6f68e0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenericDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENERICDRUG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b6f68e0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenericDrug() {
		return Base.has(this.model, this.getResource(), GENERICDRUG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b6f68e0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenericDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENERICDRUG, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b6f68e0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenericDrug( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENERICDRUG, value);
	}

     /**
     * Get all values of property GenericDrug as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenericDrug_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENERICDRUG);
	}
	
    /**
     * Get all values of property GenericDrug as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenericDrug_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERICDRUG, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GenericDrug as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenericDrug_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENERICDRUG);
	}

    /**
     * Get all values of property GenericDrug as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenericDrug_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENERICDRUG, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GenericDrug     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGenericDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENERICDRUG, Thing.class);
	}
	
    /**
     * Get all values of property GenericDrug as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGenericDrug_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERICDRUG, Thing.class);
	}

    /**
     * Get all values of property GenericDrug     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGenericDrug() {
		return Base.getAll(this.model, this.getResource(), GENERICDRUG, Thing.class);
	}

    /**
     * Get all values of property GenericDrug as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGenericDrug_as() {
		return Base.getAll_as(this.model, this.getResource(), GENERICDRUG, Thing.class);
	}
 
    /**
     * Adds a value to property GenericDrug as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenericDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENERICDRUG, value);
	}
	
    /**
     * Adds a value to property GenericDrug as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenericDrug( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENERICDRUG, value);
	}
    /**
     * Adds a value to property GenericDrug from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenericDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENERICDRUG, value);
	}
	
    /**
     * Adds a value to property GenericDrug from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenericDrug(Thing value) {
		Base.add(this.model, this.getResource(), GENERICDRUG, value);
	}
  

    /**
     * Sets a value of property GenericDrug from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenericDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENERICDRUG, value);
	}
	
    /**
     * Sets a value of property GenericDrug from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenericDrug( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENERICDRUG, value);
	}
    /**
     * Sets a value of property GenericDrug from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenericDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENERICDRUG, value);
	}
	
    /**
     * Sets a value of property GenericDrug from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenericDrug(Thing value) {
		Base.set(this.model, this.getResource(), GENERICDRUG, value);
	}
  


    /**
     * Removes a value of property GenericDrug as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenericDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENERICDRUG, value);
	}
	
    /**
     * Removes a value of property GenericDrug as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenericDrug( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENERICDRUG, value);
	}
    /**
     * Removes a value of property GenericDrug given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenericDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENERICDRUG, value);
	}
	
    /**
     * Removes a value of property GenericDrug given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenericDrug(Thing value) {
		Base.remove(this.model, this.getResource(), GENERICDRUG, value);
	}
  
    /**
     * Removes all values of property GenericDrug     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenericDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENERICDRUG);
	}
	
    /**
     * Removes all values of property GenericDrug	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenericDrug() {
		Base.removeAll(this.model, this.getResource(), GENERICDRUG);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f1a6d26 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenericMedicine(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENERICMEDICINE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f1a6d26 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenericMedicine() {
		return Base.has(this.model, this.getResource(), GENERICMEDICINE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f1a6d26 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenericMedicine(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENERICMEDICINE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f1a6d26 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenericMedicine( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENERICMEDICINE, value);
	}

     /**
     * Get all values of property GenericMedicine as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenericMedicine_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENERICMEDICINE);
	}
	
    /**
     * Get all values of property GenericMedicine as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenericMedicine_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERICMEDICINE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GenericMedicine as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenericMedicine_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENERICMEDICINE);
	}

    /**
     * Get all values of property GenericMedicine as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenericMedicine_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENERICMEDICINE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GenericMedicine     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGenericMedicine(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENERICMEDICINE, Thing.class);
	}
	
    /**
     * Get all values of property GenericMedicine as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGenericMedicine_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERICMEDICINE, Thing.class);
	}

    /**
     * Get all values of property GenericMedicine     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGenericMedicine() {
		return Base.getAll(this.model, this.getResource(), GENERICMEDICINE, Thing.class);
	}

    /**
     * Get all values of property GenericMedicine as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGenericMedicine_as() {
		return Base.getAll_as(this.model, this.getResource(), GENERICMEDICINE, Thing.class);
	}
 
    /**
     * Adds a value to property GenericMedicine as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenericMedicine( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENERICMEDICINE, value);
	}
	
    /**
     * Adds a value to property GenericMedicine as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenericMedicine( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENERICMEDICINE, value);
	}
    /**
     * Adds a value to property GenericMedicine from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenericMedicine(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENERICMEDICINE, value);
	}
	
    /**
     * Adds a value to property GenericMedicine from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenericMedicine(Thing value) {
		Base.add(this.model, this.getResource(), GENERICMEDICINE, value);
	}
  

    /**
     * Sets a value of property GenericMedicine from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenericMedicine( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENERICMEDICINE, value);
	}
	
    /**
     * Sets a value of property GenericMedicine from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenericMedicine( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENERICMEDICINE, value);
	}
    /**
     * Sets a value of property GenericMedicine from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenericMedicine(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENERICMEDICINE, value);
	}
	
    /**
     * Sets a value of property GenericMedicine from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenericMedicine(Thing value) {
		Base.set(this.model, this.getResource(), GENERICMEDICINE, value);
	}
  


    /**
     * Removes a value of property GenericMedicine as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenericMedicine( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENERICMEDICINE, value);
	}
	
    /**
     * Removes a value of property GenericMedicine as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenericMedicine( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENERICMEDICINE, value);
	}
    /**
     * Removes a value of property GenericMedicine given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenericMedicine(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENERICMEDICINE, value);
	}
	
    /**
     * Removes a value of property GenericMedicine given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenericMedicine(Thing value) {
		Base.remove(this.model, this.getResource(), GENERICMEDICINE, value);
	}
  
    /**
     * Removes all values of property GenericMedicine     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenericMedicine( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENERICMEDICINE);
	}
	
    /**
     * Removes all values of property GenericMedicine	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenericMedicine() {
		Base.removeAll(this.model, this.getResource(), GENERICMEDICINE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17aede10 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInactiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INACTIVEINGREDIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17aede10 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInactiveIngredient() {
		return Base.has(this.model, this.getResource(), INACTIVEINGREDIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17aede10 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInactiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INACTIVEINGREDIENT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17aede10 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInactiveIngredient( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INACTIVEINGREDIENT, value);
	}

     /**
     * Get all values of property InactiveIngredient as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInactiveIngredient_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INACTIVEINGREDIENT);
	}
	
    /**
     * Get all values of property InactiveIngredient as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInactiveIngredient_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INACTIVEINGREDIENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InactiveIngredient as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInactiveIngredient_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INACTIVEINGREDIENT);
	}

    /**
     * Get all values of property InactiveIngredient as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInactiveIngredient_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INACTIVEINGREDIENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InactiveIngredient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInactiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INACTIVEINGREDIENT, Thing.class);
	}
	
    /**
     * Get all values of property InactiveIngredient as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInactiveIngredient_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INACTIVEINGREDIENT, Thing.class);
	}

    /**
     * Get all values of property InactiveIngredient     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInactiveIngredient() {
		return Base.getAll(this.model, this.getResource(), INACTIVEINGREDIENT, Thing.class);
	}

    /**
     * Get all values of property InactiveIngredient as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInactiveIngredient_as() {
		return Base.getAll_as(this.model, this.getResource(), INACTIVEINGREDIENT, Thing.class);
	}
 
    /**
     * Adds a value to property InactiveIngredient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInactiveIngredient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INACTIVEINGREDIENT, value);
	}
	
    /**
     * Adds a value to property InactiveIngredient as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInactiveIngredient( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INACTIVEINGREDIENT, value);
	}
    /**
     * Adds a value to property InactiveIngredient from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInactiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INACTIVEINGREDIENT, value);
	}
	
    /**
     * Adds a value to property InactiveIngredient from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInactiveIngredient(Thing value) {
		Base.add(this.model, this.getResource(), INACTIVEINGREDIENT, value);
	}
  

    /**
     * Sets a value of property InactiveIngredient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInactiveIngredient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INACTIVEINGREDIENT, value);
	}
	
    /**
     * Sets a value of property InactiveIngredient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInactiveIngredient( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INACTIVEINGREDIENT, value);
	}
    /**
     * Sets a value of property InactiveIngredient from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInactiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INACTIVEINGREDIENT, value);
	}
	
    /**
     * Sets a value of property InactiveIngredient from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInactiveIngredient(Thing value) {
		Base.set(this.model, this.getResource(), INACTIVEINGREDIENT, value);
	}
  


    /**
     * Removes a value of property InactiveIngredient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInactiveIngredient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INACTIVEINGREDIENT, value);
	}
	
    /**
     * Removes a value of property InactiveIngredient as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInactiveIngredient( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INACTIVEINGREDIENT, value);
	}
    /**
     * Removes a value of property InactiveIngredient given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInactiveIngredient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INACTIVEINGREDIENT, value);
	}
	
    /**
     * Removes a value of property InactiveIngredient given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInactiveIngredient(Thing value) {
		Base.remove(this.model, this.getResource(), INACTIVEINGREDIENT, value);
	}
  
    /**
     * Removes all values of property InactiveIngredient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInactiveIngredient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INACTIVEINGREDIENT);
	}
	
    /**
     * Removes all values of property InactiveIngredient	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInactiveIngredient() {
		Base.removeAll(this.model, this.getResource(), INACTIVEINGREDIENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ab2bd08 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INDICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ab2bd08 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIndication() {
		return Base.has(this.model, this.getResource(), INDICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ab2bd08 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INDICATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ab2bd08 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIndication( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INDICATION, value);
	}

     /**
     * Get all values of property Indication as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIndication_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INDICATION);
	}
	
    /**
     * Get all values of property Indication as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIndication_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INDICATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Indication as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIndication_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INDICATION);
	}

    /**
     * Get all values of property Indication as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIndication_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INDICATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Indication     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INDICATION, Thing.class);
	}
	
    /**
     * Get all values of property Indication as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllIndication_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INDICATION, Thing.class);
	}

    /**
     * Get all values of property Indication     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllIndication() {
		return Base.getAll(this.model, this.getResource(), INDICATION, Thing.class);
	}

    /**
     * Get all values of property Indication as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllIndication_as() {
		return Base.getAll_as(this.model, this.getResource(), INDICATION, Thing.class);
	}
 
    /**
     * Adds a value to property Indication as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIndication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Adds a value to property Indication as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIndication( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INDICATION, value);
	}
    /**
     * Adds a value to property Indication from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Adds a value to property Indication from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIndication(Thing value) {
		Base.add(this.model, this.getResource(), INDICATION, value);
	}
  

    /**
     * Sets a value of property Indication from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIndication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Sets a value of property Indication from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIndication( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INDICATION, value);
	}
    /**
     * Sets a value of property Indication from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Sets a value of property Indication from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIndication(Thing value) {
		Base.set(this.model, this.getResource(), INDICATION, value);
	}
  


    /**
     * Removes a value of property Indication as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIndication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Removes a value of property Indication as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIndication( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INDICATION, value);
	}
    /**
     * Removes a value of property Indication given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Removes a value of property Indication given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIndication(Thing value) {
		Base.remove(this.model, this.getResource(), INDICATION, value);
	}
  
    /**
     * Removes all values of property Indication     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIndication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INDICATION);
	}
	
    /**
     * Removes all values of property Indication	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIndication() {
		Base.removeAll(this.model, this.getResource(), INDICATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c61112 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c61112 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasName() {
		return Base.has(this.model, this.getResource(), NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c61112 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c61112 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAME, value);
	}

     /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAME);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAME);
	}

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAME, Thing.class);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, Thing.class);
	}

    /**
     * Get all values of property Name     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllName() {
		return Base.getAll(this.model, this.getResource(), NAME, Thing.class);
	}

    /**
     * Get all values of property Name as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllName_as() {
		return Base.getAll_as(this.model, this.getResource(), NAME, Thing.class);
	}
 
    /**
     * Adds a value to property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
    /**
     * Adds a value to property Name from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addName(Thing value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
  

    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
    /**
     * Sets a value of property Name from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setName(Thing value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
  


    /**
     * Removes a value of property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
    /**
     * Removes a value of property Name given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeName(Thing value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
  
    /**
     * Removes all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAME);
	}
	
    /**
     * Removes all values of property Name	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllName() {
		Base.removeAll(this.model, this.getResource(), NAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@128b8191 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOverdosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OVERDOSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@128b8191 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOverdosage() {
		return Base.has(this.model, this.getResource(), OVERDOSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@128b8191 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOverdosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OVERDOSAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@128b8191 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOverdosage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OVERDOSAGE, value);
	}

     /**
     * Get all values of property Overdosage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOverdosage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OVERDOSAGE);
	}
	
    /**
     * Get all values of property Overdosage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOverdosage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OVERDOSAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Overdosage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOverdosage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OVERDOSAGE);
	}

    /**
     * Get all values of property Overdosage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOverdosage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OVERDOSAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Overdosage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllOverdosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OVERDOSAGE, Thing.class);
	}
	
    /**
     * Get all values of property Overdosage as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllOverdosage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OVERDOSAGE, Thing.class);
	}

    /**
     * Get all values of property Overdosage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllOverdosage() {
		return Base.getAll(this.model, this.getResource(), OVERDOSAGE, Thing.class);
	}

    /**
     * Get all values of property Overdosage as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllOverdosage_as() {
		return Base.getAll_as(this.model, this.getResource(), OVERDOSAGE, Thing.class);
	}
 
    /**
     * Adds a value to property Overdosage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOverdosage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OVERDOSAGE, value);
	}
	
    /**
     * Adds a value to property Overdosage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOverdosage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OVERDOSAGE, value);
	}
    /**
     * Adds a value to property Overdosage from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOverdosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, OVERDOSAGE, value);
	}
	
    /**
     * Adds a value to property Overdosage from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOverdosage(Thing value) {
		Base.add(this.model, this.getResource(), OVERDOSAGE, value);
	}
  

    /**
     * Sets a value of property Overdosage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOverdosage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OVERDOSAGE, value);
	}
	
    /**
     * Sets a value of property Overdosage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOverdosage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OVERDOSAGE, value);
	}
    /**
     * Sets a value of property Overdosage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOverdosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, OVERDOSAGE, value);
	}
	
    /**
     * Sets a value of property Overdosage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOverdosage(Thing value) {
		Base.set(this.model, this.getResource(), OVERDOSAGE, value);
	}
  


    /**
     * Removes a value of property Overdosage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOverdosage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OVERDOSAGE, value);
	}
	
    /**
     * Removes a value of property Overdosage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOverdosage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OVERDOSAGE, value);
	}
    /**
     * Removes a value of property Overdosage given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOverdosage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, OVERDOSAGE, value);
	}
	
    /**
     * Removes a value of property Overdosage given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOverdosage(Thing value) {
		Base.remove(this.model, this.getResource(), OVERDOSAGE, value);
	}
  
    /**
     * Removes all values of property Overdosage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOverdosage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OVERDOSAGE);
	}
	
    /**
     * Removes all values of property Overdosage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOverdosage() {
		Base.removeAll(this.model, this.getResource(), OVERDOSAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d358e4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, POSSIBLEDISEASETARGET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d358e4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPossibleDiseaseTarget() {
		return Base.has(this.model, this.getResource(), POSSIBLEDISEASETARGET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d358e4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d358e4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPossibleDiseaseTarget( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}

     /**
     * Get all values of property PossibleDiseaseTarget as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPossibleDiseaseTarget_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, POSSIBLEDISEASETARGET);
	}
	
    /**
     * Get all values of property PossibleDiseaseTarget as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPossibleDiseaseTarget_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSSIBLEDISEASETARGET, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PossibleDiseaseTarget as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPossibleDiseaseTarget_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), POSSIBLEDISEASETARGET);
	}

    /**
     * Get all values of property PossibleDiseaseTarget as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPossibleDiseaseTarget_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), POSSIBLEDISEASETARGET, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PossibleDiseaseTarget     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, POSSIBLEDISEASETARGET, Thing.class);
	}
	
    /**
     * Get all values of property PossibleDiseaseTarget as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPossibleDiseaseTarget_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSSIBLEDISEASETARGET, Thing.class);
	}

    /**
     * Get all values of property PossibleDiseaseTarget     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPossibleDiseaseTarget() {
		return Base.getAll(this.model, this.getResource(), POSSIBLEDISEASETARGET, Thing.class);
	}

    /**
     * Get all values of property PossibleDiseaseTarget as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPossibleDiseaseTarget_as() {
		return Base.getAll_as(this.model, this.getResource(), POSSIBLEDISEASETARGET, Thing.class);
	}
 
    /**
     * Adds a value to property PossibleDiseaseTarget as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPossibleDiseaseTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Adds a value to property PossibleDiseaseTarget as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPossibleDiseaseTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
    /**
     * Adds a value to property PossibleDiseaseTarget from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Adds a value to property PossibleDiseaseTarget from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPossibleDiseaseTarget(Thing value) {
		Base.add(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
  

    /**
     * Sets a value of property PossibleDiseaseTarget from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPossibleDiseaseTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Sets a value of property PossibleDiseaseTarget from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPossibleDiseaseTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
    /**
     * Sets a value of property PossibleDiseaseTarget from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Sets a value of property PossibleDiseaseTarget from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPossibleDiseaseTarget(Thing value) {
		Base.set(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
  


    /**
     * Removes a value of property PossibleDiseaseTarget as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePossibleDiseaseTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Removes a value of property PossibleDiseaseTarget as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePossibleDiseaseTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
    /**
     * Removes a value of property PossibleDiseaseTarget given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Removes a value of property PossibleDiseaseTarget given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePossibleDiseaseTarget(Thing value) {
		Base.remove(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
  
    /**
     * Removes all values of property PossibleDiseaseTarget     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPossibleDiseaseTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, POSSIBLEDISEASETARGET);
	}
	
    /**
     * Removes all values of property PossibleDiseaseTarget	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPossibleDiseaseTarget() {
		Base.removeAll(this.model, this.getResource(), POSSIBLEDISEASETARGET);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50db75d1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrecaution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRECAUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50db75d1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrecaution() {
		return Base.has(this.model, this.getResource(), PRECAUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50db75d1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrecaution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRECAUTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50db75d1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrecaution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRECAUTION, value);
	}

     /**
     * Get all values of property Precaution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrecaution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRECAUTION);
	}
	
    /**
     * Get all values of property Precaution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrecaution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRECAUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Precaution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrecaution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRECAUTION);
	}

    /**
     * Get all values of property Precaution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrecaution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRECAUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Precaution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPrecaution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRECAUTION, Thing.class);
	}
	
    /**
     * Get all values of property Precaution as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPrecaution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRECAUTION, Thing.class);
	}

    /**
     * Get all values of property Precaution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPrecaution() {
		return Base.getAll(this.model, this.getResource(), PRECAUTION, Thing.class);
	}

    /**
     * Get all values of property Precaution as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPrecaution_as() {
		return Base.getAll_as(this.model, this.getResource(), PRECAUTION, Thing.class);
	}
 
    /**
     * Adds a value to property Precaution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrecaution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRECAUTION, value);
	}
	
    /**
     * Adds a value to property Precaution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrecaution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRECAUTION, value);
	}
    /**
     * Adds a value to property Precaution from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrecaution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PRECAUTION, value);
	}
	
    /**
     * Adds a value to property Precaution from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrecaution(Thing value) {
		Base.add(this.model, this.getResource(), PRECAUTION, value);
	}
  

    /**
     * Sets a value of property Precaution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrecaution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRECAUTION, value);
	}
	
    /**
     * Sets a value of property Precaution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrecaution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRECAUTION, value);
	}
    /**
     * Sets a value of property Precaution from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrecaution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PRECAUTION, value);
	}
	
    /**
     * Sets a value of property Precaution from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrecaution(Thing value) {
		Base.set(this.model, this.getResource(), PRECAUTION, value);
	}
  


    /**
     * Removes a value of property Precaution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrecaution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRECAUTION, value);
	}
	
    /**
     * Removes a value of property Precaution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrecaution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRECAUTION, value);
	}
    /**
     * Removes a value of property Precaution given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrecaution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PRECAUTION, value);
	}
	
    /**
     * Removes a value of property Precaution given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrecaution(Thing value) {
		Base.remove(this.model, this.getResource(), PRECAUTION, value);
	}
  
    /**
     * Removes all values of property Precaution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrecaution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRECAUTION);
	}
	
    /**
     * Removes all values of property Precaution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrecaution() {
		Base.removeAll(this.model, this.getResource(), PRECAUTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cbda6d4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasProducesDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRODUCESDRUG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cbda6d4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasProducesDrug() {
		return Base.has(this.model, this.getResource(), PRODUCESDRUG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cbda6d4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasProducesDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRODUCESDRUG, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cbda6d4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasProducesDrug( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRODUCESDRUG, value);
	}

     /**
     * Get all values of property ProducesDrug as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllProducesDrug_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRODUCESDRUG);
	}
	
    /**
     * Get all values of property ProducesDrug as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllProducesDrug_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRODUCESDRUG, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ProducesDrug as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllProducesDrug_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRODUCESDRUG);
	}

    /**
     * Get all values of property ProducesDrug as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllProducesDrug_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRODUCESDRUG, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ProducesDrug     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllProducesDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRODUCESDRUG, Thing.class);
	}
	
    /**
     * Get all values of property ProducesDrug as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllProducesDrug_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRODUCESDRUG, Thing.class);
	}

    /**
     * Get all values of property ProducesDrug     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllProducesDrug() {
		return Base.getAll(this.model, this.getResource(), PRODUCESDRUG, Thing.class);
	}

    /**
     * Get all values of property ProducesDrug as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllProducesDrug_as() {
		return Base.getAll_as(this.model, this.getResource(), PRODUCESDRUG, Thing.class);
	}
 
    /**
     * Adds a value to property ProducesDrug as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addProducesDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRODUCESDRUG, value);
	}
	
    /**
     * Adds a value to property ProducesDrug as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addProducesDrug( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRODUCESDRUG, value);
	}
    /**
     * Adds a value to property ProducesDrug from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addProducesDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PRODUCESDRUG, value);
	}
	
    /**
     * Adds a value to property ProducesDrug from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addProducesDrug(Thing value) {
		Base.add(this.model, this.getResource(), PRODUCESDRUG, value);
	}
  

    /**
     * Sets a value of property ProducesDrug from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setProducesDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRODUCESDRUG, value);
	}
	
    /**
     * Sets a value of property ProducesDrug from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setProducesDrug( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRODUCESDRUG, value);
	}
    /**
     * Sets a value of property ProducesDrug from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setProducesDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PRODUCESDRUG, value);
	}
	
    /**
     * Sets a value of property ProducesDrug from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setProducesDrug(Thing value) {
		Base.set(this.model, this.getResource(), PRODUCESDRUG, value);
	}
  


    /**
     * Removes a value of property ProducesDrug as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeProducesDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRODUCESDRUG, value);
	}
	
    /**
     * Removes a value of property ProducesDrug as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeProducesDrug( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRODUCESDRUG, value);
	}
    /**
     * Removes a value of property ProducesDrug given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeProducesDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PRODUCESDRUG, value);
	}
	
    /**
     * Removes a value of property ProducesDrug given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeProducesDrug(Thing value) {
		Base.remove(this.model, this.getResource(), PRODUCESDRUG, value);
	}
  
    /**
     * Removes all values of property ProducesDrug     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllProducesDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRODUCESDRUG);
	}
	
    /**
     * Removes all values of property ProducesDrug	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllProducesDrug() {
		Base.removeAll(this.model, this.getResource(), PRODUCESDRUG);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e9fd49d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRepresentedOrganization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPRESENTEDORGANIZATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e9fd49d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRepresentedOrganization() {
		return Base.has(this.model, this.getResource(), REPRESENTEDORGANIZATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e9fd49d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRepresentedOrganization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPRESENTEDORGANIZATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e9fd49d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRepresentedOrganization( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPRESENTEDORGANIZATION, value);
	}

     /**
     * Get all values of property RepresentedOrganization as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRepresentedOrganization_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPRESENTEDORGANIZATION);
	}
	
    /**
     * Get all values of property RepresentedOrganization as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRepresentedOrganization_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPRESENTEDORGANIZATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RepresentedOrganization as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRepresentedOrganization_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPRESENTEDORGANIZATION);
	}

    /**
     * Get all values of property RepresentedOrganization as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRepresentedOrganization_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPRESENTEDORGANIZATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RepresentedOrganization     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllRepresentedOrganization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPRESENTEDORGANIZATION, Thing.class);
	}
	
    /**
     * Get all values of property RepresentedOrganization as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllRepresentedOrganization_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPRESENTEDORGANIZATION, Thing.class);
	}

    /**
     * Get all values of property RepresentedOrganization     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllRepresentedOrganization() {
		return Base.getAll(this.model, this.getResource(), REPRESENTEDORGANIZATION, Thing.class);
	}

    /**
     * Get all values of property RepresentedOrganization as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllRepresentedOrganization_as() {
		return Base.getAll_as(this.model, this.getResource(), REPRESENTEDORGANIZATION, Thing.class);
	}
 
    /**
     * Adds a value to property RepresentedOrganization as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRepresentedOrganization( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPRESENTEDORGANIZATION, value);
	}
	
    /**
     * Adds a value to property RepresentedOrganization as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRepresentedOrganization( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPRESENTEDORGANIZATION, value);
	}
    /**
     * Adds a value to property RepresentedOrganization from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRepresentedOrganization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, REPRESENTEDORGANIZATION, value);
	}
	
    /**
     * Adds a value to property RepresentedOrganization from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRepresentedOrganization(Thing value) {
		Base.add(this.model, this.getResource(), REPRESENTEDORGANIZATION, value);
	}
  

    /**
     * Sets a value of property RepresentedOrganization from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRepresentedOrganization( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPRESENTEDORGANIZATION, value);
	}
	
    /**
     * Sets a value of property RepresentedOrganization from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRepresentedOrganization( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPRESENTEDORGANIZATION, value);
	}
    /**
     * Sets a value of property RepresentedOrganization from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRepresentedOrganization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, REPRESENTEDORGANIZATION, value);
	}
	
    /**
     * Sets a value of property RepresentedOrganization from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRepresentedOrganization(Thing value) {
		Base.set(this.model, this.getResource(), REPRESENTEDORGANIZATION, value);
	}
  


    /**
     * Removes a value of property RepresentedOrganization as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRepresentedOrganization( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPRESENTEDORGANIZATION, value);
	}
	
    /**
     * Removes a value of property RepresentedOrganization as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRepresentedOrganization( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPRESENTEDORGANIZATION, value);
	}
    /**
     * Removes a value of property RepresentedOrganization given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRepresentedOrganization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, REPRESENTEDORGANIZATION, value);
	}
	
    /**
     * Removes a value of property RepresentedOrganization given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRepresentedOrganization(Thing value) {
		Base.remove(this.model, this.getResource(), REPRESENTEDORGANIZATION, value);
	}
  
    /**
     * Removes all values of property RepresentedOrganization     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRepresentedOrganization( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPRESENTEDORGANIZATION);
	}
	
    /**
     * Removes all values of property RepresentedOrganization	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRepresentedOrganization() {
		Base.removeAll(this.model, this.getResource(), REPRESENTEDORGANIZATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d77a56a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRouteOfAdministration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ROUTEOFADMINISTRATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d77a56a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRouteOfAdministration() {
		return Base.has(this.model, this.getResource(), ROUTEOFADMINISTRATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d77a56a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRouteOfAdministration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ROUTEOFADMINISTRATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d77a56a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRouteOfAdministration( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ROUTEOFADMINISTRATION, value);
	}

     /**
     * Get all values of property RouteOfAdministration as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRouteOfAdministration_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ROUTEOFADMINISTRATION);
	}
	
    /**
     * Get all values of property RouteOfAdministration as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRouteOfAdministration_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ROUTEOFADMINISTRATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RouteOfAdministration as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRouteOfAdministration_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ROUTEOFADMINISTRATION);
	}

    /**
     * Get all values of property RouteOfAdministration as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRouteOfAdministration_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ROUTEOFADMINISTRATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RouteOfAdministration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllRouteOfAdministration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ROUTEOFADMINISTRATION, Thing.class);
	}
	
    /**
     * Get all values of property RouteOfAdministration as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllRouteOfAdministration_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ROUTEOFADMINISTRATION, Thing.class);
	}

    /**
     * Get all values of property RouteOfAdministration     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllRouteOfAdministration() {
		return Base.getAll(this.model, this.getResource(), ROUTEOFADMINISTRATION, Thing.class);
	}

    /**
     * Get all values of property RouteOfAdministration as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllRouteOfAdministration_as() {
		return Base.getAll_as(this.model, this.getResource(), ROUTEOFADMINISTRATION, Thing.class);
	}
 
    /**
     * Adds a value to property RouteOfAdministration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRouteOfAdministration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ROUTEOFADMINISTRATION, value);
	}
	
    /**
     * Adds a value to property RouteOfAdministration as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRouteOfAdministration( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ROUTEOFADMINISTRATION, value);
	}
    /**
     * Adds a value to property RouteOfAdministration from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRouteOfAdministration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ROUTEOFADMINISTRATION, value);
	}
	
    /**
     * Adds a value to property RouteOfAdministration from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRouteOfAdministration(Thing value) {
		Base.add(this.model, this.getResource(), ROUTEOFADMINISTRATION, value);
	}
  

    /**
     * Sets a value of property RouteOfAdministration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRouteOfAdministration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ROUTEOFADMINISTRATION, value);
	}
	
    /**
     * Sets a value of property RouteOfAdministration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRouteOfAdministration( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ROUTEOFADMINISTRATION, value);
	}
    /**
     * Sets a value of property RouteOfAdministration from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRouteOfAdministration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ROUTEOFADMINISTRATION, value);
	}
	
    /**
     * Sets a value of property RouteOfAdministration from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRouteOfAdministration(Thing value) {
		Base.set(this.model, this.getResource(), ROUTEOFADMINISTRATION, value);
	}
  


    /**
     * Removes a value of property RouteOfAdministration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRouteOfAdministration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ROUTEOFADMINISTRATION, value);
	}
	
    /**
     * Removes a value of property RouteOfAdministration as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRouteOfAdministration( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ROUTEOFADMINISTRATION, value);
	}
    /**
     * Removes a value of property RouteOfAdministration given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRouteOfAdministration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ROUTEOFADMINISTRATION, value);
	}
	
    /**
     * Removes a value of property RouteOfAdministration given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRouteOfAdministration(Thing value) {
		Base.remove(this.model, this.getResource(), ROUTEOFADMINISTRATION, value);
	}
  
    /**
     * Removes all values of property RouteOfAdministration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRouteOfAdministration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ROUTEOFADMINISTRATION);
	}
	
    /**
     * Removes all values of property RouteOfAdministration	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRouteOfAdministration() {
		Base.removeAll(this.model, this.getResource(), ROUTEOFADMINISTRATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e8dbaf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SAMEAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e8dbaf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSameAs() {
		return Base.has(this.model, this.getResource(), SAMEAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e8dbaf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SAMEAS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e8dbaf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSameAs( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SAMEAS, value);
	}

     /**
     * Get all values of property SameAs as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SAMEAS);
	}
	
    /**
     * Get all values of property SameAs as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMEAS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SameAs as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SAMEAS);
	}

    /**
     * Get all values of property SameAs as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SAMEAS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SameAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SAMEAS, Thing.class);
	}
	
    /**
     * Get all values of property SameAs as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSameAs_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMEAS, Thing.class);
	}

    /**
     * Get all values of property SameAs     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSameAs() {
		return Base.getAll(this.model, this.getResource(), SAMEAS, Thing.class);
	}

    /**
     * Get all values of property SameAs as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSameAs_as() {
		return Base.getAll_as(this.model, this.getResource(), SAMEAS, Thing.class);
	}
 
    /**
     * Adds a value to property SameAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Adds a value to property SameAs as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Adds a value to property SameAs from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Adds a value to property SameAs from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSameAs(Thing value) {
		Base.add(this.model, this.getResource(), SAMEAS, value);
	}
  

    /**
     * Sets a value of property SameAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Sets a value of property SameAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Sets a value of property SameAs from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Sets a value of property SameAs from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSameAs(Thing value) {
		Base.set(this.model, this.getResource(), SAMEAS, value);
	}
  


    /**
     * Removes a value of property SameAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Removes a value of property SameAs as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Removes a value of property SameAs given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Removes a value of property SameAs given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSameAs(Thing value) {
		Base.remove(this.model, this.getResource(), SAMEAS, value);
	}
  
    /**
     * Removes all values of property SameAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SAMEAS);
	}
	
    /**
     * Removes all values of property SameAs	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSameAs() {
		Base.removeAll(this.model, this.getResource(), SAMEAS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71abdf99 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSideEffect(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SIDEEFFECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71abdf99 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSideEffect() {
		return Base.has(this.model, this.getResource(), SIDEEFFECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71abdf99 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSideEffect(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SIDEEFFECT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71abdf99 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSideEffect( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SIDEEFFECT, value);
	}

     /**
     * Get all values of property SideEffect as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSideEffect_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SIDEEFFECT);
	}
	
    /**
     * Get all values of property SideEffect as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSideEffect_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIDEEFFECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SideEffect as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSideEffect_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SIDEEFFECT);
	}

    /**
     * Get all values of property SideEffect as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSideEffect_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SIDEEFFECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SideEffect     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSideEffect(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SIDEEFFECT, Thing.class);
	}
	
    /**
     * Get all values of property SideEffect as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSideEffect_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIDEEFFECT, Thing.class);
	}

    /**
     * Get all values of property SideEffect     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSideEffect() {
		return Base.getAll(this.model, this.getResource(), SIDEEFFECT, Thing.class);
	}

    /**
     * Get all values of property SideEffect as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSideEffect_as() {
		return Base.getAll_as(this.model, this.getResource(), SIDEEFFECT, Thing.class);
	}
 
    /**
     * Adds a value to property SideEffect as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSideEffect( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SIDEEFFECT, value);
	}
	
    /**
     * Adds a value to property SideEffect as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSideEffect( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SIDEEFFECT, value);
	}
    /**
     * Adds a value to property SideEffect from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSideEffect(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SIDEEFFECT, value);
	}
	
    /**
     * Adds a value to property SideEffect from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSideEffect(Thing value) {
		Base.add(this.model, this.getResource(), SIDEEFFECT, value);
	}
  

    /**
     * Sets a value of property SideEffect from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSideEffect( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SIDEEFFECT, value);
	}
	
    /**
     * Sets a value of property SideEffect from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSideEffect( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SIDEEFFECT, value);
	}
    /**
     * Sets a value of property SideEffect from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSideEffect(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SIDEEFFECT, value);
	}
	
    /**
     * Sets a value of property SideEffect from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSideEffect(Thing value) {
		Base.set(this.model, this.getResource(), SIDEEFFECT, value);
	}
  


    /**
     * Removes a value of property SideEffect as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSideEffect( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SIDEEFFECT, value);
	}
	
    /**
     * Removes a value of property SideEffect as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSideEffect( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SIDEEFFECT, value);
	}
    /**
     * Removes a value of property SideEffect given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSideEffect(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SIDEEFFECT, value);
	}
	
    /**
     * Removes a value of property SideEffect given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSideEffect(Thing value) {
		Base.remove(this.model, this.getResource(), SIDEEFFECT, value);
	}
  
    /**
     * Removes all values of property SideEffect     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSideEffect( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SIDEEFFECT);
	}
	
    /**
     * Removes all values of property SideEffect	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSideEffect() {
		Base.removeAll(this.model, this.getResource(), SIDEEFFECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d91e07e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSupplementalPatientMaterial(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d91e07e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSupplementalPatientMaterial() {
		return Base.has(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d91e07e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSupplementalPatientMaterial(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d91e07e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSupplementalPatientMaterial( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL, value);
	}

     /**
     * Get all values of property SupplementalPatientMaterial as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSupplementalPatientMaterial_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL);
	}
	
    /**
     * Get all values of property SupplementalPatientMaterial as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSupplementalPatientMaterial_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SupplementalPatientMaterial as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSupplementalPatientMaterial_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL);
	}

    /**
     * Get all values of property SupplementalPatientMaterial as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSupplementalPatientMaterial_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SupplementalPatientMaterial     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSupplementalPatientMaterial(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL, Thing.class);
	}
	
    /**
     * Get all values of property SupplementalPatientMaterial as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSupplementalPatientMaterial_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL, Thing.class);
	}

    /**
     * Get all values of property SupplementalPatientMaterial     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSupplementalPatientMaterial() {
		return Base.getAll(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL, Thing.class);
	}

    /**
     * Get all values of property SupplementalPatientMaterial as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSupplementalPatientMaterial_as() {
		return Base.getAll_as(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL, Thing.class);
	}
 
    /**
     * Adds a value to property SupplementalPatientMaterial as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSupplementalPatientMaterial( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL, value);
	}
	
    /**
     * Adds a value to property SupplementalPatientMaterial as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSupplementalPatientMaterial( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL, value);
	}
    /**
     * Adds a value to property SupplementalPatientMaterial from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSupplementalPatientMaterial(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL, value);
	}
	
    /**
     * Adds a value to property SupplementalPatientMaterial from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSupplementalPatientMaterial(Thing value) {
		Base.add(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL, value);
	}
  

    /**
     * Sets a value of property SupplementalPatientMaterial from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSupplementalPatientMaterial( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL, value);
	}
	
    /**
     * Sets a value of property SupplementalPatientMaterial from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSupplementalPatientMaterial( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL, value);
	}
    /**
     * Sets a value of property SupplementalPatientMaterial from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSupplementalPatientMaterial(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL, value);
	}
	
    /**
     * Sets a value of property SupplementalPatientMaterial from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSupplementalPatientMaterial(Thing value) {
		Base.set(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL, value);
	}
  


    /**
     * Removes a value of property SupplementalPatientMaterial as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSupplementalPatientMaterial( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL, value);
	}
	
    /**
     * Removes a value of property SupplementalPatientMaterial as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSupplementalPatientMaterial( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL, value);
	}
    /**
     * Removes a value of property SupplementalPatientMaterial given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSupplementalPatientMaterial(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL, value);
	}
	
    /**
     * Removes a value of property SupplementalPatientMaterial given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSupplementalPatientMaterial(Thing value) {
		Base.remove(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL, value);
	}
  
    /**
     * Removes all values of property SupplementalPatientMaterial     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSupplementalPatientMaterial( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUPPLEMENTALPATIENTMATERIAL);
	}
	
    /**
     * Removes all values of property SupplementalPatientMaterial	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSupplementalPatientMaterial() {
		Base.removeAll(this.model, this.getResource(), SUPPLEMENTALPATIENTMATERIAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a455a12 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSupply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUPPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a455a12 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSupply() {
		return Base.has(this.model, this.getResource(), SUPPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a455a12 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSupply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUPPLY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a455a12 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSupply( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUPPLY, value);
	}

     /**
     * Get all values of property Supply as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSupply_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUPPLY);
	}
	
    /**
     * Get all values of property Supply as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSupply_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUPPLY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Supply as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSupply_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUPPLY);
	}

    /**
     * Get all values of property Supply as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSupply_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUPPLY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Supply     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSupply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUPPLY, Thing.class);
	}
	
    /**
     * Get all values of property Supply as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSupply_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUPPLY, Thing.class);
	}

    /**
     * Get all values of property Supply     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSupply() {
		return Base.getAll(this.model, this.getResource(), SUPPLY, Thing.class);
	}

    /**
     * Get all values of property Supply as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSupply_as() {
		return Base.getAll_as(this.model, this.getResource(), SUPPLY, Thing.class);
	}
 
    /**
     * Adds a value to property Supply as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSupply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUPPLY, value);
	}
	
    /**
     * Adds a value to property Supply as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSupply( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUPPLY, value);
	}
    /**
     * Adds a value to property Supply from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSupply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SUPPLY, value);
	}
	
    /**
     * Adds a value to property Supply from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSupply(Thing value) {
		Base.add(this.model, this.getResource(), SUPPLY, value);
	}
  

    /**
     * Sets a value of property Supply from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSupply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUPPLY, value);
	}
	
    /**
     * Sets a value of property Supply from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSupply( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUPPLY, value);
	}
    /**
     * Sets a value of property Supply from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSupply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SUPPLY, value);
	}
	
    /**
     * Sets a value of property Supply from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSupply(Thing value) {
		Base.set(this.model, this.getResource(), SUPPLY, value);
	}
  


    /**
     * Removes a value of property Supply as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSupply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUPPLY, value);
	}
	
    /**
     * Removes a value of property Supply as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSupply( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUPPLY, value);
	}
    /**
     * Removes a value of property Supply given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSupply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SUPPLY, value);
	}
	
    /**
     * Removes a value of property Supply given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSupply(Thing value) {
		Base.remove(this.model, this.getResource(), SUPPLY, value);
	}
  
    /**
     * Removes all values of property Supply     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSupply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUPPLY);
	}
	
    /**
     * Removes all values of property Supply	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSupply() {
		Base.removeAll(this.model, this.getResource(), SUPPLY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f292471 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WARNING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f292471 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWarning() {
		return Base.has(this.model, this.getResource(), WARNING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f292471 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WARNING, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f292471 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWarning( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WARNING, value);
	}

     /**
     * Get all values of property Warning as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWarning_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WARNING);
	}
	
    /**
     * Get all values of property Warning as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWarning_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WARNING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Warning as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWarning_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WARNING);
	}

    /**
     * Get all values of property Warning as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWarning_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WARNING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Warning     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WARNING, Thing.class);
	}
	
    /**
     * Get all values of property Warning as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllWarning_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WARNING, Thing.class);
	}

    /**
     * Get all values of property Warning     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllWarning() {
		return Base.getAll(this.model, this.getResource(), WARNING, Thing.class);
	}

    /**
     * Get all values of property Warning as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllWarning_as() {
		return Base.getAll_as(this.model, this.getResource(), WARNING, Thing.class);
	}
 
    /**
     * Adds a value to property Warning as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWarning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WARNING, value);
	}
	
    /**
     * Adds a value to property Warning as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWarning( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WARNING, value);
	}
    /**
     * Adds a value to property Warning from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, WARNING, value);
	}
	
    /**
     * Adds a value to property Warning from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWarning(Thing value) {
		Base.add(this.model, this.getResource(), WARNING, value);
	}
  

    /**
     * Sets a value of property Warning from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWarning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WARNING, value);
	}
	
    /**
     * Sets a value of property Warning from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWarning( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WARNING, value);
	}
    /**
     * Sets a value of property Warning from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, WARNING, value);
	}
	
    /**
     * Sets a value of property Warning from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWarning(Thing value) {
		Base.set(this.model, this.getResource(), WARNING, value);
	}
  


    /**
     * Removes a value of property Warning as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWarning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WARNING, value);
	}
	
    /**
     * Removes a value of property Warning as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWarning( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WARNING, value);
	}
    /**
     * Removes a value of property Warning given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWarning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, WARNING, value);
	}
	
    /**
     * Removes a value of property Warning given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWarning(Thing value) {
		Base.remove(this.model, this.getResource(), WARNING, value);
	}
  
    /**
     * Removes all values of property Warning     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWarning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WARNING);
	}
	
    /**
     * Removes all values of property Warning	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWarning() {
		Base.removeAll(this.model, this.getResource(), WARNING);
	}
 }