/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 11/16/10 1:58 PM
 */
package ca.drugbank.generated;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Absorption </li>
 *   <li> AffectedOrganism </li>
 *   <li> AhfsCode </li>
 *   <li> AtcCode </li>
 *   <li> Bio2rdfSymbol </li>
 *   <li> Biotransformation </li>
 *   <li> BrandMixture </li>
 *   <li> BrandName </li>
 *   <li> BrandedDrug </li>
 *   <li> CasRegistryNumber </li>
 *   <li> CellularLocation </li>
 *   <li> ChebiId </li>
 *   <li> ChemicalFormula </li>
 *   <li> ChemicalIupacName </li>
 *   <li> ChemicalStructure </li>
 *   <li> ChromosomeLocation </li>
 *   <li> ContraindicationInsert </li>
 *   <li> CreationDate </li>
 *   <li> Description </li>
 *   <li> DosageForm </li>
 *   <li> DpdDrugIdNumber </li>
 *   <li> DrugCategory </li>
 *   <li> DrugInteractions </li>
 *   <li> DrugReference </li>
 *   <li> DrugType </li>
 *   <li> Enzyme </li>
 *   <li> EquivalentClass </li>
 *   <li> EquivalentProperty </li>
 *   <li> Essentiality </li>
 *   <li> ExperimentalCaco2Permeability </li>
 *   <li> ExperimentalLogpHydrophobicity </li>
 *   <li> ExperimentalLogs </li>
 *   <li> ExperimentalWaterSolubility </li>
 *   <li> FdaLabelFiles </li>
 *   <li> FoodInteraction </li>
 *   <li> GenatlasId </li>
 *   <li> GenbankId </li>
 *   <li> GenbankIdGene </li>
 *   <li> GenbankIdGenePage </li>
 *   <li> GenbankIdProtein </li>
 *   <li> GenbankIdProteinPage </li>
 *   <li> GeneName </li>
 *   <li> GeneSequence </li>
 *   <li> GenecardId </li>
 *   <li> GeneralFunction </li>
 *   <li> GeneralReference </li>
 *   <li> GenericName </li>
 *   <li> GoClassificationComponent </li>
 *   <li> GoClassificationFunction </li>
 *   <li> GoClassificationProcess </li>
 *   <li> HalfLife </li>
 *   <li> HetId </li>
 *   <li> HgncId </li>
 *   <li> HgncIdPage </li>
 *   <li> HprdId </li>
 *   <li> InchiIdentifier </li>
 *   <li> InchiKey </li>
 *   <li> Indication </li>
 *   <li> InteractionDrug1 </li>
 *   <li> InteractionDrug2 </li>
 *   <li> InteractionInsert </li>
 *   <li> KeggCompoundId </li>
 *   <li> KeggDrugId </li>
 *   <li> LimsDrugId </li>
 *   <li> Locus </li>
 *   <li> MassSpecFile </li>
 *   <li> MechanismOfAction </li>
 *   <li> MeltingPoint </li>
 *   <li> MolecularWeight </li>
 *   <li> MolecularWeightAverage </li>
 *   <li> MolecularWeightMono </li>
 *   <li> MsdsFiles </li>
 *   <li> Name </li>
 *   <li> NumberOfResidues </li>
 *   <li> Page </li>
 *   <li> Pathway </li>
 *   <li> PatientInformationInsert </li>
 *   <li> PdbExperimentalId </li>
 *   <li> PdbHomologyId </li>
 *   <li> PdbId </li>
 *   <li> PdbIdPage </li>
 *   <li> PdrhealthLink </li>
 *   <li> PfamDomainFunction </li>
 *   <li> PfamDomainFunctionPage </li>
 *   <li> Pharmacology </li>
 *   <li> PharmgkbId </li>
 *   <li> PkaIsoelectricPoint </li>
 *   <li> PossibleDiseaseTarget </li>
 *   <li> PredictedLogpHydrophobicity </li>
 *   <li> PredictedLogs </li>
 *   <li> PredictedWaterSolubility </li>
 *   <li> PrimaryAccessionNo </li>
 *   <li> ProteinBinding </li>
 *   <li> ProteinSequence </li>
 *   <li> PubchemCompoundId </li>
 *   <li> PubchemSubstanceId </li>
 *   <li> Reaction </li>
 *   <li> Reference </li>
 *   <li> RxlistLink </li>
 *   <li> SameAs </li>
 *   <li> SecondaryAccessionNumber </li>
 *   <li> Signal </li>
 *   <li> SmilesStringCanonical </li>
 *   <li> SmilesStringIsomeric </li>
 *   <li> SpecificFunction </li>
 *   <li> State </li>
 *   <li> Structure </li>
 *   <li> SwissprotId </li>
 *   <li> SwissprotName </li>
 *   <li> SwissprotPage </li>
 *   <li> Synonym </li>
 *   <li> SynthesisReference </li>
 *   <li> Target </li>
 *   <li> Text </li>
 *   <li> TheoreticalPi </li>
 *   <li> Toxicity </li>
 *   <li> TransmembraneRegions </li>
 *   <li> UpdateDate </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 11/16/10 1:58 PM
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/absorption */
	public static final URI ABSORPTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/absorption",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/affectedOrganism */
	public static final URI AFFECTEDORGANISM = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/affectedOrganism",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/ahfsCode */
	public static final URI AHFSCODE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/ahfsCode",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/atcCode */
	public static final URI ATCCODE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/atcCode",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/bio2rdfSymbol */
	public static final URI BIO2RDFSYMBOL = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/bio2rdfSymbol",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/biotransformation */
	public static final URI BIOTRANSFORMATION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/biotransformation",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/brandMixture */
	public static final URI BRANDMIXTURE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/brandMixture",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/brandName */
	public static final URI BRANDNAME = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/brandName",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/brandedDrug */
	public static final URI BRANDEDDRUG = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/brandedDrug",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/casRegistryNumber */
	public static final URI CASREGISTRYNUMBER = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/casRegistryNumber",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/cellularLocation */
	public static final URI CELLULARLOCATION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/cellularLocation",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chebiId */
	public static final URI CHEBIID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chebiId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chemicalFormula */
	public static final URI CHEMICALFORMULA = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chemicalFormula",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chemicalIupacName */
	public static final URI CHEMICALIUPACNAME = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chemicalIupacName",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chemicalStructure */
	public static final URI CHEMICALSTRUCTURE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chemicalStructure",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chromosomeLocation */
	public static final URI CHROMOSOMELOCATION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chromosomeLocation",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/contraindicationInsert */
	public static final URI CONTRAINDICATIONINSERT = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/contraindicationInsert",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/creationDate */
	public static final URI CREATIONDATE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/creationDate",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/description */
	public static final URI DESCRIPTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/description",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/dosageForm */
	public static final URI DOSAGEFORM = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/dosageForm",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/dpdDrugIdNumber */
	public static final URI DPDDRUGIDNUMBER = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/dpdDrugIdNumber",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugCategory */
	public static final URI DRUGCATEGORY = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugCategory",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugInteractions */
	public static final URI DRUGINTERACTIONS = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugInteractions",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugReference */
	public static final URI DRUGREFERENCE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugReference",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugType */
	public static final URI DRUGTYPE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugType",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/enzyme */
	public static final URI ENZYME = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/enzyme",false);

    /** http://www.w3.org/2002/07/owl#equivalentClass */
	public static final URI EQUIVALENTCLASS = new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false);

    /** http://www.w3.org/2002/07/owl#equivalentProperty */
	public static final URI EQUIVALENTPROPERTY = new URIImpl("http://www.w3.org/2002/07/owl#equivalentProperty",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/essentiality */
	public static final URI ESSENTIALITY = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/essentiality",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalCaco2Permeability */
	public static final URI EXPERIMENTALCACO2PERMEABILITY = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalCaco2Permeability",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalLogpHydrophobicity */
	public static final URI EXPERIMENTALLOGPHYDROPHOBICITY = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalLogpHydrophobicity",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalLogs */
	public static final URI EXPERIMENTALLOGS = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalLogs",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalWaterSolubility */
	public static final URI EXPERIMENTALWATERSOLUBILITY = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalWaterSolubility",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/fdaLabelFiles */
	public static final URI FDALABELFILES = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/fdaLabelFiles",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/foodInteraction */
	public static final URI FOODINTERACTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/foodInteraction",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genatlasId */
	public static final URI GENATLASID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genatlasId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankId */
	public static final URI GENBANKID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdGene */
	public static final URI GENBANKIDGENE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdGene",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdGenePage */
	public static final URI GENBANKIDGENEPAGE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdGenePage",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdProtein */
	public static final URI GENBANKIDPROTEIN = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdProtein",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdProteinPage */
	public static final URI GENBANKIDPROTEINPAGE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdProteinPage",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/geneName */
	public static final URI GENENAME = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/geneName",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/geneSequence */
	public static final URI GENESEQUENCE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/geneSequence",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genecardId */
	public static final URI GENECARDID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genecardId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/generalFunction */
	public static final URI GENERALFUNCTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/generalFunction",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/generalReference */
	public static final URI GENERALREFERENCE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/generalReference",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genericName */
	public static final URI GENERICNAME = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genericName",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/goClassificationComponent */
	public static final URI GOCLASSIFICATIONCOMPONENT = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/goClassificationComponent",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/goClassificationFunction */
	public static final URI GOCLASSIFICATIONFUNCTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/goClassificationFunction",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/goClassificationProcess */
	public static final URI GOCLASSIFICATIONPROCESS = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/goClassificationProcess",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/halfLife */
	public static final URI HALFLIFE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/halfLife",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hetId */
	public static final URI HETID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hetId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hgncId */
	public static final URI HGNCID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hgncId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hgncIdPage */
	public static final URI HGNCIDPAGE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hgncIdPage",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hprdId */
	public static final URI HPRDID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hprdId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/inchiIdentifier */
	public static final URI INCHIIDENTIFIER = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/inchiIdentifier",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/inchiKey */
	public static final URI INCHIKEY = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/inchiKey",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/indication */
	public static final URI INDICATION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/indication",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/interactionDrug1 */
	public static final URI INTERACTIONDRUG1 = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/interactionDrug1",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/interactionDrug2 */
	public static final URI INTERACTIONDRUG2 = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/interactionDrug2",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/interactionInsert */
	public static final URI INTERACTIONINSERT = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/interactionInsert",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/keggCompoundId */
	public static final URI KEGGCOMPOUNDID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/keggCompoundId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/keggDrugId */
	public static final URI KEGGDRUGID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/keggDrugId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/limsDrugId */
	public static final URI LIMSDRUGID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/limsDrugId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/locus */
	public static final URI LOCUS = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/locus",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/massSpecFile */
	public static final URI MASSSPECFILE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/massSpecFile",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/mechanismOfAction */
	public static final URI MECHANISMOFACTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/mechanismOfAction",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/meltingPoint */
	public static final URI MELTINGPOINT = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/meltingPoint",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/molecularWeight */
	public static final URI MOLECULARWEIGHT = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/molecularWeight",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/molecularWeightAverage */
	public static final URI MOLECULARWEIGHTAVERAGE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/molecularWeightAverage",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/molecularWeightMono */
	public static final URI MOLECULARWEIGHTMONO = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/molecularWeightMono",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/msdsFiles */
	public static final URI MSDSFILES = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/msdsFiles",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/name */
	public static final URI NAME = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/name",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/numberOfResidues */
	public static final URI NUMBEROFRESIDUES = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/numberOfResidues",false);

    /** http://xmlns.com/foaf/0.1/page */
	public static final URI PAGE = new URIImpl("http://xmlns.com/foaf/0.1/page",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pathway */
	public static final URI PATHWAY = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pathway",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/patientInformationInsert */
	public static final URI PATIENTINFORMATIONINSERT = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/patientInformationInsert",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbExperimentalId */
	public static final URI PDBEXPERIMENTALID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbExperimentalId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbHomologyId */
	public static final URI PDBHOMOLOGYID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbHomologyId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbId */
	public static final URI PDBID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbIdPage */
	public static final URI PDBIDPAGE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbIdPage",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdrhealthLink */
	public static final URI PDRHEALTHLINK = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdrhealthLink",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pfamDomainFunction */
	public static final URI PFAMDOMAINFUNCTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pfamDomainFunction",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pfamDomainFunctionPage */
	public static final URI PFAMDOMAINFUNCTIONPAGE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pfamDomainFunctionPage",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pharmacology */
	public static final URI PHARMACOLOGY = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pharmacology",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pharmgkbId */
	public static final URI PHARMGKBID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pharmgkbId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pkaIsoelectricPoint */
	public static final URI PKAISOELECTRICPOINT = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pkaIsoelectricPoint",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/possibleDiseaseTarget */
	public static final URI POSSIBLEDISEASETARGET = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/possibleDiseaseTarget",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/predictedLogpHydrophobicity */
	public static final URI PREDICTEDLOGPHYDROPHOBICITY = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/predictedLogpHydrophobicity",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/predictedLogs */
	public static final URI PREDICTEDLOGS = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/predictedLogs",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/predictedWaterSolubility */
	public static final URI PREDICTEDWATERSOLUBILITY = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/predictedWaterSolubility",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/primaryAccessionNo */
	public static final URI PRIMARYACCESSIONNO = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/primaryAccessionNo",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/proteinBinding */
	public static final URI PROTEINBINDING = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/proteinBinding",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/proteinSequence */
	public static final URI PROTEINSEQUENCE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/proteinSequence",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pubchemCompoundId */
	public static final URI PUBCHEMCOMPOUNDID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pubchemCompoundId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pubchemSubstanceId */
	public static final URI PUBCHEMSUBSTANCEID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pubchemSubstanceId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/reaction */
	public static final URI REACTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/reaction",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/reference */
	public static final URI REFERENCE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/reference",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/rxlistLink */
	public static final URI RXLISTLINK = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/rxlistLink",false);

    /** http://www.w3.org/2002/07/owl#sameAs */
	public static final URI SAMEAS = new URIImpl("http://www.w3.org/2002/07/owl#sameAs",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/secondaryAccessionNumber */
	public static final URI SECONDARYACCESSIONNUMBER = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/secondaryAccessionNumber",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/signal */
	public static final URI SIGNAL = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/signal",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/smilesStringCanonical */
	public static final URI SMILESSTRINGCANONICAL = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/smilesStringCanonical",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/smilesStringIsomeric */
	public static final URI SMILESSTRINGISOMERIC = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/smilesStringIsomeric",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/specificFunction */
	public static final URI SPECIFICFUNCTION = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/specificFunction",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/state */
	public static final URI STATE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/state",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/structure */
	public static final URI STRUCTURE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/structure",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/swissprotId */
	public static final URI SWISSPROTID = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/swissprotId",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/swissprotName */
	public static final URI SWISSPROTNAME = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/swissprotName",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/swissprotPage */
	public static final URI SWISSPROTPAGE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/swissprotPage",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/synonym */
	public static final URI SYNONYM = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/synonym",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/synthesisReference */
	public static final URI SYNTHESISREFERENCE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/synthesisReference",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/target */
	public static final URI TARGET = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/target",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/text */
	public static final URI TEXT = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/text",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/theoreticalPi */
	public static final URI THEORETICALPI = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/theoreticalPi",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/toxicity */
	public static final URI TOXICITY = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/toxicity",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/transmembraneRegions */
	public static final URI TRANSMEMBRANEREGIONS = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/transmembraneRegions",false);

    /** http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/updateDate */
	public static final URI UPDATEDATE = new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/updateDate",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/absorption",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/affectedOrganism",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/ahfsCode",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/atcCode",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/bio2rdfSymbol",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/biotransformation",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/brandMixture",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/brandName",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/brandedDrug",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/casRegistryNumber",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/cellularLocation",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chebiId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chemicalFormula",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chemicalIupacName",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chemicalStructure",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/chromosomeLocation",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/contraindicationInsert",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/creationDate",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/description",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/dosageForm",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/dpdDrugIdNumber",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugCategory",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugInteractions",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugReference",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/drugType",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/enzyme",false),
      new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false),
      new URIImpl("http://www.w3.org/2002/07/owl#equivalentProperty",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/essentiality",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalCaco2Permeability",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalLogpHydrophobicity",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalLogs",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/experimentalWaterSolubility",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/fdaLabelFiles",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/foodInteraction",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genatlasId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdGene",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdGenePage",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdProtein",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genbankIdProteinPage",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/geneName",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/geneSequence",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genecardId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/generalFunction",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/generalReference",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/genericName",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/goClassificationComponent",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/goClassificationFunction",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/goClassificationProcess",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/halfLife",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hetId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hgncId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hgncIdPage",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/hprdId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/inchiIdentifier",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/inchiKey",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/indication",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/interactionDrug1",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/interactionDrug2",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/interactionInsert",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/keggCompoundId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/keggDrugId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/limsDrugId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/locus",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/massSpecFile",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/mechanismOfAction",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/meltingPoint",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/molecularWeight",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/molecularWeightAverage",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/molecularWeightMono",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/msdsFiles",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/name",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/numberOfResidues",false),
      new URIImpl("http://xmlns.com/foaf/0.1/page",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pathway",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/patientInformationInsert",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbExperimentalId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbHomologyId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdbIdPage",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pdrhealthLink",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pfamDomainFunction",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pfamDomainFunctionPage",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pharmacology",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pharmgkbId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pkaIsoelectricPoint",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/possibleDiseaseTarget",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/predictedLogpHydrophobicity",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/predictedLogs",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/predictedWaterSolubility",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/primaryAccessionNo",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/proteinBinding",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/proteinSequence",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pubchemCompoundId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/pubchemSubstanceId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/reaction",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/reference",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/rxlistLink",false),
      new URIImpl("http://www.w3.org/2002/07/owl#sameAs",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/secondaryAccessionNumber",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/signal",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/smilesStringCanonical",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/smilesStringIsomeric",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/specificFunction",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/state",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/structure",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/swissprotId",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/swissprotName",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/swissprotPage",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/synonym",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/synthesisReference",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/target",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/text",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/theoreticalPi",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/toxicity",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/transmembraneRegions",false),
      new URIImpl("http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/updateDate",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Absorption' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAbsorption_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ABSORPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Absorption' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAbsorption_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ABSORPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Absorption' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAbsorption_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ABSORPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AffectedOrganism' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAffectedOrganism_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.AFFECTEDORGANISM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AffectedOrganism' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAffectedOrganism_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.AFFECTEDORGANISM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AffectedOrganism' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAffectedOrganism_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.AFFECTEDORGANISM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AhfsCode' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAhfsCode_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.AHFSCODE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AhfsCode' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAhfsCode_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.AHFSCODE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AhfsCode' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAhfsCode_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.AHFSCODE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AtcCode' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAtcCode_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ATCCODE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AtcCode' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAtcCode_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ATCCODE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AtcCode' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAtcCode_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ATCCODE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Bio2rdfSymbol' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBio2rdfSymbol_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.BIO2RDFSYMBOL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Bio2rdfSymbol' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBio2rdfSymbol_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.BIO2RDFSYMBOL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Bio2rdfSymbol' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllBio2rdfSymbol_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.BIO2RDFSYMBOL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Biotransformation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBiotransformation_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.BIOTRANSFORMATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Biotransformation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBiotransformation_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.BIOTRANSFORMATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Biotransformation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllBiotransformation_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.BIOTRANSFORMATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'BrandMixture' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBrandMixture_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.BRANDMIXTURE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'BrandMixture' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBrandMixture_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.BRANDMIXTURE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'BrandMixture' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllBrandMixture_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.BRANDMIXTURE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'BrandName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBrandName_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.BRANDNAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'BrandName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBrandName_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.BRANDNAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'BrandName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllBrandName_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.BRANDNAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'BrandedDrug' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBrandedDrug_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.BRANDEDDRUG, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'BrandedDrug' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBrandedDrug_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.BRANDEDDRUG, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'BrandedDrug' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllBrandedDrug_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.BRANDEDDRUG, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'CasRegistryNumber' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCasRegistryNumber_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CASREGISTRYNUMBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'CasRegistryNumber' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCasRegistryNumber_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CASREGISTRYNUMBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'CasRegistryNumber' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCasRegistryNumber_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CASREGISTRYNUMBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'CellularLocation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCellularLocation_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CELLULARLOCATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'CellularLocation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCellularLocation_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CELLULARLOCATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'CellularLocation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCellularLocation_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CELLULARLOCATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ChebiId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllChebiId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CHEBIID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ChebiId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllChebiId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CHEBIID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ChebiId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllChebiId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CHEBIID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ChemicalFormula' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllChemicalFormula_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CHEMICALFORMULA, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ChemicalFormula' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllChemicalFormula_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CHEMICALFORMULA, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ChemicalFormula' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllChemicalFormula_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CHEMICALFORMULA, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ChemicalIupacName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllChemicalIupacName_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CHEMICALIUPACNAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ChemicalIupacName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllChemicalIupacName_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CHEMICALIUPACNAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ChemicalIupacName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllChemicalIupacName_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CHEMICALIUPACNAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ChemicalStructure' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllChemicalStructure_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CHEMICALSTRUCTURE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ChemicalStructure' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllChemicalStructure_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CHEMICALSTRUCTURE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ChemicalStructure' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllChemicalStructure_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CHEMICALSTRUCTURE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ChromosomeLocation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllChromosomeLocation_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CHROMOSOMELOCATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ChromosomeLocation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllChromosomeLocation_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CHROMOSOMELOCATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ChromosomeLocation' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllChromosomeLocation_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CHROMOSOMELOCATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ContraindicationInsert' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContraindicationInsert_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CONTRAINDICATIONINSERT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ContraindicationInsert' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContraindicationInsert_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CONTRAINDICATIONINSERT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ContraindicationInsert' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllContraindicationInsert_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CONTRAINDICATIONINSERT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'CreationDate' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreationDate_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CREATIONDATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'CreationDate' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreationDate_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CREATIONDATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'CreationDate' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCreationDate_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CREATIONDATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDescription_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DosageForm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDosageForm_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DOSAGEFORM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DosageForm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDosageForm_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DOSAGEFORM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DosageForm' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDosageForm_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DOSAGEFORM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DpdDrugIdNumber' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDpdDrugIdNumber_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DPDDRUGIDNUMBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DpdDrugIdNumber' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDpdDrugIdNumber_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DPDDRUGIDNUMBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DpdDrugIdNumber' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDpdDrugIdNumber_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DPDDRUGIDNUMBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DrugCategory' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDrugCategory_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DRUGCATEGORY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DrugCategory' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDrugCategory_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DRUGCATEGORY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DrugCategory' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDrugCategory_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DRUGCATEGORY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DrugInteractions' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDrugInteractions_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DRUGINTERACTIONS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DrugInteractions' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDrugInteractions_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DRUGINTERACTIONS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DrugInteractions' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDrugInteractions_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DRUGINTERACTIONS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DrugReference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDrugReference_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DRUGREFERENCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DrugReference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDrugReference_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DRUGREFERENCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DrugReference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDrugReference_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DRUGREFERENCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DrugType' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDrugType_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DRUGTYPE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DrugType' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDrugType_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DRUGTYPE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DrugType' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDrugType_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DRUGTYPE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Enzyme' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEnzyme_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ENZYME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Enzyme' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEnzyme_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ENZYME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Enzyme' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEnzyme_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ENZYME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentClass_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EQUIVALENTCLASS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentClass_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EQUIVALENTCLASS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentClass_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EQUIVALENTCLASS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EquivalentProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentProperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EQUIVALENTPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EquivalentProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentProperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EQUIVALENTPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EquivalentProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEquivalentProperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EQUIVALENTPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Essentiality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEssentiality_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ESSENTIALITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Essentiality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEssentiality_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ESSENTIALITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Essentiality' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEssentiality_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ESSENTIALITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExperimentalCaco2Permeability' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalCaco2Permeability_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EXPERIMENTALCACO2PERMEABILITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExperimentalCaco2Permeability' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalCaco2Permeability_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EXPERIMENTALCACO2PERMEABILITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExperimentalCaco2Permeability' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalCaco2Permeability_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EXPERIMENTALCACO2PERMEABILITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExperimentalLogpHydrophobicity' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalLogpHydrophobicity_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EXPERIMENTALLOGPHYDROPHOBICITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExperimentalLogpHydrophobicity' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalLogpHydrophobicity_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EXPERIMENTALLOGPHYDROPHOBICITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExperimentalLogpHydrophobicity' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalLogpHydrophobicity_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EXPERIMENTALLOGPHYDROPHOBICITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExperimentalLogs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalLogs_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EXPERIMENTALLOGS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExperimentalLogs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalLogs_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EXPERIMENTALLOGS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExperimentalLogs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalLogs_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EXPERIMENTALLOGS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExperimentalWaterSolubility' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalWaterSolubility_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EXPERIMENTALWATERSOLUBILITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExperimentalWaterSolubility' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalWaterSolubility_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EXPERIMENTALWATERSOLUBILITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExperimentalWaterSolubility' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExperimentalWaterSolubility_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EXPERIMENTALWATERSOLUBILITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'FdaLabelFiles' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFdaLabelFiles_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.FDALABELFILES, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'FdaLabelFiles' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFdaLabelFiles_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.FDALABELFILES, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'FdaLabelFiles' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFdaLabelFiles_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.FDALABELFILES, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'FoodInteraction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFoodInteraction_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.FOODINTERACTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'FoodInteraction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFoodInteraction_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.FOODINTERACTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'FoodInteraction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFoodInteraction_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.FOODINTERACTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GenatlasId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenatlasId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENATLASID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GenatlasId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenatlasId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENATLASID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GenatlasId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGenatlasId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENATLASID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GenbankId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenbankId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENBANKID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GenbankId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenbankId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENBANKID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GenbankId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGenbankId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENBANKID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GenbankIdGene' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdGene_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENBANKIDGENE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GenbankIdGene' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdGene_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENBANKIDGENE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GenbankIdGene' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdGene_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENBANKIDGENE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GenbankIdGenePage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdGenePage_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENBANKIDGENEPAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GenbankIdGenePage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdGenePage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENBANKIDGENEPAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GenbankIdGenePage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdGenePage_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENBANKIDGENEPAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GenbankIdProtein' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdProtein_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENBANKIDPROTEIN, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GenbankIdProtein' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdProtein_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENBANKIDPROTEIN, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GenbankIdProtein' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdProtein_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENBANKIDPROTEIN, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GenbankIdProteinPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdProteinPage_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENBANKIDPROTEINPAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GenbankIdProteinPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdProteinPage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENBANKIDPROTEINPAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GenbankIdProteinPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGenbankIdProteinPage_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENBANKIDPROTEINPAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GeneName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneName_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENENAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GeneName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneName_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENENAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GeneName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGeneName_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENENAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GeneSequence' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneSequence_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENESEQUENCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GeneSequence' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneSequence_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENESEQUENCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GeneSequence' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGeneSequence_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENESEQUENCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GenecardId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenecardId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENECARDID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GenecardId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenecardId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENECARDID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GenecardId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGenecardId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENECARDID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GeneralFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneralFunction_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENERALFUNCTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GeneralFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneralFunction_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENERALFUNCTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GeneralFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGeneralFunction_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENERALFUNCTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GeneralReference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneralReference_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENERALREFERENCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GeneralReference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneralReference_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENERALREFERENCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GeneralReference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGeneralReference_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENERALREFERENCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GenericName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenericName_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GENERICNAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GenericName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGenericName_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GENERICNAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GenericName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGenericName_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GENERICNAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GoClassificationComponent' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGoClassificationComponent_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GOCLASSIFICATIONCOMPONENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GoClassificationComponent' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGoClassificationComponent_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GOCLASSIFICATIONCOMPONENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GoClassificationComponent' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGoClassificationComponent_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GOCLASSIFICATIONCOMPONENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GoClassificationFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGoClassificationFunction_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GOCLASSIFICATIONFUNCTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GoClassificationFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGoClassificationFunction_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GOCLASSIFICATIONFUNCTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GoClassificationFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGoClassificationFunction_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GOCLASSIFICATIONFUNCTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GoClassificationProcess' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGoClassificationProcess_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GOCLASSIFICATIONPROCESS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GoClassificationProcess' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGoClassificationProcess_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GOCLASSIFICATIONPROCESS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GoClassificationProcess' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGoClassificationProcess_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GOCLASSIFICATIONPROCESS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HalfLife' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHalfLife_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.HALFLIFE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HalfLife' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHalfLife_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.HALFLIFE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HalfLife' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHalfLife_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.HALFLIFE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HetId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHetId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.HETID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HetId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHetId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.HETID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HetId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHetId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.HETID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HgncId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHgncId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.HGNCID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HgncId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHgncId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.HGNCID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HgncId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHgncId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.HGNCID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HgncIdPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHgncIdPage_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.HGNCIDPAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HgncIdPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHgncIdPage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.HGNCIDPAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HgncIdPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHgncIdPage_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.HGNCIDPAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HprdId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHprdId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.HPRDID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HprdId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHprdId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.HPRDID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HprdId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHprdId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.HPRDID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InchiIdentifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInchiIdentifier_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INCHIIDENTIFIER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InchiIdentifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInchiIdentifier_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INCHIIDENTIFIER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InchiIdentifier' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInchiIdentifier_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INCHIIDENTIFIER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InchiKey' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInchiKey_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INCHIKEY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InchiKey' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInchiKey_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INCHIKEY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InchiKey' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInchiKey_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INCHIKEY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Indication' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIndication_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INDICATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Indication' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIndication_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INDICATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Indication' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIndication_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INDICATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InteractionDrug1' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInteractionDrug1_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INTERACTIONDRUG1, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InteractionDrug1' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInteractionDrug1_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INTERACTIONDRUG1, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InteractionDrug1' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInteractionDrug1_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INTERACTIONDRUG1, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InteractionDrug2' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInteractionDrug2_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INTERACTIONDRUG2, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InteractionDrug2' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInteractionDrug2_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INTERACTIONDRUG2, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InteractionDrug2' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInteractionDrug2_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INTERACTIONDRUG2, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InteractionInsert' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInteractionInsert_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INTERACTIONINSERT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InteractionInsert' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInteractionInsert_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INTERACTIONINSERT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InteractionInsert' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInteractionInsert_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INTERACTIONINSERT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'KeggCompoundId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllKeggCompoundId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.KEGGCOMPOUNDID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'KeggCompoundId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllKeggCompoundId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.KEGGCOMPOUNDID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'KeggCompoundId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllKeggCompoundId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.KEGGCOMPOUNDID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'KeggDrugId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllKeggDrugId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.KEGGDRUGID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'KeggDrugId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllKeggDrugId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.KEGGDRUGID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'KeggDrugId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllKeggDrugId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.KEGGDRUGID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'LimsDrugId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLimsDrugId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.LIMSDRUGID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'LimsDrugId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLimsDrugId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.LIMSDRUGID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'LimsDrugId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLimsDrugId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.LIMSDRUGID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Locus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLocus_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.LOCUS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Locus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLocus_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.LOCUS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Locus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLocus_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.LOCUS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MassSpecFile' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMassSpecFile_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MASSSPECFILE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MassSpecFile' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMassSpecFile_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MASSSPECFILE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MassSpecFile' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMassSpecFile_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MASSSPECFILE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MechanismOfAction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMechanismOfAction_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MECHANISMOFACTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MechanismOfAction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMechanismOfAction_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MECHANISMOFACTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MechanismOfAction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMechanismOfAction_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MECHANISMOFACTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MeltingPoint' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMeltingPoint_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MELTINGPOINT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MeltingPoint' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMeltingPoint_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MELTINGPOINT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MeltingPoint' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMeltingPoint_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MELTINGPOINT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MolecularWeight' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMolecularWeight_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MOLECULARWEIGHT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MolecularWeight' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMolecularWeight_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MOLECULARWEIGHT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MolecularWeight' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMolecularWeight_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MOLECULARWEIGHT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MolecularWeightAverage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMolecularWeightAverage_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MOLECULARWEIGHTAVERAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MolecularWeightAverage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMolecularWeightAverage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MOLECULARWEIGHTAVERAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MolecularWeightAverage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMolecularWeightAverage_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MOLECULARWEIGHTAVERAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MolecularWeightMono' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMolecularWeightMono_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MOLECULARWEIGHTMONO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MolecularWeightMono' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMolecularWeightMono_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MOLECULARWEIGHTMONO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MolecularWeightMono' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMolecularWeightMono_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MOLECULARWEIGHTMONO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MsdsFiles' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMsdsFiles_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MSDSFILES, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MsdsFiles' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMsdsFiles_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MSDSFILES, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MsdsFiles' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMsdsFiles_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MSDSFILES, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllName_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.NAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllName_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.NAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllName_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.NAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'NumberOfResidues' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNumberOfResidues_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.NUMBEROFRESIDUES, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'NumberOfResidues' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNumberOfResidues_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.NUMBEROFRESIDUES, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'NumberOfResidues' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNumberOfResidues_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.NUMBEROFRESIDUES, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Page' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPage_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Page' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Page' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPage_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Pathway' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPathway_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PATHWAY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Pathway' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPathway_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PATHWAY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Pathway' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPathway_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PATHWAY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PatientInformationInsert' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPatientInformationInsert_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PATIENTINFORMATIONINSERT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PatientInformationInsert' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPatientInformationInsert_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PATIENTINFORMATIONINSERT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PatientInformationInsert' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPatientInformationInsert_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PATIENTINFORMATIONINSERT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PdbExperimentalId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPdbExperimentalId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PDBEXPERIMENTALID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PdbExperimentalId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPdbExperimentalId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PDBEXPERIMENTALID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PdbExperimentalId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPdbExperimentalId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PDBEXPERIMENTALID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PdbHomologyId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPdbHomologyId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PDBHOMOLOGYID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PdbHomologyId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPdbHomologyId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PDBHOMOLOGYID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PdbHomologyId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPdbHomologyId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PDBHOMOLOGYID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PdbId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPdbId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PDBID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PdbId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPdbId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PDBID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PdbId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPdbId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PDBID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PdbIdPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPdbIdPage_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PDBIDPAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PdbIdPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPdbIdPage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PDBIDPAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PdbIdPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPdbIdPage_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PDBIDPAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PdrhealthLink' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPdrhealthLink_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PDRHEALTHLINK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PdrhealthLink' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPdrhealthLink_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PDRHEALTHLINK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PdrhealthLink' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPdrhealthLink_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PDRHEALTHLINK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PfamDomainFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPfamDomainFunction_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PFAMDOMAINFUNCTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PfamDomainFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPfamDomainFunction_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PFAMDOMAINFUNCTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PfamDomainFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPfamDomainFunction_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PFAMDOMAINFUNCTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PfamDomainFunctionPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPfamDomainFunctionPage_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PFAMDOMAINFUNCTIONPAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PfamDomainFunctionPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPfamDomainFunctionPage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PFAMDOMAINFUNCTIONPAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PfamDomainFunctionPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPfamDomainFunctionPage_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PFAMDOMAINFUNCTIONPAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Pharmacology' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPharmacology_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PHARMACOLOGY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Pharmacology' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPharmacology_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PHARMACOLOGY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Pharmacology' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPharmacology_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PHARMACOLOGY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PharmgkbId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPharmgkbId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PHARMGKBID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PharmgkbId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPharmgkbId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PHARMGKBID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PharmgkbId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPharmgkbId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PHARMGKBID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PkaIsoelectricPoint' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPkaIsoelectricPoint_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PKAISOELECTRICPOINT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PkaIsoelectricPoint' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPkaIsoelectricPoint_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PKAISOELECTRICPOINT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PkaIsoelectricPoint' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPkaIsoelectricPoint_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PKAISOELECTRICPOINT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PossibleDiseaseTarget' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPossibleDiseaseTarget_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.POSSIBLEDISEASETARGET, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PossibleDiseaseTarget' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPossibleDiseaseTarget_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.POSSIBLEDISEASETARGET, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PossibleDiseaseTarget' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPossibleDiseaseTarget_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.POSSIBLEDISEASETARGET, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PredictedLogpHydrophobicity' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPredictedLogpHydrophobicity_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PREDICTEDLOGPHYDROPHOBICITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PredictedLogpHydrophobicity' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPredictedLogpHydrophobicity_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PREDICTEDLOGPHYDROPHOBICITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PredictedLogpHydrophobicity' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPredictedLogpHydrophobicity_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PREDICTEDLOGPHYDROPHOBICITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PredictedLogs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPredictedLogs_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PREDICTEDLOGS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PredictedLogs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPredictedLogs_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PREDICTEDLOGS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PredictedLogs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPredictedLogs_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PREDICTEDLOGS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PredictedWaterSolubility' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPredictedWaterSolubility_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PREDICTEDWATERSOLUBILITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PredictedWaterSolubility' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPredictedWaterSolubility_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PREDICTEDWATERSOLUBILITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PredictedWaterSolubility' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPredictedWaterSolubility_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PREDICTEDWATERSOLUBILITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PrimaryAccessionNo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrimaryAccessionNo_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PRIMARYACCESSIONNO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PrimaryAccessionNo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrimaryAccessionNo_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PRIMARYACCESSIONNO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PrimaryAccessionNo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPrimaryAccessionNo_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PRIMARYACCESSIONNO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ProteinBinding' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllProteinBinding_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PROTEINBINDING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ProteinBinding' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllProteinBinding_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PROTEINBINDING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ProteinBinding' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllProteinBinding_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PROTEINBINDING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ProteinSequence' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllProteinSequence_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PROTEINSEQUENCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ProteinSequence' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllProteinSequence_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PROTEINSEQUENCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ProteinSequence' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllProteinSequence_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PROTEINSEQUENCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PubchemCompoundId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPubchemCompoundId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PUBCHEMCOMPOUNDID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PubchemCompoundId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPubchemCompoundId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PUBCHEMCOMPOUNDID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PubchemCompoundId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPubchemCompoundId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PUBCHEMCOMPOUNDID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PubchemSubstanceId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPubchemSubstanceId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PUBCHEMSUBSTANCEID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PubchemSubstanceId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPubchemSubstanceId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PUBCHEMSUBSTANCEID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PubchemSubstanceId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPubchemSubstanceId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PUBCHEMSUBSTANCEID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Reaction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReaction_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.REACTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Reaction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReaction_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.REACTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Reaction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllReaction_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.REACTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Reference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReference_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.REFERENCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Reference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReference_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.REFERENCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Reference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllReference_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.REFERENCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'RxlistLink' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRxlistLink_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.RXLISTLINK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'RxlistLink' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRxlistLink_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.RXLISTLINK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'RxlistLink' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRxlistLink_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.RXLISTLINK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SameAs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSameAs_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SAMEAS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SameAs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSameAs_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SAMEAS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SameAs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSameAs_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SAMEAS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SecondaryAccessionNumber' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSecondaryAccessionNumber_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SECONDARYACCESSIONNUMBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SecondaryAccessionNumber' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSecondaryAccessionNumber_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SECONDARYACCESSIONNUMBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SecondaryAccessionNumber' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSecondaryAccessionNumber_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SECONDARYACCESSIONNUMBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Signal' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSignal_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SIGNAL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Signal' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSignal_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SIGNAL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Signal' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSignal_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SIGNAL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SmilesStringCanonical' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSmilesStringCanonical_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SMILESSTRINGCANONICAL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SmilesStringCanonical' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSmilesStringCanonical_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SMILESSTRINGCANONICAL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SmilesStringCanonical' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSmilesStringCanonical_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SMILESSTRINGCANONICAL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SmilesStringIsomeric' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSmilesStringIsomeric_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SMILESSTRINGISOMERIC, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SmilesStringIsomeric' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSmilesStringIsomeric_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SMILESSTRINGISOMERIC, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SmilesStringIsomeric' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSmilesStringIsomeric_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SMILESSTRINGISOMERIC, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SpecificFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSpecificFunction_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SPECIFICFUNCTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SpecificFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSpecificFunction_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SPECIFICFUNCTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SpecificFunction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSpecificFunction_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SPECIFICFUNCTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'State' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllState_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.STATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'State' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllState_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.STATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'State' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllState_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.STATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Structure' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllStructure_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.STRUCTURE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Structure' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllStructure_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.STRUCTURE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Structure' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllStructure_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.STRUCTURE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SwissprotId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSwissprotId_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SWISSPROTID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SwissprotId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSwissprotId_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SWISSPROTID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SwissprotId' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSwissprotId_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SWISSPROTID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SwissprotName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSwissprotName_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SWISSPROTNAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SwissprotName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSwissprotName_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SWISSPROTNAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SwissprotName' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSwissprotName_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SWISSPROTNAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SwissprotPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSwissprotPage_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SWISSPROTPAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SwissprotPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSwissprotPage_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SWISSPROTPAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SwissprotPage' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSwissprotPage_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SWISSPROTPAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Synonym' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSynonym_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SYNONYM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Synonym' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSynonym_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SYNONYM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Synonym' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSynonym_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SYNONYM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SynthesisReference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSynthesisReference_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SYNTHESISREFERENCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SynthesisReference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSynthesisReference_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SYNTHESISREFERENCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SynthesisReference' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSynthesisReference_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SYNTHESISREFERENCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Target' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTarget_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TARGET, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Target' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTarget_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TARGET, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Target' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTarget_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TARGET, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Text' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllText_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TEXT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Text' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllText_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TEXT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Text' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllText_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TEXT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TheoreticalPi' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTheoreticalPi_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.THEORETICALPI, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TheoreticalPi' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTheoreticalPi_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.THEORETICALPI, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TheoreticalPi' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTheoreticalPi_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.THEORETICALPI, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Toxicity' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllToxicity_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TOXICITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Toxicity' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllToxicity_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TOXICITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Toxicity' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllToxicity_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TOXICITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TransmembraneRegions' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTransmembraneRegions_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TRANSMEMBRANEREGIONS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TransmembraneRegions' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTransmembraneRegions_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TRANSMEMBRANEREGIONS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TransmembraneRegions' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTransmembraneRegions_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TRANSMEMBRANEREGIONS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'UpdateDate' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUpdateDate_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.UPDATEDATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'UpdateDate' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllUpdateDate_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.UPDATEDATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'UpdateDate' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllUpdateDate_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.UPDATEDATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fdbdf4a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAbsorption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ABSORPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fdbdf4a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAbsorption() {
		return Base.has(this.model, this.getResource(), ABSORPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fdbdf4a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAbsorption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ABSORPTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fdbdf4a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAbsorption( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ABSORPTION, value);
	}

     /**
     * Get all values of property Absorption as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAbsorption_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ABSORPTION);
	}
	
    /**
     * Get all values of property Absorption as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAbsorption_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ABSORPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Absorption as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAbsorption_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ABSORPTION);
	}

    /**
     * Get all values of property Absorption as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAbsorption_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ABSORPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Absorption     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAbsorption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ABSORPTION, Thing.class);
	}
	
    /**
     * Get all values of property Absorption as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAbsorption_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ABSORPTION, Thing.class);
	}

    /**
     * Get all values of property Absorption     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAbsorption() {
		return Base.getAll(this.model, this.getResource(), ABSORPTION, Thing.class);
	}

    /**
     * Get all values of property Absorption as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAbsorption_as() {
		return Base.getAll_as(this.model, this.getResource(), ABSORPTION, Thing.class);
	}
 
    /**
     * Adds a value to property Absorption as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAbsorption( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ABSORPTION, value);
	}
	
    /**
     * Adds a value to property Absorption as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAbsorption( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ABSORPTION, value);
	}
    /**
     * Adds a value to property Absorption from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAbsorption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ABSORPTION, value);
	}
	
    /**
     * Adds a value to property Absorption from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAbsorption(Thing value) {
		Base.add(this.model, this.getResource(), ABSORPTION, value);
	}
  

    /**
     * Sets a value of property Absorption from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAbsorption( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ABSORPTION, value);
	}
	
    /**
     * Sets a value of property Absorption from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAbsorption( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ABSORPTION, value);
	}
    /**
     * Sets a value of property Absorption from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAbsorption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ABSORPTION, value);
	}
	
    /**
     * Sets a value of property Absorption from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAbsorption(Thing value) {
		Base.set(this.model, this.getResource(), ABSORPTION, value);
	}
  


    /**
     * Removes a value of property Absorption as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAbsorption( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ABSORPTION, value);
	}
	
    /**
     * Removes a value of property Absorption as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAbsorption( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ABSORPTION, value);
	}
    /**
     * Removes a value of property Absorption given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAbsorption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ABSORPTION, value);
	}
	
    /**
     * Removes a value of property Absorption given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAbsorption(Thing value) {
		Base.remove(this.model, this.getResource(), ABSORPTION, value);
	}
  
    /**
     * Removes all values of property Absorption     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAbsorption( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ABSORPTION);
	}
	
    /**
     * Removes all values of property Absorption	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAbsorption() {
		Base.removeAll(this.model, this.getResource(), ABSORPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@580b90b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAffectedOrganism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, AFFECTEDORGANISM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@580b90b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAffectedOrganism() {
		return Base.has(this.model, this.getResource(), AFFECTEDORGANISM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@580b90b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAffectedOrganism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, AFFECTEDORGANISM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@580b90b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAffectedOrganism( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), AFFECTEDORGANISM, value);
	}

     /**
     * Get all values of property AffectedOrganism as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAffectedOrganism_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, AFFECTEDORGANISM);
	}
	
    /**
     * Get all values of property AffectedOrganism as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAffectedOrganism_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AFFECTEDORGANISM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AffectedOrganism as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAffectedOrganism_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), AFFECTEDORGANISM);
	}

    /**
     * Get all values of property AffectedOrganism as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAffectedOrganism_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), AFFECTEDORGANISM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AffectedOrganism     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAffectedOrganism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, AFFECTEDORGANISM, Thing.class);
	}
	
    /**
     * Get all values of property AffectedOrganism as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAffectedOrganism_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AFFECTEDORGANISM, Thing.class);
	}

    /**
     * Get all values of property AffectedOrganism     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAffectedOrganism() {
		return Base.getAll(this.model, this.getResource(), AFFECTEDORGANISM, Thing.class);
	}

    /**
     * Get all values of property AffectedOrganism as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAffectedOrganism_as() {
		return Base.getAll_as(this.model, this.getResource(), AFFECTEDORGANISM, Thing.class);
	}
 
    /**
     * Adds a value to property AffectedOrganism as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAffectedOrganism( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, AFFECTEDORGANISM, value);
	}
	
    /**
     * Adds a value to property AffectedOrganism as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAffectedOrganism( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), AFFECTEDORGANISM, value);
	}
    /**
     * Adds a value to property AffectedOrganism from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAffectedOrganism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, AFFECTEDORGANISM, value);
	}
	
    /**
     * Adds a value to property AffectedOrganism from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAffectedOrganism(Thing value) {
		Base.add(this.model, this.getResource(), AFFECTEDORGANISM, value);
	}
  

    /**
     * Sets a value of property AffectedOrganism from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAffectedOrganism( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, AFFECTEDORGANISM, value);
	}
	
    /**
     * Sets a value of property AffectedOrganism from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAffectedOrganism( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), AFFECTEDORGANISM, value);
	}
    /**
     * Sets a value of property AffectedOrganism from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAffectedOrganism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, AFFECTEDORGANISM, value);
	}
	
    /**
     * Sets a value of property AffectedOrganism from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAffectedOrganism(Thing value) {
		Base.set(this.model, this.getResource(), AFFECTEDORGANISM, value);
	}
  


    /**
     * Removes a value of property AffectedOrganism as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAffectedOrganism( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, AFFECTEDORGANISM, value);
	}
	
    /**
     * Removes a value of property AffectedOrganism as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAffectedOrganism( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), AFFECTEDORGANISM, value);
	}
    /**
     * Removes a value of property AffectedOrganism given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAffectedOrganism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, AFFECTEDORGANISM, value);
	}
	
    /**
     * Removes a value of property AffectedOrganism given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAffectedOrganism(Thing value) {
		Base.remove(this.model, this.getResource(), AFFECTEDORGANISM, value);
	}
  
    /**
     * Removes all values of property AffectedOrganism     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAffectedOrganism( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, AFFECTEDORGANISM);
	}
	
    /**
     * Removes all values of property AffectedOrganism	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAffectedOrganism() {
		Base.removeAll(this.model, this.getResource(), AFFECTEDORGANISM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121dd5ae has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAhfsCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, AHFSCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121dd5ae has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAhfsCode() {
		return Base.has(this.model, this.getResource(), AHFSCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121dd5ae has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAhfsCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, AHFSCODE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121dd5ae has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAhfsCode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), AHFSCODE, value);
	}

     /**
     * Get all values of property AhfsCode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAhfsCode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, AHFSCODE);
	}
	
    /**
     * Get all values of property AhfsCode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAhfsCode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AHFSCODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AhfsCode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAhfsCode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), AHFSCODE);
	}

    /**
     * Get all values of property AhfsCode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAhfsCode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), AHFSCODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AhfsCode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAhfsCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, AHFSCODE, Thing.class);
	}
	
    /**
     * Get all values of property AhfsCode as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAhfsCode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AHFSCODE, Thing.class);
	}

    /**
     * Get all values of property AhfsCode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAhfsCode() {
		return Base.getAll(this.model, this.getResource(), AHFSCODE, Thing.class);
	}

    /**
     * Get all values of property AhfsCode as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAhfsCode_as() {
		return Base.getAll_as(this.model, this.getResource(), AHFSCODE, Thing.class);
	}
 
    /**
     * Adds a value to property AhfsCode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAhfsCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, AHFSCODE, value);
	}
	
    /**
     * Adds a value to property AhfsCode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAhfsCode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), AHFSCODE, value);
	}
    /**
     * Adds a value to property AhfsCode from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAhfsCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, AHFSCODE, value);
	}
	
    /**
     * Adds a value to property AhfsCode from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAhfsCode(Thing value) {
		Base.add(this.model, this.getResource(), AHFSCODE, value);
	}
  

    /**
     * Sets a value of property AhfsCode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAhfsCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, AHFSCODE, value);
	}
	
    /**
     * Sets a value of property AhfsCode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAhfsCode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), AHFSCODE, value);
	}
    /**
     * Sets a value of property AhfsCode from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAhfsCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, AHFSCODE, value);
	}
	
    /**
     * Sets a value of property AhfsCode from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAhfsCode(Thing value) {
		Base.set(this.model, this.getResource(), AHFSCODE, value);
	}
  


    /**
     * Removes a value of property AhfsCode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAhfsCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, AHFSCODE, value);
	}
	
    /**
     * Removes a value of property AhfsCode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAhfsCode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), AHFSCODE, value);
	}
    /**
     * Removes a value of property AhfsCode given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAhfsCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, AHFSCODE, value);
	}
	
    /**
     * Removes a value of property AhfsCode given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAhfsCode(Thing value) {
		Base.remove(this.model, this.getResource(), AHFSCODE, value);
	}
  
    /**
     * Removes all values of property AhfsCode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAhfsCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, AHFSCODE);
	}
	
    /**
     * Removes all values of property AhfsCode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAhfsCode() {
		Base.removeAll(this.model, this.getResource(), AHFSCODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a2b2584 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAtcCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ATCCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a2b2584 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAtcCode() {
		return Base.has(this.model, this.getResource(), ATCCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a2b2584 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAtcCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ATCCODE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a2b2584 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAtcCode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ATCCODE, value);
	}

     /**
     * Get all values of property AtcCode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAtcCode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ATCCODE);
	}
	
    /**
     * Get all values of property AtcCode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAtcCode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATCCODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AtcCode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAtcCode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ATCCODE);
	}

    /**
     * Get all values of property AtcCode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAtcCode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ATCCODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AtcCode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAtcCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ATCCODE, Thing.class);
	}
	
    /**
     * Get all values of property AtcCode as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAtcCode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATCCODE, Thing.class);
	}

    /**
     * Get all values of property AtcCode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAtcCode() {
		return Base.getAll(this.model, this.getResource(), ATCCODE, Thing.class);
	}

    /**
     * Get all values of property AtcCode as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAtcCode_as() {
		return Base.getAll_as(this.model, this.getResource(), ATCCODE, Thing.class);
	}
 
    /**
     * Adds a value to property AtcCode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAtcCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ATCCODE, value);
	}
	
    /**
     * Adds a value to property AtcCode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAtcCode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ATCCODE, value);
	}
    /**
     * Adds a value to property AtcCode from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAtcCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ATCCODE, value);
	}
	
    /**
     * Adds a value to property AtcCode from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAtcCode(Thing value) {
		Base.add(this.model, this.getResource(), ATCCODE, value);
	}
  

    /**
     * Sets a value of property AtcCode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAtcCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ATCCODE, value);
	}
	
    /**
     * Sets a value of property AtcCode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAtcCode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ATCCODE, value);
	}
    /**
     * Sets a value of property AtcCode from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAtcCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ATCCODE, value);
	}
	
    /**
     * Sets a value of property AtcCode from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAtcCode(Thing value) {
		Base.set(this.model, this.getResource(), ATCCODE, value);
	}
  


    /**
     * Removes a value of property AtcCode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAtcCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ATCCODE, value);
	}
	
    /**
     * Removes a value of property AtcCode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAtcCode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ATCCODE, value);
	}
    /**
     * Removes a value of property AtcCode given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAtcCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ATCCODE, value);
	}
	
    /**
     * Removes a value of property AtcCode given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAtcCode(Thing value) {
		Base.remove(this.model, this.getResource(), ATCCODE, value);
	}
  
    /**
     * Removes all values of property AtcCode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAtcCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ATCCODE);
	}
	
    /**
     * Removes all values of property AtcCode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAtcCode() {
		Base.removeAll(this.model, this.getResource(), ATCCODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c9a5f0c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBio2rdfSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BIO2RDFSYMBOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c9a5f0c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBio2rdfSymbol() {
		return Base.has(this.model, this.getResource(), BIO2RDFSYMBOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c9a5f0c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBio2rdfSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BIO2RDFSYMBOL, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c9a5f0c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBio2rdfSymbol( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BIO2RDFSYMBOL, value);
	}

     /**
     * Get all values of property Bio2rdfSymbol as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBio2rdfSymbol_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BIO2RDFSYMBOL);
	}
	
    /**
     * Get all values of property Bio2rdfSymbol as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBio2rdfSymbol_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BIO2RDFSYMBOL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Bio2rdfSymbol as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBio2rdfSymbol_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BIO2RDFSYMBOL);
	}

    /**
     * Get all values of property Bio2rdfSymbol as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBio2rdfSymbol_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BIO2RDFSYMBOL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Bio2rdfSymbol     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllBio2rdfSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BIO2RDFSYMBOL, Thing.class);
	}
	
    /**
     * Get all values of property Bio2rdfSymbol as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllBio2rdfSymbol_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BIO2RDFSYMBOL, Thing.class);
	}

    /**
     * Get all values of property Bio2rdfSymbol     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllBio2rdfSymbol() {
		return Base.getAll(this.model, this.getResource(), BIO2RDFSYMBOL, Thing.class);
	}

    /**
     * Get all values of property Bio2rdfSymbol as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllBio2rdfSymbol_as() {
		return Base.getAll_as(this.model, this.getResource(), BIO2RDFSYMBOL, Thing.class);
	}
 
    /**
     * Adds a value to property Bio2rdfSymbol as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBio2rdfSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BIO2RDFSYMBOL, value);
	}
	
    /**
     * Adds a value to property Bio2rdfSymbol as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBio2rdfSymbol( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BIO2RDFSYMBOL, value);
	}
    /**
     * Adds a value to property Bio2rdfSymbol from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBio2rdfSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, BIO2RDFSYMBOL, value);
	}
	
    /**
     * Adds a value to property Bio2rdfSymbol from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBio2rdfSymbol(Thing value) {
		Base.add(this.model, this.getResource(), BIO2RDFSYMBOL, value);
	}
  

    /**
     * Sets a value of property Bio2rdfSymbol from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBio2rdfSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BIO2RDFSYMBOL, value);
	}
	
    /**
     * Sets a value of property Bio2rdfSymbol from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBio2rdfSymbol( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BIO2RDFSYMBOL, value);
	}
    /**
     * Sets a value of property Bio2rdfSymbol from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBio2rdfSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, BIO2RDFSYMBOL, value);
	}
	
    /**
     * Sets a value of property Bio2rdfSymbol from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBio2rdfSymbol(Thing value) {
		Base.set(this.model, this.getResource(), BIO2RDFSYMBOL, value);
	}
  


    /**
     * Removes a value of property Bio2rdfSymbol as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBio2rdfSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BIO2RDFSYMBOL, value);
	}
	
    /**
     * Removes a value of property Bio2rdfSymbol as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBio2rdfSymbol( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BIO2RDFSYMBOL, value);
	}
    /**
     * Removes a value of property Bio2rdfSymbol given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBio2rdfSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, BIO2RDFSYMBOL, value);
	}
	
    /**
     * Removes a value of property Bio2rdfSymbol given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBio2rdfSymbol(Thing value) {
		Base.remove(this.model, this.getResource(), BIO2RDFSYMBOL, value);
	}
  
    /**
     * Removes all values of property Bio2rdfSymbol     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBio2rdfSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BIO2RDFSYMBOL);
	}
	
    /**
     * Removes all values of property Bio2rdfSymbol	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBio2rdfSymbol() {
		Base.removeAll(this.model, this.getResource(), BIO2RDFSYMBOL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@646b3d98 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBiotransformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BIOTRANSFORMATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@646b3d98 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBiotransformation() {
		return Base.has(this.model, this.getResource(), BIOTRANSFORMATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@646b3d98 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBiotransformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BIOTRANSFORMATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@646b3d98 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBiotransformation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BIOTRANSFORMATION, value);
	}

     /**
     * Get all values of property Biotransformation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBiotransformation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BIOTRANSFORMATION);
	}
	
    /**
     * Get all values of property Biotransformation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBiotransformation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BIOTRANSFORMATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Biotransformation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBiotransformation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BIOTRANSFORMATION);
	}

    /**
     * Get all values of property Biotransformation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBiotransformation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BIOTRANSFORMATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Biotransformation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllBiotransformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BIOTRANSFORMATION, Thing.class);
	}
	
    /**
     * Get all values of property Biotransformation as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllBiotransformation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BIOTRANSFORMATION, Thing.class);
	}

    /**
     * Get all values of property Biotransformation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllBiotransformation() {
		return Base.getAll(this.model, this.getResource(), BIOTRANSFORMATION, Thing.class);
	}

    /**
     * Get all values of property Biotransformation as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllBiotransformation_as() {
		return Base.getAll_as(this.model, this.getResource(), BIOTRANSFORMATION, Thing.class);
	}
 
    /**
     * Adds a value to property Biotransformation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBiotransformation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BIOTRANSFORMATION, value);
	}
	
    /**
     * Adds a value to property Biotransformation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBiotransformation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BIOTRANSFORMATION, value);
	}
    /**
     * Adds a value to property Biotransformation from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBiotransformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, BIOTRANSFORMATION, value);
	}
	
    /**
     * Adds a value to property Biotransformation from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBiotransformation(Thing value) {
		Base.add(this.model, this.getResource(), BIOTRANSFORMATION, value);
	}
  

    /**
     * Sets a value of property Biotransformation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBiotransformation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BIOTRANSFORMATION, value);
	}
	
    /**
     * Sets a value of property Biotransformation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBiotransformation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BIOTRANSFORMATION, value);
	}
    /**
     * Sets a value of property Biotransformation from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBiotransformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, BIOTRANSFORMATION, value);
	}
	
    /**
     * Sets a value of property Biotransformation from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBiotransformation(Thing value) {
		Base.set(this.model, this.getResource(), BIOTRANSFORMATION, value);
	}
  


    /**
     * Removes a value of property Biotransformation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBiotransformation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BIOTRANSFORMATION, value);
	}
	
    /**
     * Removes a value of property Biotransformation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBiotransformation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BIOTRANSFORMATION, value);
	}
    /**
     * Removes a value of property Biotransformation given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBiotransformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, BIOTRANSFORMATION, value);
	}
	
    /**
     * Removes a value of property Biotransformation given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBiotransformation(Thing value) {
		Base.remove(this.model, this.getResource(), BIOTRANSFORMATION, value);
	}
  
    /**
     * Removes all values of property Biotransformation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBiotransformation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BIOTRANSFORMATION);
	}
	
    /**
     * Removes all values of property Biotransformation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBiotransformation() {
		Base.removeAll(this.model, this.getResource(), BIOTRANSFORMATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bc3efb4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBrandMixture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BRANDMIXTURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bc3efb4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBrandMixture() {
		return Base.has(this.model, this.getResource(), BRANDMIXTURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bc3efb4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBrandMixture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BRANDMIXTURE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bc3efb4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBrandMixture( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BRANDMIXTURE, value);
	}

     /**
     * Get all values of property BrandMixture as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBrandMixture_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BRANDMIXTURE);
	}
	
    /**
     * Get all values of property BrandMixture as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBrandMixture_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BRANDMIXTURE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BrandMixture as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBrandMixture_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BRANDMIXTURE);
	}

    /**
     * Get all values of property BrandMixture as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBrandMixture_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BRANDMIXTURE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BrandMixture     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllBrandMixture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BRANDMIXTURE, Thing.class);
	}
	
    /**
     * Get all values of property BrandMixture as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllBrandMixture_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BRANDMIXTURE, Thing.class);
	}

    /**
     * Get all values of property BrandMixture     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllBrandMixture() {
		return Base.getAll(this.model, this.getResource(), BRANDMIXTURE, Thing.class);
	}

    /**
     * Get all values of property BrandMixture as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllBrandMixture_as() {
		return Base.getAll_as(this.model, this.getResource(), BRANDMIXTURE, Thing.class);
	}
 
    /**
     * Adds a value to property BrandMixture as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBrandMixture( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BRANDMIXTURE, value);
	}
	
    /**
     * Adds a value to property BrandMixture as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBrandMixture( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BRANDMIXTURE, value);
	}
    /**
     * Adds a value to property BrandMixture from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBrandMixture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, BRANDMIXTURE, value);
	}
	
    /**
     * Adds a value to property BrandMixture from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBrandMixture(Thing value) {
		Base.add(this.model, this.getResource(), BRANDMIXTURE, value);
	}
  

    /**
     * Sets a value of property BrandMixture from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBrandMixture( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BRANDMIXTURE, value);
	}
	
    /**
     * Sets a value of property BrandMixture from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBrandMixture( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BRANDMIXTURE, value);
	}
    /**
     * Sets a value of property BrandMixture from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBrandMixture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, BRANDMIXTURE, value);
	}
	
    /**
     * Sets a value of property BrandMixture from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBrandMixture(Thing value) {
		Base.set(this.model, this.getResource(), BRANDMIXTURE, value);
	}
  


    /**
     * Removes a value of property BrandMixture as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBrandMixture( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BRANDMIXTURE, value);
	}
	
    /**
     * Removes a value of property BrandMixture as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBrandMixture( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BRANDMIXTURE, value);
	}
    /**
     * Removes a value of property BrandMixture given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBrandMixture(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, BRANDMIXTURE, value);
	}
	
    /**
     * Removes a value of property BrandMixture given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBrandMixture(Thing value) {
		Base.remove(this.model, this.getResource(), BRANDMIXTURE, value);
	}
  
    /**
     * Removes all values of property BrandMixture     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBrandMixture( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BRANDMIXTURE);
	}
	
    /**
     * Removes all values of property BrandMixture	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBrandMixture() {
		Base.removeAll(this.model, this.getResource(), BRANDMIXTURE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@226a0160 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBrandName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BRANDNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@226a0160 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBrandName() {
		return Base.has(this.model, this.getResource(), BRANDNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@226a0160 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBrandName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BRANDNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@226a0160 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBrandName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BRANDNAME, value);
	}

     /**
     * Get all values of property BrandName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBrandName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BRANDNAME);
	}
	
    /**
     * Get all values of property BrandName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBrandName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BRANDNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BrandName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBrandName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BRANDNAME);
	}

    /**
     * Get all values of property BrandName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBrandName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BRANDNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BrandName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllBrandName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BRANDNAME, Thing.class);
	}
	
    /**
     * Get all values of property BrandName as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllBrandName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BRANDNAME, Thing.class);
	}

    /**
     * Get all values of property BrandName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllBrandName() {
		return Base.getAll(this.model, this.getResource(), BRANDNAME, Thing.class);
	}

    /**
     * Get all values of property BrandName as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllBrandName_as() {
		return Base.getAll_as(this.model, this.getResource(), BRANDNAME, Thing.class);
	}
 
    /**
     * Adds a value to property BrandName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBrandName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BRANDNAME, value);
	}
	
    /**
     * Adds a value to property BrandName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBrandName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BRANDNAME, value);
	}
    /**
     * Adds a value to property BrandName from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBrandName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, BRANDNAME, value);
	}
	
    /**
     * Adds a value to property BrandName from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBrandName(Thing value) {
		Base.add(this.model, this.getResource(), BRANDNAME, value);
	}
  

    /**
     * Sets a value of property BrandName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBrandName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BRANDNAME, value);
	}
	
    /**
     * Sets a value of property BrandName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBrandName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BRANDNAME, value);
	}
    /**
     * Sets a value of property BrandName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBrandName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, BRANDNAME, value);
	}
	
    /**
     * Sets a value of property BrandName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBrandName(Thing value) {
		Base.set(this.model, this.getResource(), BRANDNAME, value);
	}
  


    /**
     * Removes a value of property BrandName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBrandName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BRANDNAME, value);
	}
	
    /**
     * Removes a value of property BrandName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBrandName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BRANDNAME, value);
	}
    /**
     * Removes a value of property BrandName given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBrandName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, BRANDNAME, value);
	}
	
    /**
     * Removes a value of property BrandName given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBrandName(Thing value) {
		Base.remove(this.model, this.getResource(), BRANDNAME, value);
	}
  
    /**
     * Removes all values of property BrandName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBrandName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BRANDNAME);
	}
	
    /**
     * Removes all values of property BrandName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBrandName() {
		Base.removeAll(this.model, this.getResource(), BRANDNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c16bc21 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBrandedDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BRANDEDDRUG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c16bc21 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBrandedDrug() {
		return Base.has(this.model, this.getResource(), BRANDEDDRUG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c16bc21 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBrandedDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BRANDEDDRUG, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c16bc21 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBrandedDrug( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BRANDEDDRUG, value);
	}

     /**
     * Get all values of property BrandedDrug as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBrandedDrug_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BRANDEDDRUG);
	}
	
    /**
     * Get all values of property BrandedDrug as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBrandedDrug_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BRANDEDDRUG, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BrandedDrug as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBrandedDrug_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BRANDEDDRUG);
	}

    /**
     * Get all values of property BrandedDrug as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBrandedDrug_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BRANDEDDRUG, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BrandedDrug     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllBrandedDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BRANDEDDRUG, Thing.class);
	}
	
    /**
     * Get all values of property BrandedDrug as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllBrandedDrug_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BRANDEDDRUG, Thing.class);
	}

    /**
     * Get all values of property BrandedDrug     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllBrandedDrug() {
		return Base.getAll(this.model, this.getResource(), BRANDEDDRUG, Thing.class);
	}

    /**
     * Get all values of property BrandedDrug as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllBrandedDrug_as() {
		return Base.getAll_as(this.model, this.getResource(), BRANDEDDRUG, Thing.class);
	}
 
    /**
     * Adds a value to property BrandedDrug as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBrandedDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BRANDEDDRUG, value);
	}
	
    /**
     * Adds a value to property BrandedDrug as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBrandedDrug( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BRANDEDDRUG, value);
	}
    /**
     * Adds a value to property BrandedDrug from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBrandedDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, BRANDEDDRUG, value);
	}
	
    /**
     * Adds a value to property BrandedDrug from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBrandedDrug(Thing value) {
		Base.add(this.model, this.getResource(), BRANDEDDRUG, value);
	}
  

    /**
     * Sets a value of property BrandedDrug from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBrandedDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BRANDEDDRUG, value);
	}
	
    /**
     * Sets a value of property BrandedDrug from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBrandedDrug( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BRANDEDDRUG, value);
	}
    /**
     * Sets a value of property BrandedDrug from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBrandedDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, BRANDEDDRUG, value);
	}
	
    /**
     * Sets a value of property BrandedDrug from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBrandedDrug(Thing value) {
		Base.set(this.model, this.getResource(), BRANDEDDRUG, value);
	}
  


    /**
     * Removes a value of property BrandedDrug as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBrandedDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BRANDEDDRUG, value);
	}
	
    /**
     * Removes a value of property BrandedDrug as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBrandedDrug( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BRANDEDDRUG, value);
	}
    /**
     * Removes a value of property BrandedDrug given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBrandedDrug(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, BRANDEDDRUG, value);
	}
	
    /**
     * Removes a value of property BrandedDrug given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBrandedDrug(Thing value) {
		Base.remove(this.model, this.getResource(), BRANDEDDRUG, value);
	}
  
    /**
     * Removes all values of property BrandedDrug     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBrandedDrug( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BRANDEDDRUG);
	}
	
    /**
     * Removes all values of property BrandedDrug	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBrandedDrug() {
		Base.removeAll(this.model, this.getResource(), BRANDEDDRUG);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3de44d1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCasRegistryNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CASREGISTRYNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3de44d1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCasRegistryNumber() {
		return Base.has(this.model, this.getResource(), CASREGISTRYNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3de44d1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCasRegistryNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CASREGISTRYNUMBER, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3de44d1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCasRegistryNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CASREGISTRYNUMBER, value);
	}

     /**
     * Get all values of property CasRegistryNumber as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCasRegistryNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CASREGISTRYNUMBER);
	}
	
    /**
     * Get all values of property CasRegistryNumber as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCasRegistryNumber_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CASREGISTRYNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CasRegistryNumber as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCasRegistryNumber_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CASREGISTRYNUMBER);
	}

    /**
     * Get all values of property CasRegistryNumber as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCasRegistryNumber_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CASREGISTRYNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CasRegistryNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllCasRegistryNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CASREGISTRYNUMBER, Thing.class);
	}
	
    /**
     * Get all values of property CasRegistryNumber as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllCasRegistryNumber_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CASREGISTRYNUMBER, Thing.class);
	}

    /**
     * Get all values of property CasRegistryNumber     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllCasRegistryNumber() {
		return Base.getAll(this.model, this.getResource(), CASREGISTRYNUMBER, Thing.class);
	}

    /**
     * Get all values of property CasRegistryNumber as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllCasRegistryNumber_as() {
		return Base.getAll_as(this.model, this.getResource(), CASREGISTRYNUMBER, Thing.class);
	}
 
    /**
     * Adds a value to property CasRegistryNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCasRegistryNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CASREGISTRYNUMBER, value);
	}
	
    /**
     * Adds a value to property CasRegistryNumber as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCasRegistryNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CASREGISTRYNUMBER, value);
	}
    /**
     * Adds a value to property CasRegistryNumber from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCasRegistryNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CASREGISTRYNUMBER, value);
	}
	
    /**
     * Adds a value to property CasRegistryNumber from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCasRegistryNumber(Thing value) {
		Base.add(this.model, this.getResource(), CASREGISTRYNUMBER, value);
	}
  

    /**
     * Sets a value of property CasRegistryNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCasRegistryNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CASREGISTRYNUMBER, value);
	}
	
    /**
     * Sets a value of property CasRegistryNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCasRegistryNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CASREGISTRYNUMBER, value);
	}
    /**
     * Sets a value of property CasRegistryNumber from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCasRegistryNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CASREGISTRYNUMBER, value);
	}
	
    /**
     * Sets a value of property CasRegistryNumber from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCasRegistryNumber(Thing value) {
		Base.set(this.model, this.getResource(), CASREGISTRYNUMBER, value);
	}
  


    /**
     * Removes a value of property CasRegistryNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCasRegistryNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CASREGISTRYNUMBER, value);
	}
	
    /**
     * Removes a value of property CasRegistryNumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCasRegistryNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CASREGISTRYNUMBER, value);
	}
    /**
     * Removes a value of property CasRegistryNumber given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCasRegistryNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CASREGISTRYNUMBER, value);
	}
	
    /**
     * Removes a value of property CasRegistryNumber given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCasRegistryNumber(Thing value) {
		Base.remove(this.model, this.getResource(), CASREGISTRYNUMBER, value);
	}
  
    /**
     * Removes all values of property CasRegistryNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCasRegistryNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CASREGISTRYNUMBER);
	}
	
    /**
     * Removes all values of property CasRegistryNumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCasRegistryNumber() {
		Base.removeAll(this.model, this.getResource(), CASREGISTRYNUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275bdd5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCellularLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CELLULARLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275bdd5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCellularLocation() {
		return Base.has(this.model, this.getResource(), CELLULARLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275bdd5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCellularLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CELLULARLOCATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275bdd5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCellularLocation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CELLULARLOCATION, value);
	}

     /**
     * Get all values of property CellularLocation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCellularLocation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CELLULARLOCATION);
	}
	
    /**
     * Get all values of property CellularLocation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCellularLocation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CELLULARLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CellularLocation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCellularLocation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CELLULARLOCATION);
	}

    /**
     * Get all values of property CellularLocation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCellularLocation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CELLULARLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CellularLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllCellularLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CELLULARLOCATION, Thing.class);
	}
	
    /**
     * Get all values of property CellularLocation as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllCellularLocation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CELLULARLOCATION, Thing.class);
	}

    /**
     * Get all values of property CellularLocation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllCellularLocation() {
		return Base.getAll(this.model, this.getResource(), CELLULARLOCATION, Thing.class);
	}

    /**
     * Get all values of property CellularLocation as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllCellularLocation_as() {
		return Base.getAll_as(this.model, this.getResource(), CELLULARLOCATION, Thing.class);
	}
 
    /**
     * Adds a value to property CellularLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCellularLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CELLULARLOCATION, value);
	}
	
    /**
     * Adds a value to property CellularLocation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCellularLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CELLULARLOCATION, value);
	}
    /**
     * Adds a value to property CellularLocation from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCellularLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CELLULARLOCATION, value);
	}
	
    /**
     * Adds a value to property CellularLocation from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCellularLocation(Thing value) {
		Base.add(this.model, this.getResource(), CELLULARLOCATION, value);
	}
  

    /**
     * Sets a value of property CellularLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCellularLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CELLULARLOCATION, value);
	}
	
    /**
     * Sets a value of property CellularLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCellularLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CELLULARLOCATION, value);
	}
    /**
     * Sets a value of property CellularLocation from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCellularLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CELLULARLOCATION, value);
	}
	
    /**
     * Sets a value of property CellularLocation from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCellularLocation(Thing value) {
		Base.set(this.model, this.getResource(), CELLULARLOCATION, value);
	}
  


    /**
     * Removes a value of property CellularLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCellularLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CELLULARLOCATION, value);
	}
	
    /**
     * Removes a value of property CellularLocation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCellularLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CELLULARLOCATION, value);
	}
    /**
     * Removes a value of property CellularLocation given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCellularLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CELLULARLOCATION, value);
	}
	
    /**
     * Removes a value of property CellularLocation given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCellularLocation(Thing value) {
		Base.remove(this.model, this.getResource(), CELLULARLOCATION, value);
	}
  
    /**
     * Removes all values of property CellularLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCellularLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CELLULARLOCATION);
	}
	
    /**
     * Removes all values of property CellularLocation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCellularLocation() {
		Base.removeAll(this.model, this.getResource(), CELLULARLOCATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79789cbd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasChebiId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CHEBIID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79789cbd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasChebiId() {
		return Base.has(this.model, this.getResource(), CHEBIID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79789cbd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasChebiId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CHEBIID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79789cbd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasChebiId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CHEBIID, value);
	}

     /**
     * Get all values of property ChebiId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChebiId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CHEBIID);
	}
	
    /**
     * Get all values of property ChebiId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChebiId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHEBIID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ChebiId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChebiId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CHEBIID);
	}

    /**
     * Get all values of property ChebiId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChebiId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CHEBIID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ChebiId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllChebiId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CHEBIID, Thing.class);
	}
	
    /**
     * Get all values of property ChebiId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllChebiId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHEBIID, Thing.class);
	}

    /**
     * Get all values of property ChebiId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllChebiId() {
		return Base.getAll(this.model, this.getResource(), CHEBIID, Thing.class);
	}

    /**
     * Get all values of property ChebiId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllChebiId_as() {
		return Base.getAll_as(this.model, this.getResource(), CHEBIID, Thing.class);
	}
 
    /**
     * Adds a value to property ChebiId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addChebiId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CHEBIID, value);
	}
	
    /**
     * Adds a value to property ChebiId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addChebiId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CHEBIID, value);
	}
    /**
     * Adds a value to property ChebiId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addChebiId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CHEBIID, value);
	}
	
    /**
     * Adds a value to property ChebiId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addChebiId(Thing value) {
		Base.add(this.model, this.getResource(), CHEBIID, value);
	}
  

    /**
     * Sets a value of property ChebiId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setChebiId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CHEBIID, value);
	}
	
    /**
     * Sets a value of property ChebiId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setChebiId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CHEBIID, value);
	}
    /**
     * Sets a value of property ChebiId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setChebiId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CHEBIID, value);
	}
	
    /**
     * Sets a value of property ChebiId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setChebiId(Thing value) {
		Base.set(this.model, this.getResource(), CHEBIID, value);
	}
  


    /**
     * Removes a value of property ChebiId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeChebiId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CHEBIID, value);
	}
	
    /**
     * Removes a value of property ChebiId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeChebiId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CHEBIID, value);
	}
    /**
     * Removes a value of property ChebiId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeChebiId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CHEBIID, value);
	}
	
    /**
     * Removes a value of property ChebiId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeChebiId(Thing value) {
		Base.remove(this.model, this.getResource(), CHEBIID, value);
	}
  
    /**
     * Removes all values of property ChebiId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllChebiId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHEBIID);
	}
	
    /**
     * Removes all values of property ChebiId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllChebiId() {
		Base.removeAll(this.model, this.getResource(), CHEBIID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ae2840e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasChemicalFormula(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CHEMICALFORMULA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ae2840e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasChemicalFormula() {
		return Base.has(this.model, this.getResource(), CHEMICALFORMULA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ae2840e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasChemicalFormula(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CHEMICALFORMULA, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ae2840e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasChemicalFormula( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CHEMICALFORMULA, value);
	}

     /**
     * Get all values of property ChemicalFormula as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChemicalFormula_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CHEMICALFORMULA);
	}
	
    /**
     * Get all values of property ChemicalFormula as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChemicalFormula_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHEMICALFORMULA, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ChemicalFormula as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChemicalFormula_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CHEMICALFORMULA);
	}

    /**
     * Get all values of property ChemicalFormula as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChemicalFormula_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CHEMICALFORMULA, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ChemicalFormula     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllChemicalFormula(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CHEMICALFORMULA, Thing.class);
	}
	
    /**
     * Get all values of property ChemicalFormula as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllChemicalFormula_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHEMICALFORMULA, Thing.class);
	}

    /**
     * Get all values of property ChemicalFormula     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllChemicalFormula() {
		return Base.getAll(this.model, this.getResource(), CHEMICALFORMULA, Thing.class);
	}

    /**
     * Get all values of property ChemicalFormula as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllChemicalFormula_as() {
		return Base.getAll_as(this.model, this.getResource(), CHEMICALFORMULA, Thing.class);
	}
 
    /**
     * Adds a value to property ChemicalFormula as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addChemicalFormula( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CHEMICALFORMULA, value);
	}
	
    /**
     * Adds a value to property ChemicalFormula as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addChemicalFormula( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CHEMICALFORMULA, value);
	}
    /**
     * Adds a value to property ChemicalFormula from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addChemicalFormula(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CHEMICALFORMULA, value);
	}
	
    /**
     * Adds a value to property ChemicalFormula from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addChemicalFormula(Thing value) {
		Base.add(this.model, this.getResource(), CHEMICALFORMULA, value);
	}
  

    /**
     * Sets a value of property ChemicalFormula from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setChemicalFormula( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CHEMICALFORMULA, value);
	}
	
    /**
     * Sets a value of property ChemicalFormula from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setChemicalFormula( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CHEMICALFORMULA, value);
	}
    /**
     * Sets a value of property ChemicalFormula from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setChemicalFormula(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CHEMICALFORMULA, value);
	}
	
    /**
     * Sets a value of property ChemicalFormula from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setChemicalFormula(Thing value) {
		Base.set(this.model, this.getResource(), CHEMICALFORMULA, value);
	}
  


    /**
     * Removes a value of property ChemicalFormula as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeChemicalFormula( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CHEMICALFORMULA, value);
	}
	
    /**
     * Removes a value of property ChemicalFormula as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeChemicalFormula( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CHEMICALFORMULA, value);
	}
    /**
     * Removes a value of property ChemicalFormula given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeChemicalFormula(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CHEMICALFORMULA, value);
	}
	
    /**
     * Removes a value of property ChemicalFormula given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeChemicalFormula(Thing value) {
		Base.remove(this.model, this.getResource(), CHEMICALFORMULA, value);
	}
  
    /**
     * Removes all values of property ChemicalFormula     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllChemicalFormula( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHEMICALFORMULA);
	}
	
    /**
     * Removes all values of property ChemicalFormula	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllChemicalFormula() {
		Base.removeAll(this.model, this.getResource(), CHEMICALFORMULA);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ca3c63e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasChemicalIupacName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CHEMICALIUPACNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ca3c63e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasChemicalIupacName() {
		return Base.has(this.model, this.getResource(), CHEMICALIUPACNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ca3c63e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasChemicalIupacName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CHEMICALIUPACNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ca3c63e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasChemicalIupacName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CHEMICALIUPACNAME, value);
	}

     /**
     * Get all values of property ChemicalIupacName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChemicalIupacName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CHEMICALIUPACNAME);
	}
	
    /**
     * Get all values of property ChemicalIupacName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChemicalIupacName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHEMICALIUPACNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ChemicalIupacName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChemicalIupacName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CHEMICALIUPACNAME);
	}

    /**
     * Get all values of property ChemicalIupacName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChemicalIupacName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CHEMICALIUPACNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ChemicalIupacName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllChemicalIupacName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CHEMICALIUPACNAME, Thing.class);
	}
	
    /**
     * Get all values of property ChemicalIupacName as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllChemicalIupacName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHEMICALIUPACNAME, Thing.class);
	}

    /**
     * Get all values of property ChemicalIupacName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllChemicalIupacName() {
		return Base.getAll(this.model, this.getResource(), CHEMICALIUPACNAME, Thing.class);
	}

    /**
     * Get all values of property ChemicalIupacName as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllChemicalIupacName_as() {
		return Base.getAll_as(this.model, this.getResource(), CHEMICALIUPACNAME, Thing.class);
	}
 
    /**
     * Adds a value to property ChemicalIupacName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addChemicalIupacName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CHEMICALIUPACNAME, value);
	}
	
    /**
     * Adds a value to property ChemicalIupacName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addChemicalIupacName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CHEMICALIUPACNAME, value);
	}
    /**
     * Adds a value to property ChemicalIupacName from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addChemicalIupacName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CHEMICALIUPACNAME, value);
	}
	
    /**
     * Adds a value to property ChemicalIupacName from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addChemicalIupacName(Thing value) {
		Base.add(this.model, this.getResource(), CHEMICALIUPACNAME, value);
	}
  

    /**
     * Sets a value of property ChemicalIupacName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setChemicalIupacName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CHEMICALIUPACNAME, value);
	}
	
    /**
     * Sets a value of property ChemicalIupacName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setChemicalIupacName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CHEMICALIUPACNAME, value);
	}
    /**
     * Sets a value of property ChemicalIupacName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setChemicalIupacName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CHEMICALIUPACNAME, value);
	}
	
    /**
     * Sets a value of property ChemicalIupacName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setChemicalIupacName(Thing value) {
		Base.set(this.model, this.getResource(), CHEMICALIUPACNAME, value);
	}
  


    /**
     * Removes a value of property ChemicalIupacName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeChemicalIupacName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CHEMICALIUPACNAME, value);
	}
	
    /**
     * Removes a value of property ChemicalIupacName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeChemicalIupacName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CHEMICALIUPACNAME, value);
	}
    /**
     * Removes a value of property ChemicalIupacName given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeChemicalIupacName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CHEMICALIUPACNAME, value);
	}
	
    /**
     * Removes a value of property ChemicalIupacName given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeChemicalIupacName(Thing value) {
		Base.remove(this.model, this.getResource(), CHEMICALIUPACNAME, value);
	}
  
    /**
     * Removes all values of property ChemicalIupacName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllChemicalIupacName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHEMICALIUPACNAME);
	}
	
    /**
     * Removes all values of property ChemicalIupacName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllChemicalIupacName() {
		Base.removeAll(this.model, this.getResource(), CHEMICALIUPACNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e0a9411 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasChemicalStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CHEMICALSTRUCTURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e0a9411 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasChemicalStructure() {
		return Base.has(this.model, this.getResource(), CHEMICALSTRUCTURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e0a9411 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasChemicalStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CHEMICALSTRUCTURE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e0a9411 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasChemicalStructure( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CHEMICALSTRUCTURE, value);
	}

     /**
     * Get all values of property ChemicalStructure as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChemicalStructure_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CHEMICALSTRUCTURE);
	}
	
    /**
     * Get all values of property ChemicalStructure as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChemicalStructure_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHEMICALSTRUCTURE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ChemicalStructure as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChemicalStructure_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CHEMICALSTRUCTURE);
	}

    /**
     * Get all values of property ChemicalStructure as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChemicalStructure_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CHEMICALSTRUCTURE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ChemicalStructure     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllChemicalStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CHEMICALSTRUCTURE, Thing.class);
	}
	
    /**
     * Get all values of property ChemicalStructure as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllChemicalStructure_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHEMICALSTRUCTURE, Thing.class);
	}

    /**
     * Get all values of property ChemicalStructure     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllChemicalStructure() {
		return Base.getAll(this.model, this.getResource(), CHEMICALSTRUCTURE, Thing.class);
	}

    /**
     * Get all values of property ChemicalStructure as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllChemicalStructure_as() {
		return Base.getAll_as(this.model, this.getResource(), CHEMICALSTRUCTURE, Thing.class);
	}
 
    /**
     * Adds a value to property ChemicalStructure as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addChemicalStructure( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CHEMICALSTRUCTURE, value);
	}
	
    /**
     * Adds a value to property ChemicalStructure as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addChemicalStructure( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CHEMICALSTRUCTURE, value);
	}
    /**
     * Adds a value to property ChemicalStructure from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addChemicalStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CHEMICALSTRUCTURE, value);
	}
	
    /**
     * Adds a value to property ChemicalStructure from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addChemicalStructure(Thing value) {
		Base.add(this.model, this.getResource(), CHEMICALSTRUCTURE, value);
	}
  

    /**
     * Sets a value of property ChemicalStructure from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setChemicalStructure( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CHEMICALSTRUCTURE, value);
	}
	
    /**
     * Sets a value of property ChemicalStructure from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setChemicalStructure( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CHEMICALSTRUCTURE, value);
	}
    /**
     * Sets a value of property ChemicalStructure from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setChemicalStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CHEMICALSTRUCTURE, value);
	}
	
    /**
     * Sets a value of property ChemicalStructure from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setChemicalStructure(Thing value) {
		Base.set(this.model, this.getResource(), CHEMICALSTRUCTURE, value);
	}
  


    /**
     * Removes a value of property ChemicalStructure as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeChemicalStructure( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CHEMICALSTRUCTURE, value);
	}
	
    /**
     * Removes a value of property ChemicalStructure as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeChemicalStructure( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CHEMICALSTRUCTURE, value);
	}
    /**
     * Removes a value of property ChemicalStructure given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeChemicalStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CHEMICALSTRUCTURE, value);
	}
	
    /**
     * Removes a value of property ChemicalStructure given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeChemicalStructure(Thing value) {
		Base.remove(this.model, this.getResource(), CHEMICALSTRUCTURE, value);
	}
  
    /**
     * Removes all values of property ChemicalStructure     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllChemicalStructure( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHEMICALSTRUCTURE);
	}
	
    /**
     * Removes all values of property ChemicalStructure	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllChemicalStructure() {
		Base.removeAll(this.model, this.getResource(), CHEMICALSTRUCTURE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9c287f0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasChromosomeLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CHROMOSOMELOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9c287f0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasChromosomeLocation() {
		return Base.has(this.model, this.getResource(), CHROMOSOMELOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9c287f0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasChromosomeLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CHROMOSOMELOCATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9c287f0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasChromosomeLocation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CHROMOSOMELOCATION, value);
	}

     /**
     * Get all values of property ChromosomeLocation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChromosomeLocation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CHROMOSOMELOCATION);
	}
	
    /**
     * Get all values of property ChromosomeLocation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChromosomeLocation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHROMOSOMELOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ChromosomeLocation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChromosomeLocation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CHROMOSOMELOCATION);
	}

    /**
     * Get all values of property ChromosomeLocation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChromosomeLocation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CHROMOSOMELOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ChromosomeLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllChromosomeLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CHROMOSOMELOCATION, Thing.class);
	}
	
    /**
     * Get all values of property ChromosomeLocation as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllChromosomeLocation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHROMOSOMELOCATION, Thing.class);
	}

    /**
     * Get all values of property ChromosomeLocation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllChromosomeLocation() {
		return Base.getAll(this.model, this.getResource(), CHROMOSOMELOCATION, Thing.class);
	}

    /**
     * Get all values of property ChromosomeLocation as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllChromosomeLocation_as() {
		return Base.getAll_as(this.model, this.getResource(), CHROMOSOMELOCATION, Thing.class);
	}
 
    /**
     * Adds a value to property ChromosomeLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addChromosomeLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CHROMOSOMELOCATION, value);
	}
	
    /**
     * Adds a value to property ChromosomeLocation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addChromosomeLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CHROMOSOMELOCATION, value);
	}
    /**
     * Adds a value to property ChromosomeLocation from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addChromosomeLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CHROMOSOMELOCATION, value);
	}
	
    /**
     * Adds a value to property ChromosomeLocation from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addChromosomeLocation(Thing value) {
		Base.add(this.model, this.getResource(), CHROMOSOMELOCATION, value);
	}
  

    /**
     * Sets a value of property ChromosomeLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setChromosomeLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CHROMOSOMELOCATION, value);
	}
	
    /**
     * Sets a value of property ChromosomeLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setChromosomeLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CHROMOSOMELOCATION, value);
	}
    /**
     * Sets a value of property ChromosomeLocation from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setChromosomeLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CHROMOSOMELOCATION, value);
	}
	
    /**
     * Sets a value of property ChromosomeLocation from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setChromosomeLocation(Thing value) {
		Base.set(this.model, this.getResource(), CHROMOSOMELOCATION, value);
	}
  


    /**
     * Removes a value of property ChromosomeLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeChromosomeLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CHROMOSOMELOCATION, value);
	}
	
    /**
     * Removes a value of property ChromosomeLocation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeChromosomeLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CHROMOSOMELOCATION, value);
	}
    /**
     * Removes a value of property ChromosomeLocation given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeChromosomeLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CHROMOSOMELOCATION, value);
	}
	
    /**
     * Removes a value of property ChromosomeLocation given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeChromosomeLocation(Thing value) {
		Base.remove(this.model, this.getResource(), CHROMOSOMELOCATION, value);
	}
  
    /**
     * Removes all values of property ChromosomeLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllChromosomeLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHROMOSOMELOCATION);
	}
	
    /**
     * Removes all values of property ChromosomeLocation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllChromosomeLocation() {
		Base.removeAll(this.model, this.getResource(), CHROMOSOMELOCATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35826389 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContraindicationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTRAINDICATIONINSERT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35826389 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContraindicationInsert() {
		return Base.has(this.model, this.getResource(), CONTRAINDICATIONINSERT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35826389 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContraindicationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTRAINDICATIONINSERT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35826389 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContraindicationInsert( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTRAINDICATIONINSERT, value);
	}

     /**
     * Get all values of property ContraindicationInsert as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContraindicationInsert_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTRAINDICATIONINSERT);
	}
	
    /**
     * Get all values of property ContraindicationInsert as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContraindicationInsert_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRAINDICATIONINSERT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ContraindicationInsert as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContraindicationInsert_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTRAINDICATIONINSERT);
	}

    /**
     * Get all values of property ContraindicationInsert as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContraindicationInsert_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTRAINDICATIONINSERT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ContraindicationInsert     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllContraindicationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTRAINDICATIONINSERT, Thing.class);
	}
	
    /**
     * Get all values of property ContraindicationInsert as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllContraindicationInsert_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRAINDICATIONINSERT, Thing.class);
	}

    /**
     * Get all values of property ContraindicationInsert     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllContraindicationInsert() {
		return Base.getAll(this.model, this.getResource(), CONTRAINDICATIONINSERT, Thing.class);
	}

    /**
     * Get all values of property ContraindicationInsert as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllContraindicationInsert_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTRAINDICATIONINSERT, Thing.class);
	}
 
    /**
     * Adds a value to property ContraindicationInsert as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContraindicationInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTRAINDICATIONINSERT, value);
	}
	
    /**
     * Adds a value to property ContraindicationInsert as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContraindicationInsert( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTRAINDICATIONINSERT, value);
	}
    /**
     * Adds a value to property ContraindicationInsert from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContraindicationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CONTRAINDICATIONINSERT, value);
	}
	
    /**
     * Adds a value to property ContraindicationInsert from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContraindicationInsert(Thing value) {
		Base.add(this.model, this.getResource(), CONTRAINDICATIONINSERT, value);
	}
  

    /**
     * Sets a value of property ContraindicationInsert from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContraindicationInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTRAINDICATIONINSERT, value);
	}
	
    /**
     * Sets a value of property ContraindicationInsert from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContraindicationInsert( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTRAINDICATIONINSERT, value);
	}
    /**
     * Sets a value of property ContraindicationInsert from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContraindicationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CONTRAINDICATIONINSERT, value);
	}
	
    /**
     * Sets a value of property ContraindicationInsert from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContraindicationInsert(Thing value) {
		Base.set(this.model, this.getResource(), CONTRAINDICATIONINSERT, value);
	}
  


    /**
     * Removes a value of property ContraindicationInsert as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContraindicationInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTRAINDICATIONINSERT, value);
	}
	
    /**
     * Removes a value of property ContraindicationInsert as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContraindicationInsert( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTRAINDICATIONINSERT, value);
	}
    /**
     * Removes a value of property ContraindicationInsert given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContraindicationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CONTRAINDICATIONINSERT, value);
	}
	
    /**
     * Removes a value of property ContraindicationInsert given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContraindicationInsert(Thing value) {
		Base.remove(this.model, this.getResource(), CONTRAINDICATIONINSERT, value);
	}
  
    /**
     * Removes all values of property ContraindicationInsert     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContraindicationInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTRAINDICATIONINSERT);
	}
	
    /**
     * Removes all values of property ContraindicationInsert	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContraindicationInsert() {
		Base.removeAll(this.model, this.getResource(), CONTRAINDICATIONINSERT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a1a3cae has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCreationDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATIONDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a1a3cae has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCreationDate() {
		return Base.has(this.model, this.getResource(), CREATIONDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a1a3cae has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCreationDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATIONDATE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a1a3cae has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCreationDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATIONDATE, value);
	}

     /**
     * Get all values of property CreationDate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreationDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CREATIONDATE);
	}
	
    /**
     * Get all values of property CreationDate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreationDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATIONDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CreationDate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreationDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATIONDATE);
	}

    /**
     * Get all values of property CreationDate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCreationDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATIONDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CreationDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllCreationDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CREATIONDATE, Thing.class);
	}
	
    /**
     * Get all values of property CreationDate as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllCreationDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATIONDATE, Thing.class);
	}

    /**
     * Get all values of property CreationDate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllCreationDate() {
		return Base.getAll(this.model, this.getResource(), CREATIONDATE, Thing.class);
	}

    /**
     * Get all values of property CreationDate as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllCreationDate_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATIONDATE, Thing.class);
	}
 
    /**
     * Adds a value to property CreationDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCreationDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CREATIONDATE, value);
	}
	
    /**
     * Adds a value to property CreationDate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCreationDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CREATIONDATE, value);
	}
    /**
     * Adds a value to property CreationDate from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCreationDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CREATIONDATE, value);
	}
	
    /**
     * Adds a value to property CreationDate from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCreationDate(Thing value) {
		Base.add(this.model, this.getResource(), CREATIONDATE, value);
	}
  

    /**
     * Sets a value of property CreationDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCreationDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATIONDATE, value);
	}
	
    /**
     * Sets a value of property CreationDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCreationDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATIONDATE, value);
	}
    /**
     * Sets a value of property CreationDate from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCreationDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CREATIONDATE, value);
	}
	
    /**
     * Sets a value of property CreationDate from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCreationDate(Thing value) {
		Base.set(this.model, this.getResource(), CREATIONDATE, value);
	}
  


    /**
     * Removes a value of property CreationDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCreationDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATIONDATE, value);
	}
	
    /**
     * Removes a value of property CreationDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCreationDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATIONDATE, value);
	}
    /**
     * Removes a value of property CreationDate given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCreationDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CREATIONDATE, value);
	}
	
    /**
     * Removes a value of property CreationDate given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCreationDate(Thing value) {
		Base.remove(this.model, this.getResource(), CREATIONDATE, value);
	}
  
    /**
     * Removes all values of property CreationDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCreationDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATIONDATE);
	}
	
    /**
     * Removes all values of property CreationDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCreationDate() {
		Base.removeAll(this.model, this.getResource(), CREATIONDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45d84ac1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45d84ac1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDescription() {
		return Base.has(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45d84ac1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DESCRIPTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45d84ac1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DESCRIPTION, value);
	}

     /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DESCRIPTION, Thing.class);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDescription() {
		return Base.getAll(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}
 
    /**
     * Adds a value to property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Adds a value to property Description from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDescription(Thing value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
  

    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDescription(Thing value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
  


    /**
     * Removes a value of property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Removes a value of property Description given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDescription(Thing value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
  
    /**
     * Removes all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Removes all values of property Description	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDescription() {
		Base.removeAll(this.model, this.getResource(), DESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b5006a7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDosageForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DOSAGEFORM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b5006a7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDosageForm() {
		return Base.has(this.model, this.getResource(), DOSAGEFORM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b5006a7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDosageForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DOSAGEFORM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b5006a7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDosageForm( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DOSAGEFORM, value);
	}

     /**
     * Get all values of property DosageForm as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDosageForm_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DOSAGEFORM);
	}
	
    /**
     * Get all values of property DosageForm as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDosageForm_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DOSAGEFORM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DosageForm as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDosageForm_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DOSAGEFORM);
	}

    /**
     * Get all values of property DosageForm as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDosageForm_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DOSAGEFORM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DosageForm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDosageForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DOSAGEFORM, Thing.class);
	}
	
    /**
     * Get all values of property DosageForm as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDosageForm_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DOSAGEFORM, Thing.class);
	}

    /**
     * Get all values of property DosageForm     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDosageForm() {
		return Base.getAll(this.model, this.getResource(), DOSAGEFORM, Thing.class);
	}

    /**
     * Get all values of property DosageForm as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDosageForm_as() {
		return Base.getAll_as(this.model, this.getResource(), DOSAGEFORM, Thing.class);
	}
 
    /**
     * Adds a value to property DosageForm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDosageForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DOSAGEFORM, value);
	}
	
    /**
     * Adds a value to property DosageForm as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDosageForm( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DOSAGEFORM, value);
	}
    /**
     * Adds a value to property DosageForm from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDosageForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DOSAGEFORM, value);
	}
	
    /**
     * Adds a value to property DosageForm from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDosageForm(Thing value) {
		Base.add(this.model, this.getResource(), DOSAGEFORM, value);
	}
  

    /**
     * Sets a value of property DosageForm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDosageForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DOSAGEFORM, value);
	}
	
    /**
     * Sets a value of property DosageForm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDosageForm( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DOSAGEFORM, value);
	}
    /**
     * Sets a value of property DosageForm from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDosageForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DOSAGEFORM, value);
	}
	
    /**
     * Sets a value of property DosageForm from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDosageForm(Thing value) {
		Base.set(this.model, this.getResource(), DOSAGEFORM, value);
	}
  


    /**
     * Removes a value of property DosageForm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDosageForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DOSAGEFORM, value);
	}
	
    /**
     * Removes a value of property DosageForm as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDosageForm( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DOSAGEFORM, value);
	}
    /**
     * Removes a value of property DosageForm given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDosageForm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DOSAGEFORM, value);
	}
	
    /**
     * Removes a value of property DosageForm given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDosageForm(Thing value) {
		Base.remove(this.model, this.getResource(), DOSAGEFORM, value);
	}
  
    /**
     * Removes all values of property DosageForm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDosageForm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DOSAGEFORM);
	}
	
    /**
     * Removes all values of property DosageForm	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDosageForm() {
		Base.removeAll(this.model, this.getResource(), DOSAGEFORM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2930ed73 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDpdDrugIdNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DPDDRUGIDNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2930ed73 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDpdDrugIdNumber() {
		return Base.has(this.model, this.getResource(), DPDDRUGIDNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2930ed73 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDpdDrugIdNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DPDDRUGIDNUMBER, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2930ed73 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDpdDrugIdNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DPDDRUGIDNUMBER, value);
	}

     /**
     * Get all values of property DpdDrugIdNumber as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDpdDrugIdNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DPDDRUGIDNUMBER);
	}
	
    /**
     * Get all values of property DpdDrugIdNumber as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDpdDrugIdNumber_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DPDDRUGIDNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DpdDrugIdNumber as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDpdDrugIdNumber_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DPDDRUGIDNUMBER);
	}

    /**
     * Get all values of property DpdDrugIdNumber as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDpdDrugIdNumber_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DPDDRUGIDNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DpdDrugIdNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDpdDrugIdNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DPDDRUGIDNUMBER, Thing.class);
	}
	
    /**
     * Get all values of property DpdDrugIdNumber as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDpdDrugIdNumber_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DPDDRUGIDNUMBER, Thing.class);
	}

    /**
     * Get all values of property DpdDrugIdNumber     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDpdDrugIdNumber() {
		return Base.getAll(this.model, this.getResource(), DPDDRUGIDNUMBER, Thing.class);
	}

    /**
     * Get all values of property DpdDrugIdNumber as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDpdDrugIdNumber_as() {
		return Base.getAll_as(this.model, this.getResource(), DPDDRUGIDNUMBER, Thing.class);
	}
 
    /**
     * Adds a value to property DpdDrugIdNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDpdDrugIdNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DPDDRUGIDNUMBER, value);
	}
	
    /**
     * Adds a value to property DpdDrugIdNumber as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDpdDrugIdNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DPDDRUGIDNUMBER, value);
	}
    /**
     * Adds a value to property DpdDrugIdNumber from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDpdDrugIdNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DPDDRUGIDNUMBER, value);
	}
	
    /**
     * Adds a value to property DpdDrugIdNumber from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDpdDrugIdNumber(Thing value) {
		Base.add(this.model, this.getResource(), DPDDRUGIDNUMBER, value);
	}
  

    /**
     * Sets a value of property DpdDrugIdNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDpdDrugIdNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DPDDRUGIDNUMBER, value);
	}
	
    /**
     * Sets a value of property DpdDrugIdNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDpdDrugIdNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DPDDRUGIDNUMBER, value);
	}
    /**
     * Sets a value of property DpdDrugIdNumber from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDpdDrugIdNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DPDDRUGIDNUMBER, value);
	}
	
    /**
     * Sets a value of property DpdDrugIdNumber from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDpdDrugIdNumber(Thing value) {
		Base.set(this.model, this.getResource(), DPDDRUGIDNUMBER, value);
	}
  


    /**
     * Removes a value of property DpdDrugIdNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDpdDrugIdNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DPDDRUGIDNUMBER, value);
	}
	
    /**
     * Removes a value of property DpdDrugIdNumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDpdDrugIdNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DPDDRUGIDNUMBER, value);
	}
    /**
     * Removes a value of property DpdDrugIdNumber given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDpdDrugIdNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DPDDRUGIDNUMBER, value);
	}
	
    /**
     * Removes a value of property DpdDrugIdNumber given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDpdDrugIdNumber(Thing value) {
		Base.remove(this.model, this.getResource(), DPDDRUGIDNUMBER, value);
	}
  
    /**
     * Removes all values of property DpdDrugIdNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDpdDrugIdNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DPDDRUGIDNUMBER);
	}
	
    /**
     * Removes all values of property DpdDrugIdNumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDpdDrugIdNumber() {
		Base.removeAll(this.model, this.getResource(), DPDDRUGIDNUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bb3454d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDrugCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DRUGCATEGORY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bb3454d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDrugCategory() {
		return Base.has(this.model, this.getResource(), DRUGCATEGORY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bb3454d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDrugCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DRUGCATEGORY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bb3454d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDrugCategory( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DRUGCATEGORY, value);
	}

     /**
     * Get all values of property DrugCategory as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDrugCategory_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DRUGCATEGORY);
	}
	
    /**
     * Get all values of property DrugCategory as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDrugCategory_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DRUGCATEGORY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DrugCategory as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDrugCategory_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DRUGCATEGORY);
	}

    /**
     * Get all values of property DrugCategory as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDrugCategory_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DRUGCATEGORY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DrugCategory     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDrugCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DRUGCATEGORY, Thing.class);
	}
	
    /**
     * Get all values of property DrugCategory as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDrugCategory_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DRUGCATEGORY, Thing.class);
	}

    /**
     * Get all values of property DrugCategory     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDrugCategory() {
		return Base.getAll(this.model, this.getResource(), DRUGCATEGORY, Thing.class);
	}

    /**
     * Get all values of property DrugCategory as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDrugCategory_as() {
		return Base.getAll_as(this.model, this.getResource(), DRUGCATEGORY, Thing.class);
	}
 
    /**
     * Adds a value to property DrugCategory as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDrugCategory( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DRUGCATEGORY, value);
	}
	
    /**
     * Adds a value to property DrugCategory as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDrugCategory( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DRUGCATEGORY, value);
	}
    /**
     * Adds a value to property DrugCategory from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDrugCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DRUGCATEGORY, value);
	}
	
    /**
     * Adds a value to property DrugCategory from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDrugCategory(Thing value) {
		Base.add(this.model, this.getResource(), DRUGCATEGORY, value);
	}
  

    /**
     * Sets a value of property DrugCategory from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDrugCategory( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DRUGCATEGORY, value);
	}
	
    /**
     * Sets a value of property DrugCategory from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDrugCategory( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DRUGCATEGORY, value);
	}
    /**
     * Sets a value of property DrugCategory from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDrugCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DRUGCATEGORY, value);
	}
	
    /**
     * Sets a value of property DrugCategory from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDrugCategory(Thing value) {
		Base.set(this.model, this.getResource(), DRUGCATEGORY, value);
	}
  


    /**
     * Removes a value of property DrugCategory as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDrugCategory( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DRUGCATEGORY, value);
	}
	
    /**
     * Removes a value of property DrugCategory as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDrugCategory( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DRUGCATEGORY, value);
	}
    /**
     * Removes a value of property DrugCategory given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDrugCategory(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DRUGCATEGORY, value);
	}
	
    /**
     * Removes a value of property DrugCategory given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDrugCategory(Thing value) {
		Base.remove(this.model, this.getResource(), DRUGCATEGORY, value);
	}
  
    /**
     * Removes all values of property DrugCategory     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDrugCategory( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DRUGCATEGORY);
	}
	
    /**
     * Removes all values of property DrugCategory	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDrugCategory() {
		Base.removeAll(this.model, this.getResource(), DRUGCATEGORY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b7fcefc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDrugInteractions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DRUGINTERACTIONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b7fcefc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDrugInteractions() {
		return Base.has(this.model, this.getResource(), DRUGINTERACTIONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b7fcefc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDrugInteractions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DRUGINTERACTIONS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b7fcefc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDrugInteractions( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DRUGINTERACTIONS, value);
	}

     /**
     * Get all values of property DrugInteractions as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDrugInteractions_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DRUGINTERACTIONS);
	}
	
    /**
     * Get all values of property DrugInteractions as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDrugInteractions_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DRUGINTERACTIONS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DrugInteractions as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDrugInteractions_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DRUGINTERACTIONS);
	}

    /**
     * Get all values of property DrugInteractions as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDrugInteractions_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DRUGINTERACTIONS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DrugInteractions     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDrugInteractions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DRUGINTERACTIONS, Thing.class);
	}
	
    /**
     * Get all values of property DrugInteractions as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDrugInteractions_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DRUGINTERACTIONS, Thing.class);
	}

    /**
     * Get all values of property DrugInteractions     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDrugInteractions() {
		return Base.getAll(this.model, this.getResource(), DRUGINTERACTIONS, Thing.class);
	}

    /**
     * Get all values of property DrugInteractions as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDrugInteractions_as() {
		return Base.getAll_as(this.model, this.getResource(), DRUGINTERACTIONS, Thing.class);
	}
 
    /**
     * Adds a value to property DrugInteractions as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDrugInteractions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DRUGINTERACTIONS, value);
	}
	
    /**
     * Adds a value to property DrugInteractions as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDrugInteractions( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DRUGINTERACTIONS, value);
	}
    /**
     * Adds a value to property DrugInteractions from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDrugInteractions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DRUGINTERACTIONS, value);
	}
	
    /**
     * Adds a value to property DrugInteractions from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDrugInteractions(Thing value) {
		Base.add(this.model, this.getResource(), DRUGINTERACTIONS, value);
	}
  

    /**
     * Sets a value of property DrugInteractions from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDrugInteractions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DRUGINTERACTIONS, value);
	}
	
    /**
     * Sets a value of property DrugInteractions from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDrugInteractions( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DRUGINTERACTIONS, value);
	}
    /**
     * Sets a value of property DrugInteractions from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDrugInteractions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DRUGINTERACTIONS, value);
	}
	
    /**
     * Sets a value of property DrugInteractions from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDrugInteractions(Thing value) {
		Base.set(this.model, this.getResource(), DRUGINTERACTIONS, value);
	}
  


    /**
     * Removes a value of property DrugInteractions as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDrugInteractions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DRUGINTERACTIONS, value);
	}
	
    /**
     * Removes a value of property DrugInteractions as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDrugInteractions( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DRUGINTERACTIONS, value);
	}
    /**
     * Removes a value of property DrugInteractions given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDrugInteractions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DRUGINTERACTIONS, value);
	}
	
    /**
     * Removes a value of property DrugInteractions given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDrugInteractions(Thing value) {
		Base.remove(this.model, this.getResource(), DRUGINTERACTIONS, value);
	}
  
    /**
     * Removes all values of property DrugInteractions     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDrugInteractions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DRUGINTERACTIONS);
	}
	
    /**
     * Removes all values of property DrugInteractions	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDrugInteractions() {
		Base.removeAll(this.model, this.getResource(), DRUGINTERACTIONS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20d7c91e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDrugReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DRUGREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20d7c91e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDrugReference() {
		return Base.has(this.model, this.getResource(), DRUGREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20d7c91e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDrugReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DRUGREFERENCE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20d7c91e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDrugReference( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DRUGREFERENCE, value);
	}

     /**
     * Get all values of property DrugReference as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDrugReference_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DRUGREFERENCE);
	}
	
    /**
     * Get all values of property DrugReference as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDrugReference_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DRUGREFERENCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DrugReference as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDrugReference_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DRUGREFERENCE);
	}

    /**
     * Get all values of property DrugReference as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDrugReference_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DRUGREFERENCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DrugReference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDrugReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DRUGREFERENCE, Thing.class);
	}
	
    /**
     * Get all values of property DrugReference as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDrugReference_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DRUGREFERENCE, Thing.class);
	}

    /**
     * Get all values of property DrugReference     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDrugReference() {
		return Base.getAll(this.model, this.getResource(), DRUGREFERENCE, Thing.class);
	}

    /**
     * Get all values of property DrugReference as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDrugReference_as() {
		return Base.getAll_as(this.model, this.getResource(), DRUGREFERENCE, Thing.class);
	}
 
    /**
     * Adds a value to property DrugReference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDrugReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DRUGREFERENCE, value);
	}
	
    /**
     * Adds a value to property DrugReference as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDrugReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DRUGREFERENCE, value);
	}
    /**
     * Adds a value to property DrugReference from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDrugReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DRUGREFERENCE, value);
	}
	
    /**
     * Adds a value to property DrugReference from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDrugReference(Thing value) {
		Base.add(this.model, this.getResource(), DRUGREFERENCE, value);
	}
  

    /**
     * Sets a value of property DrugReference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDrugReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DRUGREFERENCE, value);
	}
	
    /**
     * Sets a value of property DrugReference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDrugReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DRUGREFERENCE, value);
	}
    /**
     * Sets a value of property DrugReference from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDrugReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DRUGREFERENCE, value);
	}
	
    /**
     * Sets a value of property DrugReference from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDrugReference(Thing value) {
		Base.set(this.model, this.getResource(), DRUGREFERENCE, value);
	}
  


    /**
     * Removes a value of property DrugReference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDrugReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DRUGREFERENCE, value);
	}
	
    /**
     * Removes a value of property DrugReference as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDrugReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DRUGREFERENCE, value);
	}
    /**
     * Removes a value of property DrugReference given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDrugReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DRUGREFERENCE, value);
	}
	
    /**
     * Removes a value of property DrugReference given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDrugReference(Thing value) {
		Base.remove(this.model, this.getResource(), DRUGREFERENCE, value);
	}
  
    /**
     * Removes all values of property DrugReference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDrugReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DRUGREFERENCE);
	}
	
    /**
     * Removes all values of property DrugReference	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDrugReference() {
		Base.removeAll(this.model, this.getResource(), DRUGREFERENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b773693 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDrugType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DRUGTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b773693 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDrugType() {
		return Base.has(this.model, this.getResource(), DRUGTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b773693 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDrugType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DRUGTYPE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b773693 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDrugType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DRUGTYPE, value);
	}

     /**
     * Get all values of property DrugType as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDrugType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DRUGTYPE);
	}
	
    /**
     * Get all values of property DrugType as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDrugType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DRUGTYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DrugType as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDrugType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DRUGTYPE);
	}

    /**
     * Get all values of property DrugType as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDrugType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DRUGTYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DrugType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDrugType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DRUGTYPE, Thing.class);
	}
	
    /**
     * Get all values of property DrugType as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDrugType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DRUGTYPE, Thing.class);
	}

    /**
     * Get all values of property DrugType     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDrugType() {
		return Base.getAll(this.model, this.getResource(), DRUGTYPE, Thing.class);
	}

    /**
     * Get all values of property DrugType as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDrugType_as() {
		return Base.getAll_as(this.model, this.getResource(), DRUGTYPE, Thing.class);
	}
 
    /**
     * Adds a value to property DrugType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDrugType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DRUGTYPE, value);
	}
	
    /**
     * Adds a value to property DrugType as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDrugType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DRUGTYPE, value);
	}
    /**
     * Adds a value to property DrugType from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDrugType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DRUGTYPE, value);
	}
	
    /**
     * Adds a value to property DrugType from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDrugType(Thing value) {
		Base.add(this.model, this.getResource(), DRUGTYPE, value);
	}
  

    /**
     * Sets a value of property DrugType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDrugType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DRUGTYPE, value);
	}
	
    /**
     * Sets a value of property DrugType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDrugType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DRUGTYPE, value);
	}
    /**
     * Sets a value of property DrugType from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDrugType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DRUGTYPE, value);
	}
	
    /**
     * Sets a value of property DrugType from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDrugType(Thing value) {
		Base.set(this.model, this.getResource(), DRUGTYPE, value);
	}
  


    /**
     * Removes a value of property DrugType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDrugType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DRUGTYPE, value);
	}
	
    /**
     * Removes a value of property DrugType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDrugType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DRUGTYPE, value);
	}
    /**
     * Removes a value of property DrugType given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDrugType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DRUGTYPE, value);
	}
	
    /**
     * Removes a value of property DrugType given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDrugType(Thing value) {
		Base.remove(this.model, this.getResource(), DRUGTYPE, value);
	}
  
    /**
     * Removes all values of property DrugType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDrugType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DRUGTYPE);
	}
	
    /**
     * Removes all values of property DrugType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDrugType() {
		Base.removeAll(this.model, this.getResource(), DRUGTYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@160485af has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEnzyme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ENZYME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@160485af has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEnzyme() {
		return Base.has(this.model, this.getResource(), ENZYME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@160485af has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEnzyme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ENZYME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@160485af has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEnzyme( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ENZYME, value);
	}

     /**
     * Get all values of property Enzyme as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEnzyme_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ENZYME);
	}
	
    /**
     * Get all values of property Enzyme as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEnzyme_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENZYME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Enzyme as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEnzyme_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ENZYME);
	}

    /**
     * Get all values of property Enzyme as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEnzyme_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ENZYME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Enzyme     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllEnzyme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ENZYME, Thing.class);
	}
	
    /**
     * Get all values of property Enzyme as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllEnzyme_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENZYME, Thing.class);
	}

    /**
     * Get all values of property Enzyme     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllEnzyme() {
		return Base.getAll(this.model, this.getResource(), ENZYME, Thing.class);
	}

    /**
     * Get all values of property Enzyme as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllEnzyme_as() {
		return Base.getAll_as(this.model, this.getResource(), ENZYME, Thing.class);
	}
 
    /**
     * Adds a value to property Enzyme as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEnzyme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ENZYME, value);
	}
	
    /**
     * Adds a value to property Enzyme as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEnzyme( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ENZYME, value);
	}
    /**
     * Adds a value to property Enzyme from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEnzyme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ENZYME, value);
	}
	
    /**
     * Adds a value to property Enzyme from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEnzyme(Thing value) {
		Base.add(this.model, this.getResource(), ENZYME, value);
	}
  

    /**
     * Sets a value of property Enzyme from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEnzyme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ENZYME, value);
	}
	
    /**
     * Sets a value of property Enzyme from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEnzyme( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ENZYME, value);
	}
    /**
     * Sets a value of property Enzyme from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEnzyme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ENZYME, value);
	}
	
    /**
     * Sets a value of property Enzyme from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEnzyme(Thing value) {
		Base.set(this.model, this.getResource(), ENZYME, value);
	}
  


    /**
     * Removes a value of property Enzyme as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEnzyme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ENZYME, value);
	}
	
    /**
     * Removes a value of property Enzyme as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEnzyme( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ENZYME, value);
	}
    /**
     * Removes a value of property Enzyme given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEnzyme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ENZYME, value);
	}
	
    /**
     * Removes a value of property Enzyme given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEnzyme(Thing value) {
		Base.remove(this.model, this.getResource(), ENZYME, value);
	}
  
    /**
     * Removes all values of property Enzyme     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEnzyme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ENZYME);
	}
	
    /**
     * Removes all values of property Enzyme	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEnzyme() {
		Base.removeAll(this.model, this.getResource(), ENZYME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7251a66a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EQUIVALENTCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7251a66a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEquivalentClass() {
		return Base.has(this.model, this.getResource(), EQUIVALENTCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7251a66a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EQUIVALENTCLASS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7251a66a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEquivalentClass( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}

     /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EQUIVALENTCLASS);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentClass_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EQUIVALENTCLASS, Thing.class);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllEquivalentClass_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, Thing.class);
	}

    /**
     * Get all values of property EquivalentClass     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllEquivalentClass() {
		return Base.getAll(this.model, this.getResource(), EQUIVALENTCLASS, Thing.class);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllEquivalentClass_as() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, Thing.class);
	}
 
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Adds a value to property EquivalentClass from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEquivalentClass(Thing value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  

    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Sets a value of property EquivalentClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEquivalentClass(Thing value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  


    /**
     * Removes a value of property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Removes a value of property EquivalentClass given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEquivalentClass(Thing value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  
    /**
     * Removes all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Removes all values of property EquivalentClass	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEquivalentClass() {
		Base.removeAll(this.model, this.getResource(), EQUIVALENTCLASS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@251863ff has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EQUIVALENTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@251863ff has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEquivalentProperty() {
		return Base.has(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@251863ff has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EQUIVALENTPROPERTY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@251863ff has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEquivalentProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}

     /**
     * Get all values of property EquivalentProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EQUIVALENTPROPERTY);
	}
	
    /**
     * Get all values of property EquivalentProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EquivalentProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEquivalentProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}

    /**
     * Get all values of property EquivalentProperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEquivalentProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EquivalentProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EQUIVALENTPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property EquivalentProperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllEquivalentProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTPROPERTY, Thing.class);
	}

    /**
     * Get all values of property EquivalentProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllEquivalentProperty() {
		return Base.getAll(this.model, this.getResource(), EQUIVALENTPROPERTY, Thing.class);
	}

    /**
     * Get all values of property EquivalentProperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllEquivalentProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property EquivalentProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Adds a value to property EquivalentProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Adds a value to property EquivalentProperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Adds a value to property EquivalentProperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEquivalentProperty(Thing value) {
		Base.add(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  

    /**
     * Sets a value of property EquivalentProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Sets a value of property EquivalentProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Sets a value of property EquivalentProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Sets a value of property EquivalentProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEquivalentProperty(Thing value) {
		Base.set(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  


    /**
     * Removes a value of property EquivalentProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Removes a value of property EquivalentProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Removes a value of property EquivalentProperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Removes a value of property EquivalentProperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEquivalentProperty(Thing value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  
    /**
     * Removes all values of property EquivalentProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EQUIVALENTPROPERTY);
	}
	
    /**
     * Removes all values of property EquivalentProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEquivalentProperty() {
		Base.removeAll(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b795f8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEssentiality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ESSENTIALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b795f8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEssentiality() {
		return Base.has(this.model, this.getResource(), ESSENTIALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b795f8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEssentiality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ESSENTIALITY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b795f8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEssentiality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ESSENTIALITY, value);
	}

     /**
     * Get all values of property Essentiality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEssentiality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ESSENTIALITY);
	}
	
    /**
     * Get all values of property Essentiality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEssentiality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ESSENTIALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Essentiality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEssentiality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ESSENTIALITY);
	}

    /**
     * Get all values of property Essentiality as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEssentiality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ESSENTIALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Essentiality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllEssentiality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ESSENTIALITY, Thing.class);
	}
	
    /**
     * Get all values of property Essentiality as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllEssentiality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ESSENTIALITY, Thing.class);
	}

    /**
     * Get all values of property Essentiality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllEssentiality() {
		return Base.getAll(this.model, this.getResource(), ESSENTIALITY, Thing.class);
	}

    /**
     * Get all values of property Essentiality as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllEssentiality_as() {
		return Base.getAll_as(this.model, this.getResource(), ESSENTIALITY, Thing.class);
	}
 
    /**
     * Adds a value to property Essentiality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEssentiality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ESSENTIALITY, value);
	}
	
    /**
     * Adds a value to property Essentiality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEssentiality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ESSENTIALITY, value);
	}
    /**
     * Adds a value to property Essentiality from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEssentiality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ESSENTIALITY, value);
	}
	
    /**
     * Adds a value to property Essentiality from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEssentiality(Thing value) {
		Base.add(this.model, this.getResource(), ESSENTIALITY, value);
	}
  

    /**
     * Sets a value of property Essentiality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEssentiality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ESSENTIALITY, value);
	}
	
    /**
     * Sets a value of property Essentiality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEssentiality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ESSENTIALITY, value);
	}
    /**
     * Sets a value of property Essentiality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEssentiality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ESSENTIALITY, value);
	}
	
    /**
     * Sets a value of property Essentiality from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEssentiality(Thing value) {
		Base.set(this.model, this.getResource(), ESSENTIALITY, value);
	}
  


    /**
     * Removes a value of property Essentiality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEssentiality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ESSENTIALITY, value);
	}
	
    /**
     * Removes a value of property Essentiality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEssentiality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ESSENTIALITY, value);
	}
    /**
     * Removes a value of property Essentiality given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEssentiality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ESSENTIALITY, value);
	}
	
    /**
     * Removes a value of property Essentiality given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEssentiality(Thing value) {
		Base.remove(this.model, this.getResource(), ESSENTIALITY, value);
	}
  
    /**
     * Removes all values of property Essentiality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEssentiality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ESSENTIALITY);
	}
	
    /**
     * Removes all values of property Essentiality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEssentiality() {
		Base.removeAll(this.model, this.getResource(), ESSENTIALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e1217cd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExperimentalCaco2Permeability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e1217cd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExperimentalCaco2Permeability() {
		return Base.has(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e1217cd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExperimentalCaco2Permeability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e1217cd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExperimentalCaco2Permeability( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY, value);
	}

     /**
     * Get all values of property ExperimentalCaco2Permeability as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExperimentalCaco2Permeability_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY);
	}
	
    /**
     * Get all values of property ExperimentalCaco2Permeability as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExperimentalCaco2Permeability_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExperimentalCaco2Permeability as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExperimentalCaco2Permeability_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY);
	}

    /**
     * Get all values of property ExperimentalCaco2Permeability as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExperimentalCaco2Permeability_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExperimentalCaco2Permeability     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllExperimentalCaco2Permeability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY, Thing.class);
	}
	
    /**
     * Get all values of property ExperimentalCaco2Permeability as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllExperimentalCaco2Permeability_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY, Thing.class);
	}

    /**
     * Get all values of property ExperimentalCaco2Permeability     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllExperimentalCaco2Permeability() {
		return Base.getAll(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY, Thing.class);
	}

    /**
     * Get all values of property ExperimentalCaco2Permeability as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllExperimentalCaco2Permeability_as() {
		return Base.getAll_as(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY, Thing.class);
	}
 
    /**
     * Adds a value to property ExperimentalCaco2Permeability as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExperimentalCaco2Permeability( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY, value);
	}
	
    /**
     * Adds a value to property ExperimentalCaco2Permeability as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExperimentalCaco2Permeability( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY, value);
	}
    /**
     * Adds a value to property ExperimentalCaco2Permeability from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExperimentalCaco2Permeability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY, value);
	}
	
    /**
     * Adds a value to property ExperimentalCaco2Permeability from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExperimentalCaco2Permeability(Thing value) {
		Base.add(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY, value);
	}
  

    /**
     * Sets a value of property ExperimentalCaco2Permeability from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExperimentalCaco2Permeability( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY, value);
	}
	
    /**
     * Sets a value of property ExperimentalCaco2Permeability from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExperimentalCaco2Permeability( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY, value);
	}
    /**
     * Sets a value of property ExperimentalCaco2Permeability from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExperimentalCaco2Permeability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY, value);
	}
	
    /**
     * Sets a value of property ExperimentalCaco2Permeability from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExperimentalCaco2Permeability(Thing value) {
		Base.set(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY, value);
	}
  


    /**
     * Removes a value of property ExperimentalCaco2Permeability as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExperimentalCaco2Permeability( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY, value);
	}
	
    /**
     * Removes a value of property ExperimentalCaco2Permeability as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExperimentalCaco2Permeability( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY, value);
	}
    /**
     * Removes a value of property ExperimentalCaco2Permeability given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExperimentalCaco2Permeability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY, value);
	}
	
    /**
     * Removes a value of property ExperimentalCaco2Permeability given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExperimentalCaco2Permeability(Thing value) {
		Base.remove(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY, value);
	}
  
    /**
     * Removes all values of property ExperimentalCaco2Permeability     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExperimentalCaco2Permeability( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXPERIMENTALCACO2PERMEABILITY);
	}
	
    /**
     * Removes all values of property ExperimentalCaco2Permeability	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExperimentalCaco2Permeability() {
		Base.removeAll(this.model, this.getResource(), EXPERIMENTALCACO2PERMEABILITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62be7982 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExperimentalLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62be7982 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExperimentalLogpHydrophobicity() {
		return Base.has(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62be7982 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExperimentalLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62be7982 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExperimentalLogpHydrophobicity( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}

     /**
     * Get all values of property ExperimentalLogpHydrophobicity as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExperimentalLogpHydrophobicity_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY);
	}
	
    /**
     * Get all values of property ExperimentalLogpHydrophobicity as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExperimentalLogpHydrophobicity_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExperimentalLogpHydrophobicity as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExperimentalLogpHydrophobicity_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY);
	}

    /**
     * Get all values of property ExperimentalLogpHydrophobicity as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExperimentalLogpHydrophobicity_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExperimentalLogpHydrophobicity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllExperimentalLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY, Thing.class);
	}
	
    /**
     * Get all values of property ExperimentalLogpHydrophobicity as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllExperimentalLogpHydrophobicity_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY, Thing.class);
	}

    /**
     * Get all values of property ExperimentalLogpHydrophobicity     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllExperimentalLogpHydrophobicity() {
		return Base.getAll(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY, Thing.class);
	}

    /**
     * Get all values of property ExperimentalLogpHydrophobicity as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllExperimentalLogpHydrophobicity_as() {
		return Base.getAll_as(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY, Thing.class);
	}
 
    /**
     * Adds a value to property ExperimentalLogpHydrophobicity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExperimentalLogpHydrophobicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Adds a value to property ExperimentalLogpHydrophobicity as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExperimentalLogpHydrophobicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
    /**
     * Adds a value to property ExperimentalLogpHydrophobicity from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExperimentalLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Adds a value to property ExperimentalLogpHydrophobicity from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExperimentalLogpHydrophobicity(Thing value) {
		Base.add(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
  

    /**
     * Sets a value of property ExperimentalLogpHydrophobicity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExperimentalLogpHydrophobicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Sets a value of property ExperimentalLogpHydrophobicity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExperimentalLogpHydrophobicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
    /**
     * Sets a value of property ExperimentalLogpHydrophobicity from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExperimentalLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Sets a value of property ExperimentalLogpHydrophobicity from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExperimentalLogpHydrophobicity(Thing value) {
		Base.set(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
  


    /**
     * Removes a value of property ExperimentalLogpHydrophobicity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExperimentalLogpHydrophobicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Removes a value of property ExperimentalLogpHydrophobicity as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExperimentalLogpHydrophobicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
    /**
     * Removes a value of property ExperimentalLogpHydrophobicity given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExperimentalLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Removes a value of property ExperimentalLogpHydrophobicity given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExperimentalLogpHydrophobicity(Thing value) {
		Base.remove(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY, value);
	}
  
    /**
     * Removes all values of property ExperimentalLogpHydrophobicity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExperimentalLogpHydrophobicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXPERIMENTALLOGPHYDROPHOBICITY);
	}
	
    /**
     * Removes all values of property ExperimentalLogpHydrophobicity	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExperimentalLogpHydrophobicity() {
		Base.removeAll(this.model, this.getResource(), EXPERIMENTALLOGPHYDROPHOBICITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5162dca has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExperimentalLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXPERIMENTALLOGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5162dca has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExperimentalLogs() {
		return Base.has(this.model, this.getResource(), EXPERIMENTALLOGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5162dca has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExperimentalLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXPERIMENTALLOGS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5162dca has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExperimentalLogs( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXPERIMENTALLOGS, value);
	}

     /**
     * Get all values of property ExperimentalLogs as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExperimentalLogs_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXPERIMENTALLOGS);
	}
	
    /**
     * Get all values of property ExperimentalLogs as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExperimentalLogs_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPERIMENTALLOGS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExperimentalLogs as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExperimentalLogs_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXPERIMENTALLOGS);
	}

    /**
     * Get all values of property ExperimentalLogs as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExperimentalLogs_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXPERIMENTALLOGS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExperimentalLogs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllExperimentalLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXPERIMENTALLOGS, Thing.class);
	}
	
    /**
     * Get all values of property ExperimentalLogs as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllExperimentalLogs_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPERIMENTALLOGS, Thing.class);
	}

    /**
     * Get all values of property ExperimentalLogs     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllExperimentalLogs() {
		return Base.getAll(this.model, this.getResource(), EXPERIMENTALLOGS, Thing.class);
	}

    /**
     * Get all values of property ExperimentalLogs as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllExperimentalLogs_as() {
		return Base.getAll_as(this.model, this.getResource(), EXPERIMENTALLOGS, Thing.class);
	}
 
    /**
     * Adds a value to property ExperimentalLogs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExperimentalLogs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXPERIMENTALLOGS, value);
	}
	
    /**
     * Adds a value to property ExperimentalLogs as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExperimentalLogs( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXPERIMENTALLOGS, value);
	}
    /**
     * Adds a value to property ExperimentalLogs from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExperimentalLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EXPERIMENTALLOGS, value);
	}
	
    /**
     * Adds a value to property ExperimentalLogs from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExperimentalLogs(Thing value) {
		Base.add(this.model, this.getResource(), EXPERIMENTALLOGS, value);
	}
  

    /**
     * Sets a value of property ExperimentalLogs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExperimentalLogs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXPERIMENTALLOGS, value);
	}
	
    /**
     * Sets a value of property ExperimentalLogs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExperimentalLogs( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXPERIMENTALLOGS, value);
	}
    /**
     * Sets a value of property ExperimentalLogs from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExperimentalLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EXPERIMENTALLOGS, value);
	}
	
    /**
     * Sets a value of property ExperimentalLogs from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExperimentalLogs(Thing value) {
		Base.set(this.model, this.getResource(), EXPERIMENTALLOGS, value);
	}
  


    /**
     * Removes a value of property ExperimentalLogs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExperimentalLogs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXPERIMENTALLOGS, value);
	}
	
    /**
     * Removes a value of property ExperimentalLogs as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExperimentalLogs( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXPERIMENTALLOGS, value);
	}
    /**
     * Removes a value of property ExperimentalLogs given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExperimentalLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EXPERIMENTALLOGS, value);
	}
	
    /**
     * Removes a value of property ExperimentalLogs given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExperimentalLogs(Thing value) {
		Base.remove(this.model, this.getResource(), EXPERIMENTALLOGS, value);
	}
  
    /**
     * Removes all values of property ExperimentalLogs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExperimentalLogs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXPERIMENTALLOGS);
	}
	
    /**
     * Removes all values of property ExperimentalLogs	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExperimentalLogs() {
		Base.removeAll(this.model, this.getResource(), EXPERIMENTALLOGS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3962c1a2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExperimentalWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXPERIMENTALWATERSOLUBILITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3962c1a2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExperimentalWaterSolubility() {
		return Base.has(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3962c1a2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExperimentalWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXPERIMENTALWATERSOLUBILITY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3962c1a2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExperimentalWaterSolubility( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY, value);
	}

     /**
     * Get all values of property ExperimentalWaterSolubility as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExperimentalWaterSolubility_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXPERIMENTALWATERSOLUBILITY);
	}
	
    /**
     * Get all values of property ExperimentalWaterSolubility as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExperimentalWaterSolubility_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPERIMENTALWATERSOLUBILITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExperimentalWaterSolubility as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExperimentalWaterSolubility_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY);
	}

    /**
     * Get all values of property ExperimentalWaterSolubility as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExperimentalWaterSolubility_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExperimentalWaterSolubility     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllExperimentalWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXPERIMENTALWATERSOLUBILITY, Thing.class);
	}
	
    /**
     * Get all values of property ExperimentalWaterSolubility as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllExperimentalWaterSolubility_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPERIMENTALWATERSOLUBILITY, Thing.class);
	}

    /**
     * Get all values of property ExperimentalWaterSolubility     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllExperimentalWaterSolubility() {
		return Base.getAll(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY, Thing.class);
	}

    /**
     * Get all values of property ExperimentalWaterSolubility as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllExperimentalWaterSolubility_as() {
		return Base.getAll_as(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY, Thing.class);
	}
 
    /**
     * Adds a value to property ExperimentalWaterSolubility as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExperimentalWaterSolubility( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXPERIMENTALWATERSOLUBILITY, value);
	}
	
    /**
     * Adds a value to property ExperimentalWaterSolubility as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExperimentalWaterSolubility( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY, value);
	}
    /**
     * Adds a value to property ExperimentalWaterSolubility from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExperimentalWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EXPERIMENTALWATERSOLUBILITY, value);
	}
	
    /**
     * Adds a value to property ExperimentalWaterSolubility from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExperimentalWaterSolubility(Thing value) {
		Base.add(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY, value);
	}
  

    /**
     * Sets a value of property ExperimentalWaterSolubility from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExperimentalWaterSolubility( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXPERIMENTALWATERSOLUBILITY, value);
	}
	
    /**
     * Sets a value of property ExperimentalWaterSolubility from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExperimentalWaterSolubility( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY, value);
	}
    /**
     * Sets a value of property ExperimentalWaterSolubility from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExperimentalWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EXPERIMENTALWATERSOLUBILITY, value);
	}
	
    /**
     * Sets a value of property ExperimentalWaterSolubility from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExperimentalWaterSolubility(Thing value) {
		Base.set(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY, value);
	}
  


    /**
     * Removes a value of property ExperimentalWaterSolubility as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExperimentalWaterSolubility( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXPERIMENTALWATERSOLUBILITY, value);
	}
	
    /**
     * Removes a value of property ExperimentalWaterSolubility as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExperimentalWaterSolubility( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY, value);
	}
    /**
     * Removes a value of property ExperimentalWaterSolubility given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExperimentalWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EXPERIMENTALWATERSOLUBILITY, value);
	}
	
    /**
     * Removes a value of property ExperimentalWaterSolubility given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExperimentalWaterSolubility(Thing value) {
		Base.remove(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY, value);
	}
  
    /**
     * Removes all values of property ExperimentalWaterSolubility     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExperimentalWaterSolubility( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXPERIMENTALWATERSOLUBILITY);
	}
	
    /**
     * Removes all values of property ExperimentalWaterSolubility	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExperimentalWaterSolubility() {
		Base.removeAll(this.model, this.getResource(), EXPERIMENTALWATERSOLUBILITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18eea0f9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFdaLabelFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FDALABELFILES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18eea0f9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFdaLabelFiles() {
		return Base.has(this.model, this.getResource(), FDALABELFILES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18eea0f9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFdaLabelFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FDALABELFILES, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18eea0f9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFdaLabelFiles( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FDALABELFILES, value);
	}

     /**
     * Get all values of property FdaLabelFiles as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFdaLabelFiles_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FDALABELFILES);
	}
	
    /**
     * Get all values of property FdaLabelFiles as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFdaLabelFiles_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FDALABELFILES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FdaLabelFiles as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFdaLabelFiles_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FDALABELFILES);
	}

    /**
     * Get all values of property FdaLabelFiles as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFdaLabelFiles_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FDALABELFILES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FdaLabelFiles     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFdaLabelFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FDALABELFILES, Thing.class);
	}
	
    /**
     * Get all values of property FdaLabelFiles as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFdaLabelFiles_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FDALABELFILES, Thing.class);
	}

    /**
     * Get all values of property FdaLabelFiles     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFdaLabelFiles() {
		return Base.getAll(this.model, this.getResource(), FDALABELFILES, Thing.class);
	}

    /**
     * Get all values of property FdaLabelFiles as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFdaLabelFiles_as() {
		return Base.getAll_as(this.model, this.getResource(), FDALABELFILES, Thing.class);
	}
 
    /**
     * Adds a value to property FdaLabelFiles as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFdaLabelFiles( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FDALABELFILES, value);
	}
	
    /**
     * Adds a value to property FdaLabelFiles as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFdaLabelFiles( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FDALABELFILES, value);
	}
    /**
     * Adds a value to property FdaLabelFiles from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFdaLabelFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, FDALABELFILES, value);
	}
	
    /**
     * Adds a value to property FdaLabelFiles from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFdaLabelFiles(Thing value) {
		Base.add(this.model, this.getResource(), FDALABELFILES, value);
	}
  

    /**
     * Sets a value of property FdaLabelFiles from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFdaLabelFiles( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FDALABELFILES, value);
	}
	
    /**
     * Sets a value of property FdaLabelFiles from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFdaLabelFiles( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FDALABELFILES, value);
	}
    /**
     * Sets a value of property FdaLabelFiles from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFdaLabelFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, FDALABELFILES, value);
	}
	
    /**
     * Sets a value of property FdaLabelFiles from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFdaLabelFiles(Thing value) {
		Base.set(this.model, this.getResource(), FDALABELFILES, value);
	}
  


    /**
     * Removes a value of property FdaLabelFiles as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFdaLabelFiles( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FDALABELFILES, value);
	}
	
    /**
     * Removes a value of property FdaLabelFiles as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFdaLabelFiles( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FDALABELFILES, value);
	}
    /**
     * Removes a value of property FdaLabelFiles given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFdaLabelFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, FDALABELFILES, value);
	}
	
    /**
     * Removes a value of property FdaLabelFiles given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFdaLabelFiles(Thing value) {
		Base.remove(this.model, this.getResource(), FDALABELFILES, value);
	}
  
    /**
     * Removes all values of property FdaLabelFiles     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFdaLabelFiles( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FDALABELFILES);
	}
	
    /**
     * Removes all values of property FdaLabelFiles	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFdaLabelFiles() {
		Base.removeAll(this.model, this.getResource(), FDALABELFILES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f836b2e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFoodInteraction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOODINTERACTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f836b2e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFoodInteraction() {
		return Base.has(this.model, this.getResource(), FOODINTERACTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f836b2e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFoodInteraction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOODINTERACTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f836b2e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFoodInteraction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOODINTERACTION, value);
	}

     /**
     * Get all values of property FoodInteraction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFoodInteraction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOODINTERACTION);
	}
	
    /**
     * Get all values of property FoodInteraction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFoodInteraction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOODINTERACTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FoodInteraction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFoodInteraction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOODINTERACTION);
	}

    /**
     * Get all values of property FoodInteraction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFoodInteraction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOODINTERACTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FoodInteraction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFoodInteraction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOODINTERACTION, Thing.class);
	}
	
    /**
     * Get all values of property FoodInteraction as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFoodInteraction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOODINTERACTION, Thing.class);
	}

    /**
     * Get all values of property FoodInteraction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFoodInteraction() {
		return Base.getAll(this.model, this.getResource(), FOODINTERACTION, Thing.class);
	}

    /**
     * Get all values of property FoodInteraction as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFoodInteraction_as() {
		return Base.getAll_as(this.model, this.getResource(), FOODINTERACTION, Thing.class);
	}
 
    /**
     * Adds a value to property FoodInteraction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFoodInteraction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOODINTERACTION, value);
	}
	
    /**
     * Adds a value to property FoodInteraction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFoodInteraction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOODINTERACTION, value);
	}
    /**
     * Adds a value to property FoodInteraction from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFoodInteraction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, FOODINTERACTION, value);
	}
	
    /**
     * Adds a value to property FoodInteraction from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFoodInteraction(Thing value) {
		Base.add(this.model, this.getResource(), FOODINTERACTION, value);
	}
  

    /**
     * Sets a value of property FoodInteraction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFoodInteraction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOODINTERACTION, value);
	}
	
    /**
     * Sets a value of property FoodInteraction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFoodInteraction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOODINTERACTION, value);
	}
    /**
     * Sets a value of property FoodInteraction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFoodInteraction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, FOODINTERACTION, value);
	}
	
    /**
     * Sets a value of property FoodInteraction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFoodInteraction(Thing value) {
		Base.set(this.model, this.getResource(), FOODINTERACTION, value);
	}
  


    /**
     * Removes a value of property FoodInteraction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFoodInteraction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOODINTERACTION, value);
	}
	
    /**
     * Removes a value of property FoodInteraction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFoodInteraction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOODINTERACTION, value);
	}
    /**
     * Removes a value of property FoodInteraction given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFoodInteraction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, FOODINTERACTION, value);
	}
	
    /**
     * Removes a value of property FoodInteraction given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFoodInteraction(Thing value) {
		Base.remove(this.model, this.getResource(), FOODINTERACTION, value);
	}
  
    /**
     * Removes all values of property FoodInteraction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFoodInteraction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOODINTERACTION);
	}
	
    /**
     * Removes all values of property FoodInteraction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFoodInteraction() {
		Base.removeAll(this.model, this.getResource(), FOODINTERACTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b9d640 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenatlasId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENATLASID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b9d640 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenatlasId() {
		return Base.has(this.model, this.getResource(), GENATLASID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b9d640 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenatlasId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENATLASID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b9d640 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenatlasId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENATLASID, value);
	}

     /**
     * Get all values of property GenatlasId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenatlasId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENATLASID);
	}
	
    /**
     * Get all values of property GenatlasId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenatlasId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENATLASID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GenatlasId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenatlasId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENATLASID);
	}

    /**
     * Get all values of property GenatlasId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenatlasId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENATLASID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GenatlasId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGenatlasId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENATLASID, Thing.class);
	}
	
    /**
     * Get all values of property GenatlasId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGenatlasId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENATLASID, Thing.class);
	}

    /**
     * Get all values of property GenatlasId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGenatlasId() {
		return Base.getAll(this.model, this.getResource(), GENATLASID, Thing.class);
	}

    /**
     * Get all values of property GenatlasId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGenatlasId_as() {
		return Base.getAll_as(this.model, this.getResource(), GENATLASID, Thing.class);
	}
 
    /**
     * Adds a value to property GenatlasId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenatlasId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENATLASID, value);
	}
	
    /**
     * Adds a value to property GenatlasId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenatlasId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENATLASID, value);
	}
    /**
     * Adds a value to property GenatlasId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenatlasId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENATLASID, value);
	}
	
    /**
     * Adds a value to property GenatlasId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenatlasId(Thing value) {
		Base.add(this.model, this.getResource(), GENATLASID, value);
	}
  

    /**
     * Sets a value of property GenatlasId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenatlasId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENATLASID, value);
	}
	
    /**
     * Sets a value of property GenatlasId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenatlasId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENATLASID, value);
	}
    /**
     * Sets a value of property GenatlasId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenatlasId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENATLASID, value);
	}
	
    /**
     * Sets a value of property GenatlasId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenatlasId(Thing value) {
		Base.set(this.model, this.getResource(), GENATLASID, value);
	}
  


    /**
     * Removes a value of property GenatlasId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenatlasId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENATLASID, value);
	}
	
    /**
     * Removes a value of property GenatlasId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenatlasId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENATLASID, value);
	}
    /**
     * Removes a value of property GenatlasId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenatlasId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENATLASID, value);
	}
	
    /**
     * Removes a value of property GenatlasId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenatlasId(Thing value) {
		Base.remove(this.model, this.getResource(), GENATLASID, value);
	}
  
    /**
     * Removes all values of property GenatlasId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenatlasId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENATLASID);
	}
	
    /**
     * Removes all values of property GenatlasId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenatlasId() {
		Base.removeAll(this.model, this.getResource(), GENATLASID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@532454e9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenbankId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENBANKID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@532454e9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenbankId() {
		return Base.has(this.model, this.getResource(), GENBANKID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@532454e9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenbankId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENBANKID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@532454e9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenbankId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENBANKID, value);
	}

     /**
     * Get all values of property GenbankId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenbankId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENBANKID);
	}
	
    /**
     * Get all values of property GenbankId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenbankId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENBANKID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GenbankId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenbankId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENBANKID);
	}

    /**
     * Get all values of property GenbankId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenbankId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENBANKID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GenbankId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGenbankId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENBANKID, Thing.class);
	}
	
    /**
     * Get all values of property GenbankId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGenbankId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENBANKID, Thing.class);
	}

    /**
     * Get all values of property GenbankId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGenbankId() {
		return Base.getAll(this.model, this.getResource(), GENBANKID, Thing.class);
	}

    /**
     * Get all values of property GenbankId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGenbankId_as() {
		return Base.getAll_as(this.model, this.getResource(), GENBANKID, Thing.class);
	}
 
    /**
     * Adds a value to property GenbankId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenbankId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENBANKID, value);
	}
	
    /**
     * Adds a value to property GenbankId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenbankId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENBANKID, value);
	}
    /**
     * Adds a value to property GenbankId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenbankId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENBANKID, value);
	}
	
    /**
     * Adds a value to property GenbankId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenbankId(Thing value) {
		Base.add(this.model, this.getResource(), GENBANKID, value);
	}
  

    /**
     * Sets a value of property GenbankId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenbankId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENBANKID, value);
	}
	
    /**
     * Sets a value of property GenbankId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenbankId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENBANKID, value);
	}
    /**
     * Sets a value of property GenbankId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenbankId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENBANKID, value);
	}
	
    /**
     * Sets a value of property GenbankId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenbankId(Thing value) {
		Base.set(this.model, this.getResource(), GENBANKID, value);
	}
  


    /**
     * Removes a value of property GenbankId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenbankId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENBANKID, value);
	}
	
    /**
     * Removes a value of property GenbankId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenbankId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENBANKID, value);
	}
    /**
     * Removes a value of property GenbankId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenbankId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENBANKID, value);
	}
	
    /**
     * Removes a value of property GenbankId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenbankId(Thing value) {
		Base.remove(this.model, this.getResource(), GENBANKID, value);
	}
  
    /**
     * Removes all values of property GenbankId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenbankId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENBANKID);
	}
	
    /**
     * Removes all values of property GenbankId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenbankId() {
		Base.removeAll(this.model, this.getResource(), GENBANKID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90fbb84 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenbankIdGene(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENBANKIDGENE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90fbb84 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenbankIdGene() {
		return Base.has(this.model, this.getResource(), GENBANKIDGENE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90fbb84 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenbankIdGene(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENBANKIDGENE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90fbb84 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenbankIdGene( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENBANKIDGENE, value);
	}

     /**
     * Get all values of property GenbankIdGene as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdGene_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENBANKIDGENE);
	}
	
    /**
     * Get all values of property GenbankIdGene as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdGene_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENBANKIDGENE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GenbankIdGene as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdGene_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENBANKIDGENE);
	}

    /**
     * Get all values of property GenbankIdGene as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdGene_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENBANKIDGENE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GenbankIdGene     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGenbankIdGene(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENBANKIDGENE, Thing.class);
	}
	
    /**
     * Get all values of property GenbankIdGene as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGenbankIdGene_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENBANKIDGENE, Thing.class);
	}

    /**
     * Get all values of property GenbankIdGene     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGenbankIdGene() {
		return Base.getAll(this.model, this.getResource(), GENBANKIDGENE, Thing.class);
	}

    /**
     * Get all values of property GenbankIdGene as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGenbankIdGene_as() {
		return Base.getAll_as(this.model, this.getResource(), GENBANKIDGENE, Thing.class);
	}
 
    /**
     * Adds a value to property GenbankIdGene as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenbankIdGene( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENBANKIDGENE, value);
	}
	
    /**
     * Adds a value to property GenbankIdGene as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenbankIdGene( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENBANKIDGENE, value);
	}
    /**
     * Adds a value to property GenbankIdGene from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenbankIdGene(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENBANKIDGENE, value);
	}
	
    /**
     * Adds a value to property GenbankIdGene from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenbankIdGene(Thing value) {
		Base.add(this.model, this.getResource(), GENBANKIDGENE, value);
	}
  

    /**
     * Sets a value of property GenbankIdGene from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenbankIdGene( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENBANKIDGENE, value);
	}
	
    /**
     * Sets a value of property GenbankIdGene from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenbankIdGene( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENBANKIDGENE, value);
	}
    /**
     * Sets a value of property GenbankIdGene from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenbankIdGene(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENBANKIDGENE, value);
	}
	
    /**
     * Sets a value of property GenbankIdGene from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenbankIdGene(Thing value) {
		Base.set(this.model, this.getResource(), GENBANKIDGENE, value);
	}
  


    /**
     * Removes a value of property GenbankIdGene as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenbankIdGene( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENBANKIDGENE, value);
	}
	
    /**
     * Removes a value of property GenbankIdGene as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenbankIdGene( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENBANKIDGENE, value);
	}
    /**
     * Removes a value of property GenbankIdGene given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenbankIdGene(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENBANKIDGENE, value);
	}
	
    /**
     * Removes a value of property GenbankIdGene given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenbankIdGene(Thing value) {
		Base.remove(this.model, this.getResource(), GENBANKIDGENE, value);
	}
  
    /**
     * Removes all values of property GenbankIdGene     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenbankIdGene( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENBANKIDGENE);
	}
	
    /**
     * Removes all values of property GenbankIdGene	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenbankIdGene() {
		Base.removeAll(this.model, this.getResource(), GENBANKIDGENE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1177bdb1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenbankIdGenePage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENBANKIDGENEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1177bdb1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenbankIdGenePage() {
		return Base.has(this.model, this.getResource(), GENBANKIDGENEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1177bdb1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenbankIdGenePage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENBANKIDGENEPAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1177bdb1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenbankIdGenePage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENBANKIDGENEPAGE, value);
	}

     /**
     * Get all values of property GenbankIdGenePage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdGenePage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENBANKIDGENEPAGE);
	}
	
    /**
     * Get all values of property GenbankIdGenePage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdGenePage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENBANKIDGENEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GenbankIdGenePage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdGenePage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENBANKIDGENEPAGE);
	}

    /**
     * Get all values of property GenbankIdGenePage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdGenePage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENBANKIDGENEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GenbankIdGenePage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGenbankIdGenePage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENBANKIDGENEPAGE, Thing.class);
	}
	
    /**
     * Get all values of property GenbankIdGenePage as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGenbankIdGenePage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENBANKIDGENEPAGE, Thing.class);
	}

    /**
     * Get all values of property GenbankIdGenePage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGenbankIdGenePage() {
		return Base.getAll(this.model, this.getResource(), GENBANKIDGENEPAGE, Thing.class);
	}

    /**
     * Get all values of property GenbankIdGenePage as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGenbankIdGenePage_as() {
		return Base.getAll_as(this.model, this.getResource(), GENBANKIDGENEPAGE, Thing.class);
	}
 
    /**
     * Adds a value to property GenbankIdGenePage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenbankIdGenePage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENBANKIDGENEPAGE, value);
	}
	
    /**
     * Adds a value to property GenbankIdGenePage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenbankIdGenePage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENBANKIDGENEPAGE, value);
	}
    /**
     * Adds a value to property GenbankIdGenePage from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenbankIdGenePage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENBANKIDGENEPAGE, value);
	}
	
    /**
     * Adds a value to property GenbankIdGenePage from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenbankIdGenePage(Thing value) {
		Base.add(this.model, this.getResource(), GENBANKIDGENEPAGE, value);
	}
  

    /**
     * Sets a value of property GenbankIdGenePage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenbankIdGenePage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENBANKIDGENEPAGE, value);
	}
	
    /**
     * Sets a value of property GenbankIdGenePage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenbankIdGenePage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENBANKIDGENEPAGE, value);
	}
    /**
     * Sets a value of property GenbankIdGenePage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenbankIdGenePage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENBANKIDGENEPAGE, value);
	}
	
    /**
     * Sets a value of property GenbankIdGenePage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenbankIdGenePage(Thing value) {
		Base.set(this.model, this.getResource(), GENBANKIDGENEPAGE, value);
	}
  


    /**
     * Removes a value of property GenbankIdGenePage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenbankIdGenePage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENBANKIDGENEPAGE, value);
	}
	
    /**
     * Removes a value of property GenbankIdGenePage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenbankIdGenePage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENBANKIDGENEPAGE, value);
	}
    /**
     * Removes a value of property GenbankIdGenePage given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenbankIdGenePage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENBANKIDGENEPAGE, value);
	}
	
    /**
     * Removes a value of property GenbankIdGenePage given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenbankIdGenePage(Thing value) {
		Base.remove(this.model, this.getResource(), GENBANKIDGENEPAGE, value);
	}
  
    /**
     * Removes all values of property GenbankIdGenePage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenbankIdGenePage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENBANKIDGENEPAGE);
	}
	
    /**
     * Removes all values of property GenbankIdGenePage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenbankIdGenePage() {
		Base.removeAll(this.model, this.getResource(), GENBANKIDGENEPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@470c6851 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenbankIdProtein(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENBANKIDPROTEIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@470c6851 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenbankIdProtein() {
		return Base.has(this.model, this.getResource(), GENBANKIDPROTEIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@470c6851 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenbankIdProtein(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENBANKIDPROTEIN, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@470c6851 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenbankIdProtein( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENBANKIDPROTEIN, value);
	}

     /**
     * Get all values of property GenbankIdProtein as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdProtein_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENBANKIDPROTEIN);
	}
	
    /**
     * Get all values of property GenbankIdProtein as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdProtein_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENBANKIDPROTEIN, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GenbankIdProtein as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdProtein_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENBANKIDPROTEIN);
	}

    /**
     * Get all values of property GenbankIdProtein as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdProtein_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENBANKIDPROTEIN, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GenbankIdProtein     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGenbankIdProtein(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENBANKIDPROTEIN, Thing.class);
	}
	
    /**
     * Get all values of property GenbankIdProtein as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGenbankIdProtein_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENBANKIDPROTEIN, Thing.class);
	}

    /**
     * Get all values of property GenbankIdProtein     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGenbankIdProtein() {
		return Base.getAll(this.model, this.getResource(), GENBANKIDPROTEIN, Thing.class);
	}

    /**
     * Get all values of property GenbankIdProtein as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGenbankIdProtein_as() {
		return Base.getAll_as(this.model, this.getResource(), GENBANKIDPROTEIN, Thing.class);
	}
 
    /**
     * Adds a value to property GenbankIdProtein as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenbankIdProtein( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENBANKIDPROTEIN, value);
	}
	
    /**
     * Adds a value to property GenbankIdProtein as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenbankIdProtein( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENBANKIDPROTEIN, value);
	}
    /**
     * Adds a value to property GenbankIdProtein from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenbankIdProtein(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENBANKIDPROTEIN, value);
	}
	
    /**
     * Adds a value to property GenbankIdProtein from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenbankIdProtein(Thing value) {
		Base.add(this.model, this.getResource(), GENBANKIDPROTEIN, value);
	}
  

    /**
     * Sets a value of property GenbankIdProtein from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenbankIdProtein( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENBANKIDPROTEIN, value);
	}
	
    /**
     * Sets a value of property GenbankIdProtein from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenbankIdProtein( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENBANKIDPROTEIN, value);
	}
    /**
     * Sets a value of property GenbankIdProtein from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenbankIdProtein(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENBANKIDPROTEIN, value);
	}
	
    /**
     * Sets a value of property GenbankIdProtein from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenbankIdProtein(Thing value) {
		Base.set(this.model, this.getResource(), GENBANKIDPROTEIN, value);
	}
  


    /**
     * Removes a value of property GenbankIdProtein as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenbankIdProtein( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENBANKIDPROTEIN, value);
	}
	
    /**
     * Removes a value of property GenbankIdProtein as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenbankIdProtein( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENBANKIDPROTEIN, value);
	}
    /**
     * Removes a value of property GenbankIdProtein given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenbankIdProtein(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENBANKIDPROTEIN, value);
	}
	
    /**
     * Removes a value of property GenbankIdProtein given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenbankIdProtein(Thing value) {
		Base.remove(this.model, this.getResource(), GENBANKIDPROTEIN, value);
	}
  
    /**
     * Removes all values of property GenbankIdProtein     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenbankIdProtein( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENBANKIDPROTEIN);
	}
	
    /**
     * Removes all values of property GenbankIdProtein	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenbankIdProtein() {
		Base.removeAll(this.model, this.getResource(), GENBANKIDPROTEIN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23d8fa8d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenbankIdProteinPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENBANKIDPROTEINPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23d8fa8d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenbankIdProteinPage() {
		return Base.has(this.model, this.getResource(), GENBANKIDPROTEINPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23d8fa8d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenbankIdProteinPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENBANKIDPROTEINPAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23d8fa8d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenbankIdProteinPage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENBANKIDPROTEINPAGE, value);
	}

     /**
     * Get all values of property GenbankIdProteinPage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdProteinPage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENBANKIDPROTEINPAGE);
	}
	
    /**
     * Get all values of property GenbankIdProteinPage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdProteinPage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENBANKIDPROTEINPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GenbankIdProteinPage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdProteinPage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENBANKIDPROTEINPAGE);
	}

    /**
     * Get all values of property GenbankIdProteinPage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenbankIdProteinPage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENBANKIDPROTEINPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GenbankIdProteinPage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGenbankIdProteinPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENBANKIDPROTEINPAGE, Thing.class);
	}
	
    /**
     * Get all values of property GenbankIdProteinPage as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGenbankIdProteinPage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENBANKIDPROTEINPAGE, Thing.class);
	}

    /**
     * Get all values of property GenbankIdProteinPage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGenbankIdProteinPage() {
		return Base.getAll(this.model, this.getResource(), GENBANKIDPROTEINPAGE, Thing.class);
	}

    /**
     * Get all values of property GenbankIdProteinPage as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGenbankIdProteinPage_as() {
		return Base.getAll_as(this.model, this.getResource(), GENBANKIDPROTEINPAGE, Thing.class);
	}
 
    /**
     * Adds a value to property GenbankIdProteinPage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenbankIdProteinPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENBANKIDPROTEINPAGE, value);
	}
	
    /**
     * Adds a value to property GenbankIdProteinPage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenbankIdProteinPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENBANKIDPROTEINPAGE, value);
	}
    /**
     * Adds a value to property GenbankIdProteinPage from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenbankIdProteinPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENBANKIDPROTEINPAGE, value);
	}
	
    /**
     * Adds a value to property GenbankIdProteinPage from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenbankIdProteinPage(Thing value) {
		Base.add(this.model, this.getResource(), GENBANKIDPROTEINPAGE, value);
	}
  

    /**
     * Sets a value of property GenbankIdProteinPage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenbankIdProteinPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENBANKIDPROTEINPAGE, value);
	}
	
    /**
     * Sets a value of property GenbankIdProteinPage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenbankIdProteinPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENBANKIDPROTEINPAGE, value);
	}
    /**
     * Sets a value of property GenbankIdProteinPage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenbankIdProteinPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENBANKIDPROTEINPAGE, value);
	}
	
    /**
     * Sets a value of property GenbankIdProteinPage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenbankIdProteinPage(Thing value) {
		Base.set(this.model, this.getResource(), GENBANKIDPROTEINPAGE, value);
	}
  


    /**
     * Removes a value of property GenbankIdProteinPage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenbankIdProteinPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENBANKIDPROTEINPAGE, value);
	}
	
    /**
     * Removes a value of property GenbankIdProteinPage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenbankIdProteinPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENBANKIDPROTEINPAGE, value);
	}
    /**
     * Removes a value of property GenbankIdProteinPage given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenbankIdProteinPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENBANKIDPROTEINPAGE, value);
	}
	
    /**
     * Removes a value of property GenbankIdProteinPage given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenbankIdProteinPage(Thing value) {
		Base.remove(this.model, this.getResource(), GENBANKIDPROTEINPAGE, value);
	}
  
    /**
     * Removes all values of property GenbankIdProteinPage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenbankIdProteinPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENBANKIDPROTEINPAGE);
	}
	
    /**
     * Removes all values of property GenbankIdProteinPage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenbankIdProteinPage() {
		Base.removeAll(this.model, this.getResource(), GENBANKIDPROTEINPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@771260ab has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGeneName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@771260ab has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGeneName() {
		return Base.has(this.model, this.getResource(), GENENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@771260ab has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGeneName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENENAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@771260ab has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGeneName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENENAME, value);
	}

     /**
     * Get all values of property GeneName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENENAME);
	}
	
    /**
     * Get all values of property GeneName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENENAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GeneName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENENAME);
	}

    /**
     * Get all values of property GeneName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENENAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GeneName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGeneName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENENAME, Thing.class);
	}
	
    /**
     * Get all values of property GeneName as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGeneName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENENAME, Thing.class);
	}

    /**
     * Get all values of property GeneName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGeneName() {
		return Base.getAll(this.model, this.getResource(), GENENAME, Thing.class);
	}

    /**
     * Get all values of property GeneName as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGeneName_as() {
		return Base.getAll_as(this.model, this.getResource(), GENENAME, Thing.class);
	}
 
    /**
     * Adds a value to property GeneName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGeneName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENENAME, value);
	}
	
    /**
     * Adds a value to property GeneName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGeneName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENENAME, value);
	}
    /**
     * Adds a value to property GeneName from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGeneName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENENAME, value);
	}
	
    /**
     * Adds a value to property GeneName from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGeneName(Thing value) {
		Base.add(this.model, this.getResource(), GENENAME, value);
	}
  

    /**
     * Sets a value of property GeneName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGeneName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENENAME, value);
	}
	
    /**
     * Sets a value of property GeneName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGeneName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENENAME, value);
	}
    /**
     * Sets a value of property GeneName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGeneName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENENAME, value);
	}
	
    /**
     * Sets a value of property GeneName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGeneName(Thing value) {
		Base.set(this.model, this.getResource(), GENENAME, value);
	}
  


    /**
     * Removes a value of property GeneName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGeneName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENENAME, value);
	}
	
    /**
     * Removes a value of property GeneName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGeneName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENENAME, value);
	}
    /**
     * Removes a value of property GeneName given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGeneName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENENAME, value);
	}
	
    /**
     * Removes a value of property GeneName given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGeneName(Thing value) {
		Base.remove(this.model, this.getResource(), GENENAME, value);
	}
  
    /**
     * Removes all values of property GeneName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGeneName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENENAME);
	}
	
    /**
     * Removes all values of property GeneName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGeneName() {
		Base.removeAll(this.model, this.getResource(), GENENAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@354d4f59 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGeneSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENESEQUENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@354d4f59 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGeneSequence() {
		return Base.has(this.model, this.getResource(), GENESEQUENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@354d4f59 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGeneSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENESEQUENCE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@354d4f59 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGeneSequence( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENESEQUENCE, value);
	}

     /**
     * Get all values of property GeneSequence as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneSequence_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENESEQUENCE);
	}
	
    /**
     * Get all values of property GeneSequence as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneSequence_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENESEQUENCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GeneSequence as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneSequence_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENESEQUENCE);
	}

    /**
     * Get all values of property GeneSequence as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneSequence_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENESEQUENCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GeneSequence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGeneSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENESEQUENCE, Thing.class);
	}
	
    /**
     * Get all values of property GeneSequence as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGeneSequence_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENESEQUENCE, Thing.class);
	}

    /**
     * Get all values of property GeneSequence     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGeneSequence() {
		return Base.getAll(this.model, this.getResource(), GENESEQUENCE, Thing.class);
	}

    /**
     * Get all values of property GeneSequence as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGeneSequence_as() {
		return Base.getAll_as(this.model, this.getResource(), GENESEQUENCE, Thing.class);
	}
 
    /**
     * Adds a value to property GeneSequence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGeneSequence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENESEQUENCE, value);
	}
	
    /**
     * Adds a value to property GeneSequence as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGeneSequence( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENESEQUENCE, value);
	}
    /**
     * Adds a value to property GeneSequence from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGeneSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENESEQUENCE, value);
	}
	
    /**
     * Adds a value to property GeneSequence from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGeneSequence(Thing value) {
		Base.add(this.model, this.getResource(), GENESEQUENCE, value);
	}
  

    /**
     * Sets a value of property GeneSequence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGeneSequence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENESEQUENCE, value);
	}
	
    /**
     * Sets a value of property GeneSequence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGeneSequence( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENESEQUENCE, value);
	}
    /**
     * Sets a value of property GeneSequence from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGeneSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENESEQUENCE, value);
	}
	
    /**
     * Sets a value of property GeneSequence from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGeneSequence(Thing value) {
		Base.set(this.model, this.getResource(), GENESEQUENCE, value);
	}
  


    /**
     * Removes a value of property GeneSequence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGeneSequence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENESEQUENCE, value);
	}
	
    /**
     * Removes a value of property GeneSequence as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGeneSequence( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENESEQUENCE, value);
	}
    /**
     * Removes a value of property GeneSequence given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGeneSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENESEQUENCE, value);
	}
	
    /**
     * Removes a value of property GeneSequence given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGeneSequence(Thing value) {
		Base.remove(this.model, this.getResource(), GENESEQUENCE, value);
	}
  
    /**
     * Removes all values of property GeneSequence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGeneSequence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENESEQUENCE);
	}
	
    /**
     * Removes all values of property GeneSequence	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGeneSequence() {
		Base.removeAll(this.model, this.getResource(), GENESEQUENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1085429c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenecardId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENECARDID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1085429c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenecardId() {
		return Base.has(this.model, this.getResource(), GENECARDID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1085429c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenecardId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENECARDID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1085429c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenecardId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENECARDID, value);
	}

     /**
     * Get all values of property GenecardId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenecardId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENECARDID);
	}
	
    /**
     * Get all values of property GenecardId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenecardId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENECARDID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GenecardId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenecardId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENECARDID);
	}

    /**
     * Get all values of property GenecardId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenecardId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENECARDID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GenecardId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGenecardId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENECARDID, Thing.class);
	}
	
    /**
     * Get all values of property GenecardId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGenecardId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENECARDID, Thing.class);
	}

    /**
     * Get all values of property GenecardId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGenecardId() {
		return Base.getAll(this.model, this.getResource(), GENECARDID, Thing.class);
	}

    /**
     * Get all values of property GenecardId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGenecardId_as() {
		return Base.getAll_as(this.model, this.getResource(), GENECARDID, Thing.class);
	}
 
    /**
     * Adds a value to property GenecardId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenecardId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENECARDID, value);
	}
	
    /**
     * Adds a value to property GenecardId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenecardId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENECARDID, value);
	}
    /**
     * Adds a value to property GenecardId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenecardId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENECARDID, value);
	}
	
    /**
     * Adds a value to property GenecardId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenecardId(Thing value) {
		Base.add(this.model, this.getResource(), GENECARDID, value);
	}
  

    /**
     * Sets a value of property GenecardId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenecardId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENECARDID, value);
	}
	
    /**
     * Sets a value of property GenecardId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenecardId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENECARDID, value);
	}
    /**
     * Sets a value of property GenecardId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenecardId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENECARDID, value);
	}
	
    /**
     * Sets a value of property GenecardId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenecardId(Thing value) {
		Base.set(this.model, this.getResource(), GENECARDID, value);
	}
  


    /**
     * Removes a value of property GenecardId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenecardId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENECARDID, value);
	}
	
    /**
     * Removes a value of property GenecardId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenecardId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENECARDID, value);
	}
    /**
     * Removes a value of property GenecardId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenecardId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENECARDID, value);
	}
	
    /**
     * Removes a value of property GenecardId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenecardId(Thing value) {
		Base.remove(this.model, this.getResource(), GENECARDID, value);
	}
  
    /**
     * Removes all values of property GenecardId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenecardId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENECARDID);
	}
	
    /**
     * Removes all values of property GenecardId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenecardId() {
		Base.removeAll(this.model, this.getResource(), GENECARDID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@366b7c7e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGeneralFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENERALFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@366b7c7e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGeneralFunction() {
		return Base.has(this.model, this.getResource(), GENERALFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@366b7c7e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGeneralFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENERALFUNCTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@366b7c7e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGeneralFunction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENERALFUNCTION, value);
	}

     /**
     * Get all values of property GeneralFunction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneralFunction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENERALFUNCTION);
	}
	
    /**
     * Get all values of property GeneralFunction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneralFunction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERALFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GeneralFunction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneralFunction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENERALFUNCTION);
	}

    /**
     * Get all values of property GeneralFunction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneralFunction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENERALFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GeneralFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGeneralFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENERALFUNCTION, Thing.class);
	}
	
    /**
     * Get all values of property GeneralFunction as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGeneralFunction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERALFUNCTION, Thing.class);
	}

    /**
     * Get all values of property GeneralFunction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGeneralFunction() {
		return Base.getAll(this.model, this.getResource(), GENERALFUNCTION, Thing.class);
	}

    /**
     * Get all values of property GeneralFunction as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGeneralFunction_as() {
		return Base.getAll_as(this.model, this.getResource(), GENERALFUNCTION, Thing.class);
	}
 
    /**
     * Adds a value to property GeneralFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGeneralFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENERALFUNCTION, value);
	}
	
    /**
     * Adds a value to property GeneralFunction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGeneralFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENERALFUNCTION, value);
	}
    /**
     * Adds a value to property GeneralFunction from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGeneralFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENERALFUNCTION, value);
	}
	
    /**
     * Adds a value to property GeneralFunction from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGeneralFunction(Thing value) {
		Base.add(this.model, this.getResource(), GENERALFUNCTION, value);
	}
  

    /**
     * Sets a value of property GeneralFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGeneralFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENERALFUNCTION, value);
	}
	
    /**
     * Sets a value of property GeneralFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGeneralFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENERALFUNCTION, value);
	}
    /**
     * Sets a value of property GeneralFunction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGeneralFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENERALFUNCTION, value);
	}
	
    /**
     * Sets a value of property GeneralFunction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGeneralFunction(Thing value) {
		Base.set(this.model, this.getResource(), GENERALFUNCTION, value);
	}
  


    /**
     * Removes a value of property GeneralFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGeneralFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENERALFUNCTION, value);
	}
	
    /**
     * Removes a value of property GeneralFunction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGeneralFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENERALFUNCTION, value);
	}
    /**
     * Removes a value of property GeneralFunction given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGeneralFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENERALFUNCTION, value);
	}
	
    /**
     * Removes a value of property GeneralFunction given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGeneralFunction(Thing value) {
		Base.remove(this.model, this.getResource(), GENERALFUNCTION, value);
	}
  
    /**
     * Removes all values of property GeneralFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGeneralFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENERALFUNCTION);
	}
	
    /**
     * Removes all values of property GeneralFunction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGeneralFunction() {
		Base.removeAll(this.model, this.getResource(), GENERALFUNCTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2af53cd2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGeneralReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENERALREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2af53cd2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGeneralReference() {
		return Base.has(this.model, this.getResource(), GENERALREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2af53cd2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGeneralReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENERALREFERENCE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2af53cd2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGeneralReference( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENERALREFERENCE, value);
	}

     /**
     * Get all values of property GeneralReference as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneralReference_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENERALREFERENCE);
	}
	
    /**
     * Get all values of property GeneralReference as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneralReference_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERALREFERENCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GeneralReference as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneralReference_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENERALREFERENCE);
	}

    /**
     * Get all values of property GeneralReference as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneralReference_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENERALREFERENCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GeneralReference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGeneralReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENERALREFERENCE, Thing.class);
	}
	
    /**
     * Get all values of property GeneralReference as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGeneralReference_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERALREFERENCE, Thing.class);
	}

    /**
     * Get all values of property GeneralReference     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGeneralReference() {
		return Base.getAll(this.model, this.getResource(), GENERALREFERENCE, Thing.class);
	}

    /**
     * Get all values of property GeneralReference as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGeneralReference_as() {
		return Base.getAll_as(this.model, this.getResource(), GENERALREFERENCE, Thing.class);
	}
 
    /**
     * Adds a value to property GeneralReference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGeneralReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENERALREFERENCE, value);
	}
	
    /**
     * Adds a value to property GeneralReference as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGeneralReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENERALREFERENCE, value);
	}
    /**
     * Adds a value to property GeneralReference from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGeneralReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENERALREFERENCE, value);
	}
	
    /**
     * Adds a value to property GeneralReference from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGeneralReference(Thing value) {
		Base.add(this.model, this.getResource(), GENERALREFERENCE, value);
	}
  

    /**
     * Sets a value of property GeneralReference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGeneralReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENERALREFERENCE, value);
	}
	
    /**
     * Sets a value of property GeneralReference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGeneralReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENERALREFERENCE, value);
	}
    /**
     * Sets a value of property GeneralReference from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGeneralReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENERALREFERENCE, value);
	}
	
    /**
     * Sets a value of property GeneralReference from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGeneralReference(Thing value) {
		Base.set(this.model, this.getResource(), GENERALREFERENCE, value);
	}
  


    /**
     * Removes a value of property GeneralReference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGeneralReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENERALREFERENCE, value);
	}
	
    /**
     * Removes a value of property GeneralReference as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGeneralReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENERALREFERENCE, value);
	}
    /**
     * Removes a value of property GeneralReference given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGeneralReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENERALREFERENCE, value);
	}
	
    /**
     * Removes a value of property GeneralReference given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGeneralReference(Thing value) {
		Base.remove(this.model, this.getResource(), GENERALREFERENCE, value);
	}
  
    /**
     * Removes all values of property GeneralReference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGeneralReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENERALREFERENCE);
	}
	
    /**
     * Removes all values of property GeneralReference	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGeneralReference() {
		Base.removeAll(this.model, this.getResource(), GENERALREFERENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ced36b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenericName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENERICNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ced36b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenericName() {
		return Base.has(this.model, this.getResource(), GENERICNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ced36b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenericName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENERICNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ced36b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenericName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENERICNAME, value);
	}

     /**
     * Get all values of property GenericName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenericName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENERICNAME);
	}
	
    /**
     * Get all values of property GenericName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenericName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERICNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GenericName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenericName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENERICNAME);
	}

    /**
     * Get all values of property GenericName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenericName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENERICNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GenericName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGenericName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENERICNAME, Thing.class);
	}
	
    /**
     * Get all values of property GenericName as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGenericName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERICNAME, Thing.class);
	}

    /**
     * Get all values of property GenericName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGenericName() {
		return Base.getAll(this.model, this.getResource(), GENERICNAME, Thing.class);
	}

    /**
     * Get all values of property GenericName as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGenericName_as() {
		return Base.getAll_as(this.model, this.getResource(), GENERICNAME, Thing.class);
	}
 
    /**
     * Adds a value to property GenericName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenericName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENERICNAME, value);
	}
	
    /**
     * Adds a value to property GenericName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenericName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENERICNAME, value);
	}
    /**
     * Adds a value to property GenericName from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenericName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GENERICNAME, value);
	}
	
    /**
     * Adds a value to property GenericName from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenericName(Thing value) {
		Base.add(this.model, this.getResource(), GENERICNAME, value);
	}
  

    /**
     * Sets a value of property GenericName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenericName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENERICNAME, value);
	}
	
    /**
     * Sets a value of property GenericName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenericName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENERICNAME, value);
	}
    /**
     * Sets a value of property GenericName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenericName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GENERICNAME, value);
	}
	
    /**
     * Sets a value of property GenericName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenericName(Thing value) {
		Base.set(this.model, this.getResource(), GENERICNAME, value);
	}
  


    /**
     * Removes a value of property GenericName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenericName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENERICNAME, value);
	}
	
    /**
     * Removes a value of property GenericName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenericName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENERICNAME, value);
	}
    /**
     * Removes a value of property GenericName given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenericName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GENERICNAME, value);
	}
	
    /**
     * Removes a value of property GenericName given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenericName(Thing value) {
		Base.remove(this.model, this.getResource(), GENERICNAME, value);
	}
  
    /**
     * Removes all values of property GenericName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenericName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENERICNAME);
	}
	
    /**
     * Removes all values of property GenericName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenericName() {
		Base.removeAll(this.model, this.getResource(), GENERICNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c9c9fe7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGoClassificationComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GOCLASSIFICATIONCOMPONENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c9c9fe7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGoClassificationComponent() {
		return Base.has(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c9c9fe7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGoClassificationComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GOCLASSIFICATIONCOMPONENT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c9c9fe7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGoClassificationComponent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT, value);
	}

     /**
     * Get all values of property GoClassificationComponent as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationComponent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GOCLASSIFICATIONCOMPONENT);
	}
	
    /**
     * Get all values of property GoClassificationComponent as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationComponent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GOCLASSIFICATIONCOMPONENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GoClassificationComponent as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationComponent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT);
	}

    /**
     * Get all values of property GoClassificationComponent as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationComponent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GoClassificationComponent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGoClassificationComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GOCLASSIFICATIONCOMPONENT, Thing.class);
	}
	
    /**
     * Get all values of property GoClassificationComponent as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGoClassificationComponent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GOCLASSIFICATIONCOMPONENT, Thing.class);
	}

    /**
     * Get all values of property GoClassificationComponent     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGoClassificationComponent() {
		return Base.getAll(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT, Thing.class);
	}

    /**
     * Get all values of property GoClassificationComponent as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGoClassificationComponent_as() {
		return Base.getAll_as(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT, Thing.class);
	}
 
    /**
     * Adds a value to property GoClassificationComponent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGoClassificationComponent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GOCLASSIFICATIONCOMPONENT, value);
	}
	
    /**
     * Adds a value to property GoClassificationComponent as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGoClassificationComponent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT, value);
	}
    /**
     * Adds a value to property GoClassificationComponent from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGoClassificationComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GOCLASSIFICATIONCOMPONENT, value);
	}
	
    /**
     * Adds a value to property GoClassificationComponent from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGoClassificationComponent(Thing value) {
		Base.add(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT, value);
	}
  

    /**
     * Sets a value of property GoClassificationComponent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGoClassificationComponent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GOCLASSIFICATIONCOMPONENT, value);
	}
	
    /**
     * Sets a value of property GoClassificationComponent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGoClassificationComponent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT, value);
	}
    /**
     * Sets a value of property GoClassificationComponent from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGoClassificationComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GOCLASSIFICATIONCOMPONENT, value);
	}
	
    /**
     * Sets a value of property GoClassificationComponent from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGoClassificationComponent(Thing value) {
		Base.set(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT, value);
	}
  


    /**
     * Removes a value of property GoClassificationComponent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGoClassificationComponent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GOCLASSIFICATIONCOMPONENT, value);
	}
	
    /**
     * Removes a value of property GoClassificationComponent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGoClassificationComponent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT, value);
	}
    /**
     * Removes a value of property GoClassificationComponent given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGoClassificationComponent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GOCLASSIFICATIONCOMPONENT, value);
	}
	
    /**
     * Removes a value of property GoClassificationComponent given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGoClassificationComponent(Thing value) {
		Base.remove(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT, value);
	}
  
    /**
     * Removes all values of property GoClassificationComponent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGoClassificationComponent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GOCLASSIFICATIONCOMPONENT);
	}
	
    /**
     * Removes all values of property GoClassificationComponent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGoClassificationComponent() {
		Base.removeAll(this.model, this.getResource(), GOCLASSIFICATIONCOMPONENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26fcfde2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGoClassificationFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GOCLASSIFICATIONFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26fcfde2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGoClassificationFunction() {
		return Base.has(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26fcfde2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGoClassificationFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GOCLASSIFICATIONFUNCTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26fcfde2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGoClassificationFunction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION, value);
	}

     /**
     * Get all values of property GoClassificationFunction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationFunction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GOCLASSIFICATIONFUNCTION);
	}
	
    /**
     * Get all values of property GoClassificationFunction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationFunction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GOCLASSIFICATIONFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GoClassificationFunction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationFunction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION);
	}

    /**
     * Get all values of property GoClassificationFunction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationFunction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GoClassificationFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGoClassificationFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GOCLASSIFICATIONFUNCTION, Thing.class);
	}
	
    /**
     * Get all values of property GoClassificationFunction as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGoClassificationFunction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GOCLASSIFICATIONFUNCTION, Thing.class);
	}

    /**
     * Get all values of property GoClassificationFunction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGoClassificationFunction() {
		return Base.getAll(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION, Thing.class);
	}

    /**
     * Get all values of property GoClassificationFunction as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGoClassificationFunction_as() {
		return Base.getAll_as(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION, Thing.class);
	}
 
    /**
     * Adds a value to property GoClassificationFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGoClassificationFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GOCLASSIFICATIONFUNCTION, value);
	}
	
    /**
     * Adds a value to property GoClassificationFunction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGoClassificationFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION, value);
	}
    /**
     * Adds a value to property GoClassificationFunction from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGoClassificationFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GOCLASSIFICATIONFUNCTION, value);
	}
	
    /**
     * Adds a value to property GoClassificationFunction from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGoClassificationFunction(Thing value) {
		Base.add(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION, value);
	}
  

    /**
     * Sets a value of property GoClassificationFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGoClassificationFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GOCLASSIFICATIONFUNCTION, value);
	}
	
    /**
     * Sets a value of property GoClassificationFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGoClassificationFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION, value);
	}
    /**
     * Sets a value of property GoClassificationFunction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGoClassificationFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GOCLASSIFICATIONFUNCTION, value);
	}
	
    /**
     * Sets a value of property GoClassificationFunction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGoClassificationFunction(Thing value) {
		Base.set(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION, value);
	}
  


    /**
     * Removes a value of property GoClassificationFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGoClassificationFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GOCLASSIFICATIONFUNCTION, value);
	}
	
    /**
     * Removes a value of property GoClassificationFunction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGoClassificationFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION, value);
	}
    /**
     * Removes a value of property GoClassificationFunction given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGoClassificationFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GOCLASSIFICATIONFUNCTION, value);
	}
	
    /**
     * Removes a value of property GoClassificationFunction given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGoClassificationFunction(Thing value) {
		Base.remove(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION, value);
	}
  
    /**
     * Removes all values of property GoClassificationFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGoClassificationFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GOCLASSIFICATIONFUNCTION);
	}
	
    /**
     * Removes all values of property GoClassificationFunction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGoClassificationFunction() {
		Base.removeAll(this.model, this.getResource(), GOCLASSIFICATIONFUNCTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15f0ce11 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGoClassificationProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GOCLASSIFICATIONPROCESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15f0ce11 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGoClassificationProcess() {
		return Base.has(this.model, this.getResource(), GOCLASSIFICATIONPROCESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15f0ce11 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGoClassificationProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GOCLASSIFICATIONPROCESS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15f0ce11 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGoClassificationProcess( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GOCLASSIFICATIONPROCESS, value);
	}

     /**
     * Get all values of property GoClassificationProcess as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationProcess_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GOCLASSIFICATIONPROCESS);
	}
	
    /**
     * Get all values of property GoClassificationProcess as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationProcess_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GOCLASSIFICATIONPROCESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GoClassificationProcess as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationProcess_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GOCLASSIFICATIONPROCESS);
	}

    /**
     * Get all values of property GoClassificationProcess as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGoClassificationProcess_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GOCLASSIFICATIONPROCESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GoClassificationProcess     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllGoClassificationProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GOCLASSIFICATIONPROCESS, Thing.class);
	}
	
    /**
     * Get all values of property GoClassificationProcess as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllGoClassificationProcess_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GOCLASSIFICATIONPROCESS, Thing.class);
	}

    /**
     * Get all values of property GoClassificationProcess     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllGoClassificationProcess() {
		return Base.getAll(this.model, this.getResource(), GOCLASSIFICATIONPROCESS, Thing.class);
	}

    /**
     * Get all values of property GoClassificationProcess as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllGoClassificationProcess_as() {
		return Base.getAll_as(this.model, this.getResource(), GOCLASSIFICATIONPROCESS, Thing.class);
	}
 
    /**
     * Adds a value to property GoClassificationProcess as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGoClassificationProcess( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GOCLASSIFICATIONPROCESS, value);
	}
	
    /**
     * Adds a value to property GoClassificationProcess as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGoClassificationProcess( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GOCLASSIFICATIONPROCESS, value);
	}
    /**
     * Adds a value to property GoClassificationProcess from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGoClassificationProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GOCLASSIFICATIONPROCESS, value);
	}
	
    /**
     * Adds a value to property GoClassificationProcess from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGoClassificationProcess(Thing value) {
		Base.add(this.model, this.getResource(), GOCLASSIFICATIONPROCESS, value);
	}
  

    /**
     * Sets a value of property GoClassificationProcess from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGoClassificationProcess( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GOCLASSIFICATIONPROCESS, value);
	}
	
    /**
     * Sets a value of property GoClassificationProcess from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGoClassificationProcess( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GOCLASSIFICATIONPROCESS, value);
	}
    /**
     * Sets a value of property GoClassificationProcess from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGoClassificationProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GOCLASSIFICATIONPROCESS, value);
	}
	
    /**
     * Sets a value of property GoClassificationProcess from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGoClassificationProcess(Thing value) {
		Base.set(this.model, this.getResource(), GOCLASSIFICATIONPROCESS, value);
	}
  


    /**
     * Removes a value of property GoClassificationProcess as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGoClassificationProcess( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GOCLASSIFICATIONPROCESS, value);
	}
	
    /**
     * Removes a value of property GoClassificationProcess as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGoClassificationProcess( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GOCLASSIFICATIONPROCESS, value);
	}
    /**
     * Removes a value of property GoClassificationProcess given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGoClassificationProcess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GOCLASSIFICATIONPROCESS, value);
	}
	
    /**
     * Removes a value of property GoClassificationProcess given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGoClassificationProcess(Thing value) {
		Base.remove(this.model, this.getResource(), GOCLASSIFICATIONPROCESS, value);
	}
  
    /**
     * Removes all values of property GoClassificationProcess     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGoClassificationProcess( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GOCLASSIFICATIONPROCESS);
	}
	
    /**
     * Removes all values of property GoClassificationProcess	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGoClassificationProcess() {
		Base.removeAll(this.model, this.getResource(), GOCLASSIFICATIONPROCESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76e7d81d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHalfLife(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HALFLIFE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76e7d81d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHalfLife() {
		return Base.has(this.model, this.getResource(), HALFLIFE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76e7d81d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHalfLife(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HALFLIFE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76e7d81d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHalfLife( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HALFLIFE, value);
	}

     /**
     * Get all values of property HalfLife as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHalfLife_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HALFLIFE);
	}
	
    /**
     * Get all values of property HalfLife as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHalfLife_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HALFLIFE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HalfLife as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHalfLife_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HALFLIFE);
	}

    /**
     * Get all values of property HalfLife as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHalfLife_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HALFLIFE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HalfLife     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllHalfLife(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HALFLIFE, Thing.class);
	}
	
    /**
     * Get all values of property HalfLife as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllHalfLife_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HALFLIFE, Thing.class);
	}

    /**
     * Get all values of property HalfLife     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllHalfLife() {
		return Base.getAll(this.model, this.getResource(), HALFLIFE, Thing.class);
	}

    /**
     * Get all values of property HalfLife as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllHalfLife_as() {
		return Base.getAll_as(this.model, this.getResource(), HALFLIFE, Thing.class);
	}
 
    /**
     * Adds a value to property HalfLife as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHalfLife( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HALFLIFE, value);
	}
	
    /**
     * Adds a value to property HalfLife as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHalfLife( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HALFLIFE, value);
	}
    /**
     * Adds a value to property HalfLife from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHalfLife(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, HALFLIFE, value);
	}
	
    /**
     * Adds a value to property HalfLife from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHalfLife(Thing value) {
		Base.add(this.model, this.getResource(), HALFLIFE, value);
	}
  

    /**
     * Sets a value of property HalfLife from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHalfLife( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HALFLIFE, value);
	}
	
    /**
     * Sets a value of property HalfLife from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHalfLife( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HALFLIFE, value);
	}
    /**
     * Sets a value of property HalfLife from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHalfLife(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, HALFLIFE, value);
	}
	
    /**
     * Sets a value of property HalfLife from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHalfLife(Thing value) {
		Base.set(this.model, this.getResource(), HALFLIFE, value);
	}
  


    /**
     * Removes a value of property HalfLife as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHalfLife( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HALFLIFE, value);
	}
	
    /**
     * Removes a value of property HalfLife as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHalfLife( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HALFLIFE, value);
	}
    /**
     * Removes a value of property HalfLife given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHalfLife(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, HALFLIFE, value);
	}
	
    /**
     * Removes a value of property HalfLife given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHalfLife(Thing value) {
		Base.remove(this.model, this.getResource(), HALFLIFE, value);
	}
  
    /**
     * Removes all values of property HalfLife     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHalfLife( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HALFLIFE);
	}
	
    /**
     * Removes all values of property HalfLife	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHalfLife() {
		Base.removeAll(this.model, this.getResource(), HALFLIFE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3644db4b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHetId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HETID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3644db4b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHetId() {
		return Base.has(this.model, this.getResource(), HETID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3644db4b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHetId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HETID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3644db4b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHetId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HETID, value);
	}

     /**
     * Get all values of property HetId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHetId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HETID);
	}
	
    /**
     * Get all values of property HetId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHetId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HETID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HetId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHetId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HETID);
	}

    /**
     * Get all values of property HetId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHetId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HETID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HetId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllHetId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HETID, Thing.class);
	}
	
    /**
     * Get all values of property HetId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllHetId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HETID, Thing.class);
	}

    /**
     * Get all values of property HetId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllHetId() {
		return Base.getAll(this.model, this.getResource(), HETID, Thing.class);
	}

    /**
     * Get all values of property HetId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllHetId_as() {
		return Base.getAll_as(this.model, this.getResource(), HETID, Thing.class);
	}
 
    /**
     * Adds a value to property HetId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHetId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HETID, value);
	}
	
    /**
     * Adds a value to property HetId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHetId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HETID, value);
	}
    /**
     * Adds a value to property HetId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHetId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, HETID, value);
	}
	
    /**
     * Adds a value to property HetId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHetId(Thing value) {
		Base.add(this.model, this.getResource(), HETID, value);
	}
  

    /**
     * Sets a value of property HetId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHetId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HETID, value);
	}
	
    /**
     * Sets a value of property HetId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHetId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HETID, value);
	}
    /**
     * Sets a value of property HetId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHetId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, HETID, value);
	}
	
    /**
     * Sets a value of property HetId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHetId(Thing value) {
		Base.set(this.model, this.getResource(), HETID, value);
	}
  


    /**
     * Removes a value of property HetId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHetId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HETID, value);
	}
	
    /**
     * Removes a value of property HetId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHetId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HETID, value);
	}
    /**
     * Removes a value of property HetId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHetId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, HETID, value);
	}
	
    /**
     * Removes a value of property HetId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHetId(Thing value) {
		Base.remove(this.model, this.getResource(), HETID, value);
	}
  
    /**
     * Removes all values of property HetId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHetId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HETID);
	}
	
    /**
     * Removes all values of property HetId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHetId() {
		Base.removeAll(this.model, this.getResource(), HETID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34bd28c8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHgncId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HGNCID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34bd28c8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHgncId() {
		return Base.has(this.model, this.getResource(), HGNCID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34bd28c8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHgncId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HGNCID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34bd28c8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHgncId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HGNCID, value);
	}

     /**
     * Get all values of property HgncId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHgncId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HGNCID);
	}
	
    /**
     * Get all values of property HgncId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHgncId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HGNCID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HgncId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHgncId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HGNCID);
	}

    /**
     * Get all values of property HgncId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHgncId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HGNCID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HgncId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllHgncId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HGNCID, Thing.class);
	}
	
    /**
     * Get all values of property HgncId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllHgncId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HGNCID, Thing.class);
	}

    /**
     * Get all values of property HgncId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllHgncId() {
		return Base.getAll(this.model, this.getResource(), HGNCID, Thing.class);
	}

    /**
     * Get all values of property HgncId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllHgncId_as() {
		return Base.getAll_as(this.model, this.getResource(), HGNCID, Thing.class);
	}
 
    /**
     * Adds a value to property HgncId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHgncId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HGNCID, value);
	}
	
    /**
     * Adds a value to property HgncId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHgncId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HGNCID, value);
	}
    /**
     * Adds a value to property HgncId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHgncId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, HGNCID, value);
	}
	
    /**
     * Adds a value to property HgncId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHgncId(Thing value) {
		Base.add(this.model, this.getResource(), HGNCID, value);
	}
  

    /**
     * Sets a value of property HgncId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHgncId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HGNCID, value);
	}
	
    /**
     * Sets a value of property HgncId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHgncId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HGNCID, value);
	}
    /**
     * Sets a value of property HgncId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHgncId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, HGNCID, value);
	}
	
    /**
     * Sets a value of property HgncId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHgncId(Thing value) {
		Base.set(this.model, this.getResource(), HGNCID, value);
	}
  


    /**
     * Removes a value of property HgncId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHgncId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HGNCID, value);
	}
	
    /**
     * Removes a value of property HgncId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHgncId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HGNCID, value);
	}
    /**
     * Removes a value of property HgncId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHgncId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, HGNCID, value);
	}
	
    /**
     * Removes a value of property HgncId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHgncId(Thing value) {
		Base.remove(this.model, this.getResource(), HGNCID, value);
	}
  
    /**
     * Removes all values of property HgncId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHgncId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HGNCID);
	}
	
    /**
     * Removes all values of property HgncId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHgncId() {
		Base.removeAll(this.model, this.getResource(), HGNCID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2109b74 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHgncIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HGNCIDPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2109b74 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHgncIdPage() {
		return Base.has(this.model, this.getResource(), HGNCIDPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2109b74 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHgncIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HGNCIDPAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2109b74 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHgncIdPage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HGNCIDPAGE, value);
	}

     /**
     * Get all values of property HgncIdPage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHgncIdPage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HGNCIDPAGE);
	}
	
    /**
     * Get all values of property HgncIdPage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHgncIdPage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HGNCIDPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HgncIdPage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHgncIdPage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HGNCIDPAGE);
	}

    /**
     * Get all values of property HgncIdPage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHgncIdPage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HGNCIDPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HgncIdPage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllHgncIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HGNCIDPAGE, Thing.class);
	}
	
    /**
     * Get all values of property HgncIdPage as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllHgncIdPage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HGNCIDPAGE, Thing.class);
	}

    /**
     * Get all values of property HgncIdPage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllHgncIdPage() {
		return Base.getAll(this.model, this.getResource(), HGNCIDPAGE, Thing.class);
	}

    /**
     * Get all values of property HgncIdPage as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllHgncIdPage_as() {
		return Base.getAll_as(this.model, this.getResource(), HGNCIDPAGE, Thing.class);
	}
 
    /**
     * Adds a value to property HgncIdPage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHgncIdPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HGNCIDPAGE, value);
	}
	
    /**
     * Adds a value to property HgncIdPage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHgncIdPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HGNCIDPAGE, value);
	}
    /**
     * Adds a value to property HgncIdPage from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHgncIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, HGNCIDPAGE, value);
	}
	
    /**
     * Adds a value to property HgncIdPage from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHgncIdPage(Thing value) {
		Base.add(this.model, this.getResource(), HGNCIDPAGE, value);
	}
  

    /**
     * Sets a value of property HgncIdPage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHgncIdPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HGNCIDPAGE, value);
	}
	
    /**
     * Sets a value of property HgncIdPage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHgncIdPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HGNCIDPAGE, value);
	}
    /**
     * Sets a value of property HgncIdPage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHgncIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, HGNCIDPAGE, value);
	}
	
    /**
     * Sets a value of property HgncIdPage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHgncIdPage(Thing value) {
		Base.set(this.model, this.getResource(), HGNCIDPAGE, value);
	}
  


    /**
     * Removes a value of property HgncIdPage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHgncIdPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HGNCIDPAGE, value);
	}
	
    /**
     * Removes a value of property HgncIdPage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHgncIdPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HGNCIDPAGE, value);
	}
    /**
     * Removes a value of property HgncIdPage given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHgncIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, HGNCIDPAGE, value);
	}
	
    /**
     * Removes a value of property HgncIdPage given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHgncIdPage(Thing value) {
		Base.remove(this.model, this.getResource(), HGNCIDPAGE, value);
	}
  
    /**
     * Removes all values of property HgncIdPage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHgncIdPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HGNCIDPAGE);
	}
	
    /**
     * Removes all values of property HgncIdPage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHgncIdPage() {
		Base.removeAll(this.model, this.getResource(), HGNCIDPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@473e674b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHprdId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HPRDID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@473e674b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHprdId() {
		return Base.has(this.model, this.getResource(), HPRDID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@473e674b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHprdId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HPRDID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@473e674b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHprdId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HPRDID, value);
	}

     /**
     * Get all values of property HprdId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHprdId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HPRDID);
	}
	
    /**
     * Get all values of property HprdId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHprdId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HPRDID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HprdId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHprdId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HPRDID);
	}

    /**
     * Get all values of property HprdId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHprdId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HPRDID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HprdId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllHprdId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HPRDID, Thing.class);
	}
	
    /**
     * Get all values of property HprdId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllHprdId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HPRDID, Thing.class);
	}

    /**
     * Get all values of property HprdId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllHprdId() {
		return Base.getAll(this.model, this.getResource(), HPRDID, Thing.class);
	}

    /**
     * Get all values of property HprdId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllHprdId_as() {
		return Base.getAll_as(this.model, this.getResource(), HPRDID, Thing.class);
	}
 
    /**
     * Adds a value to property HprdId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHprdId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HPRDID, value);
	}
	
    /**
     * Adds a value to property HprdId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHprdId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HPRDID, value);
	}
    /**
     * Adds a value to property HprdId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHprdId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, HPRDID, value);
	}
	
    /**
     * Adds a value to property HprdId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHprdId(Thing value) {
		Base.add(this.model, this.getResource(), HPRDID, value);
	}
  

    /**
     * Sets a value of property HprdId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHprdId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HPRDID, value);
	}
	
    /**
     * Sets a value of property HprdId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHprdId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HPRDID, value);
	}
    /**
     * Sets a value of property HprdId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHprdId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, HPRDID, value);
	}
	
    /**
     * Sets a value of property HprdId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHprdId(Thing value) {
		Base.set(this.model, this.getResource(), HPRDID, value);
	}
  


    /**
     * Removes a value of property HprdId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHprdId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HPRDID, value);
	}
	
    /**
     * Removes a value of property HprdId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHprdId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HPRDID, value);
	}
    /**
     * Removes a value of property HprdId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHprdId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, HPRDID, value);
	}
	
    /**
     * Removes a value of property HprdId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHprdId(Thing value) {
		Base.remove(this.model, this.getResource(), HPRDID, value);
	}
  
    /**
     * Removes all values of property HprdId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHprdId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HPRDID);
	}
	
    /**
     * Removes all values of property HprdId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHprdId() {
		Base.removeAll(this.model, this.getResource(), HPRDID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ab2ada has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInchiIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INCHIIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ab2ada has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInchiIdentifier() {
		return Base.has(this.model, this.getResource(), INCHIIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ab2ada has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInchiIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INCHIIDENTIFIER, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ab2ada has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInchiIdentifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INCHIIDENTIFIER, value);
	}

     /**
     * Get all values of property InchiIdentifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInchiIdentifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INCHIIDENTIFIER);
	}
	
    /**
     * Get all values of property InchiIdentifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInchiIdentifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INCHIIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InchiIdentifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInchiIdentifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INCHIIDENTIFIER);
	}

    /**
     * Get all values of property InchiIdentifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInchiIdentifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INCHIIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InchiIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInchiIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INCHIIDENTIFIER, Thing.class);
	}
	
    /**
     * Get all values of property InchiIdentifier as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInchiIdentifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INCHIIDENTIFIER, Thing.class);
	}

    /**
     * Get all values of property InchiIdentifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInchiIdentifier() {
		return Base.getAll(this.model, this.getResource(), INCHIIDENTIFIER, Thing.class);
	}

    /**
     * Get all values of property InchiIdentifier as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInchiIdentifier_as() {
		return Base.getAll_as(this.model, this.getResource(), INCHIIDENTIFIER, Thing.class);
	}
 
    /**
     * Adds a value to property InchiIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInchiIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INCHIIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property InchiIdentifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInchiIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INCHIIDENTIFIER, value);
	}
    /**
     * Adds a value to property InchiIdentifier from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInchiIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INCHIIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property InchiIdentifier from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInchiIdentifier(Thing value) {
		Base.add(this.model, this.getResource(), INCHIIDENTIFIER, value);
	}
  

    /**
     * Sets a value of property InchiIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInchiIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INCHIIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property InchiIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInchiIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INCHIIDENTIFIER, value);
	}
    /**
     * Sets a value of property InchiIdentifier from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInchiIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INCHIIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property InchiIdentifier from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInchiIdentifier(Thing value) {
		Base.set(this.model, this.getResource(), INCHIIDENTIFIER, value);
	}
  


    /**
     * Removes a value of property InchiIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInchiIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INCHIIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property InchiIdentifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInchiIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INCHIIDENTIFIER, value);
	}
    /**
     * Removes a value of property InchiIdentifier given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInchiIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INCHIIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property InchiIdentifier given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInchiIdentifier(Thing value) {
		Base.remove(this.model, this.getResource(), INCHIIDENTIFIER, value);
	}
  
    /**
     * Removes all values of property InchiIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInchiIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INCHIIDENTIFIER);
	}
	
    /**
     * Removes all values of property InchiIdentifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInchiIdentifier() {
		Base.removeAll(this.model, this.getResource(), INCHIIDENTIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f0972ff has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInchiKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INCHIKEY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f0972ff has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInchiKey() {
		return Base.has(this.model, this.getResource(), INCHIKEY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f0972ff has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInchiKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INCHIKEY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f0972ff has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInchiKey( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INCHIKEY, value);
	}

     /**
     * Get all values of property InchiKey as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInchiKey_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INCHIKEY);
	}
	
    /**
     * Get all values of property InchiKey as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInchiKey_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INCHIKEY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InchiKey as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInchiKey_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INCHIKEY);
	}

    /**
     * Get all values of property InchiKey as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInchiKey_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INCHIKEY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InchiKey     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInchiKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INCHIKEY, Thing.class);
	}
	
    /**
     * Get all values of property InchiKey as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInchiKey_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INCHIKEY, Thing.class);
	}

    /**
     * Get all values of property InchiKey     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInchiKey() {
		return Base.getAll(this.model, this.getResource(), INCHIKEY, Thing.class);
	}

    /**
     * Get all values of property InchiKey as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInchiKey_as() {
		return Base.getAll_as(this.model, this.getResource(), INCHIKEY, Thing.class);
	}
 
    /**
     * Adds a value to property InchiKey as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInchiKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INCHIKEY, value);
	}
	
    /**
     * Adds a value to property InchiKey as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInchiKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INCHIKEY, value);
	}
    /**
     * Adds a value to property InchiKey from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInchiKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INCHIKEY, value);
	}
	
    /**
     * Adds a value to property InchiKey from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInchiKey(Thing value) {
		Base.add(this.model, this.getResource(), INCHIKEY, value);
	}
  

    /**
     * Sets a value of property InchiKey from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInchiKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INCHIKEY, value);
	}
	
    /**
     * Sets a value of property InchiKey from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInchiKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INCHIKEY, value);
	}
    /**
     * Sets a value of property InchiKey from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInchiKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INCHIKEY, value);
	}
	
    /**
     * Sets a value of property InchiKey from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInchiKey(Thing value) {
		Base.set(this.model, this.getResource(), INCHIKEY, value);
	}
  


    /**
     * Removes a value of property InchiKey as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInchiKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INCHIKEY, value);
	}
	
    /**
     * Removes a value of property InchiKey as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInchiKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INCHIKEY, value);
	}
    /**
     * Removes a value of property InchiKey given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInchiKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INCHIKEY, value);
	}
	
    /**
     * Removes a value of property InchiKey given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInchiKey(Thing value) {
		Base.remove(this.model, this.getResource(), INCHIKEY, value);
	}
  
    /**
     * Removes all values of property InchiKey     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInchiKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INCHIKEY);
	}
	
    /**
     * Removes all values of property InchiKey	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInchiKey() {
		Base.removeAll(this.model, this.getResource(), INCHIKEY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b78a666 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INDICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b78a666 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIndication() {
		return Base.has(this.model, this.getResource(), INDICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b78a666 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INDICATION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b78a666 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIndication( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INDICATION, value);
	}

     /**
     * Get all values of property Indication as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIndication_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INDICATION);
	}
	
    /**
     * Get all values of property Indication as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIndication_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INDICATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Indication as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIndication_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INDICATION);
	}

    /**
     * Get all values of property Indication as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIndication_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INDICATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Indication     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INDICATION, Thing.class);
	}
	
    /**
     * Get all values of property Indication as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllIndication_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INDICATION, Thing.class);
	}

    /**
     * Get all values of property Indication     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllIndication() {
		return Base.getAll(this.model, this.getResource(), INDICATION, Thing.class);
	}

    /**
     * Get all values of property Indication as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllIndication_as() {
		return Base.getAll_as(this.model, this.getResource(), INDICATION, Thing.class);
	}
 
    /**
     * Adds a value to property Indication as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIndication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Adds a value to property Indication as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIndication( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INDICATION, value);
	}
    /**
     * Adds a value to property Indication from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Adds a value to property Indication from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIndication(Thing value) {
		Base.add(this.model, this.getResource(), INDICATION, value);
	}
  

    /**
     * Sets a value of property Indication from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIndication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Sets a value of property Indication from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIndication( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INDICATION, value);
	}
    /**
     * Sets a value of property Indication from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Sets a value of property Indication from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIndication(Thing value) {
		Base.set(this.model, this.getResource(), INDICATION, value);
	}
  


    /**
     * Removes a value of property Indication as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIndication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Removes a value of property Indication as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIndication( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INDICATION, value);
	}
    /**
     * Removes a value of property Indication given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIndication(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INDICATION, value);
	}
	
    /**
     * Removes a value of property Indication given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIndication(Thing value) {
		Base.remove(this.model, this.getResource(), INDICATION, value);
	}
  
    /**
     * Removes all values of property Indication     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIndication( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INDICATION);
	}
	
    /**
     * Removes all values of property Indication	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIndication() {
		Base.removeAll(this.model, this.getResource(), INDICATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c93326f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInteractionDrug1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTERACTIONDRUG1);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c93326f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInteractionDrug1() {
		return Base.has(this.model, this.getResource(), INTERACTIONDRUG1);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c93326f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInteractionDrug1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTERACTIONDRUG1, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c93326f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInteractionDrug1( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTERACTIONDRUG1, value);
	}

     /**
     * Get all values of property InteractionDrug1 as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteractionDrug1_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTERACTIONDRUG1);
	}
	
    /**
     * Get all values of property InteractionDrug1 as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteractionDrug1_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERACTIONDRUG1, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InteractionDrug1 as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteractionDrug1_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTERACTIONDRUG1);
	}

    /**
     * Get all values of property InteractionDrug1 as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteractionDrug1_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTERACTIONDRUG1, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InteractionDrug1     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInteractionDrug1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTERACTIONDRUG1, Thing.class);
	}
	
    /**
     * Get all values of property InteractionDrug1 as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInteractionDrug1_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERACTIONDRUG1, Thing.class);
	}

    /**
     * Get all values of property InteractionDrug1     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInteractionDrug1() {
		return Base.getAll(this.model, this.getResource(), INTERACTIONDRUG1, Thing.class);
	}

    /**
     * Get all values of property InteractionDrug1 as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInteractionDrug1_as() {
		return Base.getAll_as(this.model, this.getResource(), INTERACTIONDRUG1, Thing.class);
	}
 
    /**
     * Adds a value to property InteractionDrug1 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInteractionDrug1( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTERACTIONDRUG1, value);
	}
	
    /**
     * Adds a value to property InteractionDrug1 as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInteractionDrug1( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTERACTIONDRUG1, value);
	}
    /**
     * Adds a value to property InteractionDrug1 from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInteractionDrug1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INTERACTIONDRUG1, value);
	}
	
    /**
     * Adds a value to property InteractionDrug1 from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInteractionDrug1(Thing value) {
		Base.add(this.model, this.getResource(), INTERACTIONDRUG1, value);
	}
  

    /**
     * Sets a value of property InteractionDrug1 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInteractionDrug1( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERACTIONDRUG1, value);
	}
	
    /**
     * Sets a value of property InteractionDrug1 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInteractionDrug1( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERACTIONDRUG1, value);
	}
    /**
     * Sets a value of property InteractionDrug1 from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInteractionDrug1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INTERACTIONDRUG1, value);
	}
	
    /**
     * Sets a value of property InteractionDrug1 from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInteractionDrug1(Thing value) {
		Base.set(this.model, this.getResource(), INTERACTIONDRUG1, value);
	}
  


    /**
     * Removes a value of property InteractionDrug1 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInteractionDrug1( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERACTIONDRUG1, value);
	}
	
    /**
     * Removes a value of property InteractionDrug1 as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInteractionDrug1( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERACTIONDRUG1, value);
	}
    /**
     * Removes a value of property InteractionDrug1 given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInteractionDrug1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INTERACTIONDRUG1, value);
	}
	
    /**
     * Removes a value of property InteractionDrug1 given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInteractionDrug1(Thing value) {
		Base.remove(this.model, this.getResource(), INTERACTIONDRUG1, value);
	}
  
    /**
     * Removes all values of property InteractionDrug1     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInteractionDrug1( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERACTIONDRUG1);
	}
	
    /**
     * Removes all values of property InteractionDrug1	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInteractionDrug1() {
		Base.removeAll(this.model, this.getResource(), INTERACTIONDRUG1);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bd49c44 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInteractionDrug2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTERACTIONDRUG2);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bd49c44 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInteractionDrug2() {
		return Base.has(this.model, this.getResource(), INTERACTIONDRUG2);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bd49c44 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInteractionDrug2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTERACTIONDRUG2, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bd49c44 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInteractionDrug2( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTERACTIONDRUG2, value);
	}

     /**
     * Get all values of property InteractionDrug2 as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteractionDrug2_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTERACTIONDRUG2);
	}
	
    /**
     * Get all values of property InteractionDrug2 as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteractionDrug2_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERACTIONDRUG2, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InteractionDrug2 as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteractionDrug2_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTERACTIONDRUG2);
	}

    /**
     * Get all values of property InteractionDrug2 as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteractionDrug2_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTERACTIONDRUG2, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InteractionDrug2     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInteractionDrug2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTERACTIONDRUG2, Thing.class);
	}
	
    /**
     * Get all values of property InteractionDrug2 as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInteractionDrug2_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERACTIONDRUG2, Thing.class);
	}

    /**
     * Get all values of property InteractionDrug2     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInteractionDrug2() {
		return Base.getAll(this.model, this.getResource(), INTERACTIONDRUG2, Thing.class);
	}

    /**
     * Get all values of property InteractionDrug2 as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInteractionDrug2_as() {
		return Base.getAll_as(this.model, this.getResource(), INTERACTIONDRUG2, Thing.class);
	}
 
    /**
     * Adds a value to property InteractionDrug2 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInteractionDrug2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTERACTIONDRUG2, value);
	}
	
    /**
     * Adds a value to property InteractionDrug2 as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInteractionDrug2( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTERACTIONDRUG2, value);
	}
    /**
     * Adds a value to property InteractionDrug2 from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInteractionDrug2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INTERACTIONDRUG2, value);
	}
	
    /**
     * Adds a value to property InteractionDrug2 from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInteractionDrug2(Thing value) {
		Base.add(this.model, this.getResource(), INTERACTIONDRUG2, value);
	}
  

    /**
     * Sets a value of property InteractionDrug2 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInteractionDrug2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERACTIONDRUG2, value);
	}
	
    /**
     * Sets a value of property InteractionDrug2 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInteractionDrug2( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERACTIONDRUG2, value);
	}
    /**
     * Sets a value of property InteractionDrug2 from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInteractionDrug2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INTERACTIONDRUG2, value);
	}
	
    /**
     * Sets a value of property InteractionDrug2 from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInteractionDrug2(Thing value) {
		Base.set(this.model, this.getResource(), INTERACTIONDRUG2, value);
	}
  


    /**
     * Removes a value of property InteractionDrug2 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInteractionDrug2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERACTIONDRUG2, value);
	}
	
    /**
     * Removes a value of property InteractionDrug2 as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInteractionDrug2( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERACTIONDRUG2, value);
	}
    /**
     * Removes a value of property InteractionDrug2 given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInteractionDrug2(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INTERACTIONDRUG2, value);
	}
	
    /**
     * Removes a value of property InteractionDrug2 given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInteractionDrug2(Thing value) {
		Base.remove(this.model, this.getResource(), INTERACTIONDRUG2, value);
	}
  
    /**
     * Removes all values of property InteractionDrug2     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInteractionDrug2( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERACTIONDRUG2);
	}
	
    /**
     * Removes all values of property InteractionDrug2	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInteractionDrug2() {
		Base.removeAll(this.model, this.getResource(), INTERACTIONDRUG2);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddd8246 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInteractionInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTERACTIONINSERT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddd8246 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInteractionInsert() {
		return Base.has(this.model, this.getResource(), INTERACTIONINSERT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddd8246 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInteractionInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTERACTIONINSERT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddd8246 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInteractionInsert( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTERACTIONINSERT, value);
	}

     /**
     * Get all values of property InteractionInsert as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteractionInsert_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTERACTIONINSERT);
	}
	
    /**
     * Get all values of property InteractionInsert as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteractionInsert_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERACTIONINSERT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InteractionInsert as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteractionInsert_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTERACTIONINSERT);
	}

    /**
     * Get all values of property InteractionInsert as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteractionInsert_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTERACTIONINSERT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InteractionInsert     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInteractionInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTERACTIONINSERT, Thing.class);
	}
	
    /**
     * Get all values of property InteractionInsert as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInteractionInsert_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTERACTIONINSERT, Thing.class);
	}

    /**
     * Get all values of property InteractionInsert     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInteractionInsert() {
		return Base.getAll(this.model, this.getResource(), INTERACTIONINSERT, Thing.class);
	}

    /**
     * Get all values of property InteractionInsert as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInteractionInsert_as() {
		return Base.getAll_as(this.model, this.getResource(), INTERACTIONINSERT, Thing.class);
	}
 
    /**
     * Adds a value to property InteractionInsert as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInteractionInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTERACTIONINSERT, value);
	}
	
    /**
     * Adds a value to property InteractionInsert as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInteractionInsert( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTERACTIONINSERT, value);
	}
    /**
     * Adds a value to property InteractionInsert from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInteractionInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INTERACTIONINSERT, value);
	}
	
    /**
     * Adds a value to property InteractionInsert from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInteractionInsert(Thing value) {
		Base.add(this.model, this.getResource(), INTERACTIONINSERT, value);
	}
  

    /**
     * Sets a value of property InteractionInsert from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInteractionInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERACTIONINSERT, value);
	}
	
    /**
     * Sets a value of property InteractionInsert from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInteractionInsert( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERACTIONINSERT, value);
	}
    /**
     * Sets a value of property InteractionInsert from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInteractionInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INTERACTIONINSERT, value);
	}
	
    /**
     * Sets a value of property InteractionInsert from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInteractionInsert(Thing value) {
		Base.set(this.model, this.getResource(), INTERACTIONINSERT, value);
	}
  


    /**
     * Removes a value of property InteractionInsert as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInteractionInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERACTIONINSERT, value);
	}
	
    /**
     * Removes a value of property InteractionInsert as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInteractionInsert( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERACTIONINSERT, value);
	}
    /**
     * Removes a value of property InteractionInsert given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInteractionInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INTERACTIONINSERT, value);
	}
	
    /**
     * Removes a value of property InteractionInsert given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInteractionInsert(Thing value) {
		Base.remove(this.model, this.getResource(), INTERACTIONINSERT, value);
	}
  
    /**
     * Removes all values of property InteractionInsert     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInteractionInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERACTIONINSERT);
	}
	
    /**
     * Removes all values of property InteractionInsert	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInteractionInsert() {
		Base.removeAll(this.model, this.getResource(), INTERACTIONINSERT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35e18439 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasKeggCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, KEGGCOMPOUNDID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35e18439 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasKeggCompoundId() {
		return Base.has(this.model, this.getResource(), KEGGCOMPOUNDID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35e18439 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasKeggCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, KEGGCOMPOUNDID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35e18439 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasKeggCompoundId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), KEGGCOMPOUNDID, value);
	}

     /**
     * Get all values of property KeggCompoundId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKeggCompoundId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, KEGGCOMPOUNDID);
	}
	
    /**
     * Get all values of property KeggCompoundId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKeggCompoundId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KEGGCOMPOUNDID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property KeggCompoundId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKeggCompoundId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), KEGGCOMPOUNDID);
	}

    /**
     * Get all values of property KeggCompoundId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKeggCompoundId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), KEGGCOMPOUNDID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property KeggCompoundId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllKeggCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, KEGGCOMPOUNDID, Thing.class);
	}
	
    /**
     * Get all values of property KeggCompoundId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllKeggCompoundId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KEGGCOMPOUNDID, Thing.class);
	}

    /**
     * Get all values of property KeggCompoundId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllKeggCompoundId() {
		return Base.getAll(this.model, this.getResource(), KEGGCOMPOUNDID, Thing.class);
	}

    /**
     * Get all values of property KeggCompoundId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllKeggCompoundId_as() {
		return Base.getAll_as(this.model, this.getResource(), KEGGCOMPOUNDID, Thing.class);
	}
 
    /**
     * Adds a value to property KeggCompoundId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addKeggCompoundId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, KEGGCOMPOUNDID, value);
	}
	
    /**
     * Adds a value to property KeggCompoundId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addKeggCompoundId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), KEGGCOMPOUNDID, value);
	}
    /**
     * Adds a value to property KeggCompoundId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addKeggCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, KEGGCOMPOUNDID, value);
	}
	
    /**
     * Adds a value to property KeggCompoundId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addKeggCompoundId(Thing value) {
		Base.add(this.model, this.getResource(), KEGGCOMPOUNDID, value);
	}
  

    /**
     * Sets a value of property KeggCompoundId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setKeggCompoundId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, KEGGCOMPOUNDID, value);
	}
	
    /**
     * Sets a value of property KeggCompoundId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setKeggCompoundId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), KEGGCOMPOUNDID, value);
	}
    /**
     * Sets a value of property KeggCompoundId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setKeggCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, KEGGCOMPOUNDID, value);
	}
	
    /**
     * Sets a value of property KeggCompoundId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setKeggCompoundId(Thing value) {
		Base.set(this.model, this.getResource(), KEGGCOMPOUNDID, value);
	}
  


    /**
     * Removes a value of property KeggCompoundId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeKeggCompoundId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, KEGGCOMPOUNDID, value);
	}
	
    /**
     * Removes a value of property KeggCompoundId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeKeggCompoundId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), KEGGCOMPOUNDID, value);
	}
    /**
     * Removes a value of property KeggCompoundId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeKeggCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, KEGGCOMPOUNDID, value);
	}
	
    /**
     * Removes a value of property KeggCompoundId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeKeggCompoundId(Thing value) {
		Base.remove(this.model, this.getResource(), KEGGCOMPOUNDID, value);
	}
  
    /**
     * Removes all values of property KeggCompoundId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllKeggCompoundId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, KEGGCOMPOUNDID);
	}
	
    /**
     * Removes all values of property KeggCompoundId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllKeggCompoundId() {
		Base.removeAll(this.model, this.getResource(), KEGGCOMPOUNDID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@601e5f5a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasKeggDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, KEGGDRUGID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@601e5f5a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasKeggDrugId() {
		return Base.has(this.model, this.getResource(), KEGGDRUGID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@601e5f5a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasKeggDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, KEGGDRUGID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@601e5f5a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasKeggDrugId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), KEGGDRUGID, value);
	}

     /**
     * Get all values of property KeggDrugId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKeggDrugId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, KEGGDRUGID);
	}
	
    /**
     * Get all values of property KeggDrugId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKeggDrugId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KEGGDRUGID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property KeggDrugId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKeggDrugId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), KEGGDRUGID);
	}

    /**
     * Get all values of property KeggDrugId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKeggDrugId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), KEGGDRUGID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property KeggDrugId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllKeggDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, KEGGDRUGID, Thing.class);
	}
	
    /**
     * Get all values of property KeggDrugId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllKeggDrugId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KEGGDRUGID, Thing.class);
	}

    /**
     * Get all values of property KeggDrugId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllKeggDrugId() {
		return Base.getAll(this.model, this.getResource(), KEGGDRUGID, Thing.class);
	}

    /**
     * Get all values of property KeggDrugId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllKeggDrugId_as() {
		return Base.getAll_as(this.model, this.getResource(), KEGGDRUGID, Thing.class);
	}
 
    /**
     * Adds a value to property KeggDrugId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addKeggDrugId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, KEGGDRUGID, value);
	}
	
    /**
     * Adds a value to property KeggDrugId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addKeggDrugId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), KEGGDRUGID, value);
	}
    /**
     * Adds a value to property KeggDrugId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addKeggDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, KEGGDRUGID, value);
	}
	
    /**
     * Adds a value to property KeggDrugId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addKeggDrugId(Thing value) {
		Base.add(this.model, this.getResource(), KEGGDRUGID, value);
	}
  

    /**
     * Sets a value of property KeggDrugId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setKeggDrugId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, KEGGDRUGID, value);
	}
	
    /**
     * Sets a value of property KeggDrugId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setKeggDrugId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), KEGGDRUGID, value);
	}
    /**
     * Sets a value of property KeggDrugId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setKeggDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, KEGGDRUGID, value);
	}
	
    /**
     * Sets a value of property KeggDrugId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setKeggDrugId(Thing value) {
		Base.set(this.model, this.getResource(), KEGGDRUGID, value);
	}
  


    /**
     * Removes a value of property KeggDrugId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeKeggDrugId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, KEGGDRUGID, value);
	}
	
    /**
     * Removes a value of property KeggDrugId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeKeggDrugId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), KEGGDRUGID, value);
	}
    /**
     * Removes a value of property KeggDrugId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeKeggDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, KEGGDRUGID, value);
	}
	
    /**
     * Removes a value of property KeggDrugId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeKeggDrugId(Thing value) {
		Base.remove(this.model, this.getResource(), KEGGDRUGID, value);
	}
  
    /**
     * Removes all values of property KeggDrugId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllKeggDrugId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, KEGGDRUGID);
	}
	
    /**
     * Removes all values of property KeggDrugId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllKeggDrugId() {
		Base.removeAll(this.model, this.getResource(), KEGGDRUGID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b89a02d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLimsDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LIMSDRUGID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b89a02d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLimsDrugId() {
		return Base.has(this.model, this.getResource(), LIMSDRUGID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b89a02d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLimsDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LIMSDRUGID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b89a02d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLimsDrugId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LIMSDRUGID, value);
	}

     /**
     * Get all values of property LimsDrugId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLimsDrugId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LIMSDRUGID);
	}
	
    /**
     * Get all values of property LimsDrugId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLimsDrugId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LIMSDRUGID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property LimsDrugId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLimsDrugId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LIMSDRUGID);
	}

    /**
     * Get all values of property LimsDrugId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLimsDrugId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LIMSDRUGID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property LimsDrugId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllLimsDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LIMSDRUGID, Thing.class);
	}
	
    /**
     * Get all values of property LimsDrugId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllLimsDrugId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LIMSDRUGID, Thing.class);
	}

    /**
     * Get all values of property LimsDrugId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllLimsDrugId() {
		return Base.getAll(this.model, this.getResource(), LIMSDRUGID, Thing.class);
	}

    /**
     * Get all values of property LimsDrugId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllLimsDrugId_as() {
		return Base.getAll_as(this.model, this.getResource(), LIMSDRUGID, Thing.class);
	}
 
    /**
     * Adds a value to property LimsDrugId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLimsDrugId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LIMSDRUGID, value);
	}
	
    /**
     * Adds a value to property LimsDrugId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLimsDrugId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LIMSDRUGID, value);
	}
    /**
     * Adds a value to property LimsDrugId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLimsDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, LIMSDRUGID, value);
	}
	
    /**
     * Adds a value to property LimsDrugId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLimsDrugId(Thing value) {
		Base.add(this.model, this.getResource(), LIMSDRUGID, value);
	}
  

    /**
     * Sets a value of property LimsDrugId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLimsDrugId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LIMSDRUGID, value);
	}
	
    /**
     * Sets a value of property LimsDrugId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLimsDrugId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LIMSDRUGID, value);
	}
    /**
     * Sets a value of property LimsDrugId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLimsDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, LIMSDRUGID, value);
	}
	
    /**
     * Sets a value of property LimsDrugId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLimsDrugId(Thing value) {
		Base.set(this.model, this.getResource(), LIMSDRUGID, value);
	}
  


    /**
     * Removes a value of property LimsDrugId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLimsDrugId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LIMSDRUGID, value);
	}
	
    /**
     * Removes a value of property LimsDrugId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLimsDrugId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LIMSDRUGID, value);
	}
    /**
     * Removes a value of property LimsDrugId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLimsDrugId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, LIMSDRUGID, value);
	}
	
    /**
     * Removes a value of property LimsDrugId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLimsDrugId(Thing value) {
		Base.remove(this.model, this.getResource(), LIMSDRUGID, value);
	}
  
    /**
     * Removes all values of property LimsDrugId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLimsDrugId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LIMSDRUGID);
	}
	
    /**
     * Removes all values of property LimsDrugId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLimsDrugId() {
		Base.removeAll(this.model, this.getResource(), LIMSDRUGID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@311596f3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLocus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOCUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@311596f3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLocus() {
		return Base.has(this.model, this.getResource(), LOCUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@311596f3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLocus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOCUS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@311596f3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLocus( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOCUS, value);
	}

     /**
     * Get all values of property Locus as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLocus_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOCUS);
	}
	
    /**
     * Get all values of property Locus as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLocus_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOCUS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Locus as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLocus_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOCUS);
	}

    /**
     * Get all values of property Locus as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLocus_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOCUS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Locus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllLocus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOCUS, Thing.class);
	}
	
    /**
     * Get all values of property Locus as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllLocus_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOCUS, Thing.class);
	}

    /**
     * Get all values of property Locus     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllLocus() {
		return Base.getAll(this.model, this.getResource(), LOCUS, Thing.class);
	}

    /**
     * Get all values of property Locus as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllLocus_as() {
		return Base.getAll_as(this.model, this.getResource(), LOCUS, Thing.class);
	}
 
    /**
     * Adds a value to property Locus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLocus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOCUS, value);
	}
	
    /**
     * Adds a value to property Locus as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLocus( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOCUS, value);
	}
    /**
     * Adds a value to property Locus from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLocus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, LOCUS, value);
	}
	
    /**
     * Adds a value to property Locus from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLocus(Thing value) {
		Base.add(this.model, this.getResource(), LOCUS, value);
	}
  

    /**
     * Sets a value of property Locus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLocus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOCUS, value);
	}
	
    /**
     * Sets a value of property Locus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLocus( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOCUS, value);
	}
    /**
     * Sets a value of property Locus from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLocus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, LOCUS, value);
	}
	
    /**
     * Sets a value of property Locus from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLocus(Thing value) {
		Base.set(this.model, this.getResource(), LOCUS, value);
	}
  


    /**
     * Removes a value of property Locus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLocus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOCUS, value);
	}
	
    /**
     * Removes a value of property Locus as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLocus( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOCUS, value);
	}
    /**
     * Removes a value of property Locus given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLocus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, LOCUS, value);
	}
	
    /**
     * Removes a value of property Locus given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLocus(Thing value) {
		Base.remove(this.model, this.getResource(), LOCUS, value);
	}
  
    /**
     * Removes all values of property Locus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLocus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOCUS);
	}
	
    /**
     * Removes all values of property Locus	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLocus() {
		Base.removeAll(this.model, this.getResource(), LOCUS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@360c72ab has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMassSpecFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MASSSPECFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@360c72ab has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMassSpecFile() {
		return Base.has(this.model, this.getResource(), MASSSPECFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@360c72ab has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMassSpecFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MASSSPECFILE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@360c72ab has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMassSpecFile( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MASSSPECFILE, value);
	}

     /**
     * Get all values of property MassSpecFile as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMassSpecFile_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MASSSPECFILE);
	}
	
    /**
     * Get all values of property MassSpecFile as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMassSpecFile_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MASSSPECFILE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MassSpecFile as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMassSpecFile_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MASSSPECFILE);
	}

    /**
     * Get all values of property MassSpecFile as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMassSpecFile_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MASSSPECFILE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MassSpecFile     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllMassSpecFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MASSSPECFILE, Thing.class);
	}
	
    /**
     * Get all values of property MassSpecFile as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllMassSpecFile_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MASSSPECFILE, Thing.class);
	}

    /**
     * Get all values of property MassSpecFile     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllMassSpecFile() {
		return Base.getAll(this.model, this.getResource(), MASSSPECFILE, Thing.class);
	}

    /**
     * Get all values of property MassSpecFile as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllMassSpecFile_as() {
		return Base.getAll_as(this.model, this.getResource(), MASSSPECFILE, Thing.class);
	}
 
    /**
     * Adds a value to property MassSpecFile as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMassSpecFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MASSSPECFILE, value);
	}
	
    /**
     * Adds a value to property MassSpecFile as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMassSpecFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MASSSPECFILE, value);
	}
    /**
     * Adds a value to property MassSpecFile from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMassSpecFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MASSSPECFILE, value);
	}
	
    /**
     * Adds a value to property MassSpecFile from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMassSpecFile(Thing value) {
		Base.add(this.model, this.getResource(), MASSSPECFILE, value);
	}
  

    /**
     * Sets a value of property MassSpecFile from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMassSpecFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MASSSPECFILE, value);
	}
	
    /**
     * Sets a value of property MassSpecFile from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMassSpecFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MASSSPECFILE, value);
	}
    /**
     * Sets a value of property MassSpecFile from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMassSpecFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MASSSPECFILE, value);
	}
	
    /**
     * Sets a value of property MassSpecFile from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMassSpecFile(Thing value) {
		Base.set(this.model, this.getResource(), MASSSPECFILE, value);
	}
  


    /**
     * Removes a value of property MassSpecFile as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMassSpecFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MASSSPECFILE, value);
	}
	
    /**
     * Removes a value of property MassSpecFile as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMassSpecFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MASSSPECFILE, value);
	}
    /**
     * Removes a value of property MassSpecFile given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMassSpecFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MASSSPECFILE, value);
	}
	
    /**
     * Removes a value of property MassSpecFile given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMassSpecFile(Thing value) {
		Base.remove(this.model, this.getResource(), MASSSPECFILE, value);
	}
  
    /**
     * Removes all values of property MassSpecFile     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMassSpecFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MASSSPECFILE);
	}
	
    /**
     * Removes all values of property MassSpecFile	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMassSpecFile() {
		Base.removeAll(this.model, this.getResource(), MASSSPECFILE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47d46d27 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMechanismOfAction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MECHANISMOFACTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47d46d27 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMechanismOfAction() {
		return Base.has(this.model, this.getResource(), MECHANISMOFACTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47d46d27 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMechanismOfAction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MECHANISMOFACTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47d46d27 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMechanismOfAction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MECHANISMOFACTION, value);
	}

     /**
     * Get all values of property MechanismOfAction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMechanismOfAction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MECHANISMOFACTION);
	}
	
    /**
     * Get all values of property MechanismOfAction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMechanismOfAction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MECHANISMOFACTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MechanismOfAction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMechanismOfAction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MECHANISMOFACTION);
	}

    /**
     * Get all values of property MechanismOfAction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMechanismOfAction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MECHANISMOFACTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MechanismOfAction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllMechanismOfAction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MECHANISMOFACTION, Thing.class);
	}
	
    /**
     * Get all values of property MechanismOfAction as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllMechanismOfAction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MECHANISMOFACTION, Thing.class);
	}

    /**
     * Get all values of property MechanismOfAction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllMechanismOfAction() {
		return Base.getAll(this.model, this.getResource(), MECHANISMOFACTION, Thing.class);
	}

    /**
     * Get all values of property MechanismOfAction as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllMechanismOfAction_as() {
		return Base.getAll_as(this.model, this.getResource(), MECHANISMOFACTION, Thing.class);
	}
 
    /**
     * Adds a value to property MechanismOfAction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMechanismOfAction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MECHANISMOFACTION, value);
	}
	
    /**
     * Adds a value to property MechanismOfAction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMechanismOfAction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MECHANISMOFACTION, value);
	}
    /**
     * Adds a value to property MechanismOfAction from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMechanismOfAction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MECHANISMOFACTION, value);
	}
	
    /**
     * Adds a value to property MechanismOfAction from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMechanismOfAction(Thing value) {
		Base.add(this.model, this.getResource(), MECHANISMOFACTION, value);
	}
  

    /**
     * Sets a value of property MechanismOfAction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMechanismOfAction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MECHANISMOFACTION, value);
	}
	
    /**
     * Sets a value of property MechanismOfAction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMechanismOfAction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MECHANISMOFACTION, value);
	}
    /**
     * Sets a value of property MechanismOfAction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMechanismOfAction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MECHANISMOFACTION, value);
	}
	
    /**
     * Sets a value of property MechanismOfAction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMechanismOfAction(Thing value) {
		Base.set(this.model, this.getResource(), MECHANISMOFACTION, value);
	}
  


    /**
     * Removes a value of property MechanismOfAction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMechanismOfAction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MECHANISMOFACTION, value);
	}
	
    /**
     * Removes a value of property MechanismOfAction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMechanismOfAction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MECHANISMOFACTION, value);
	}
    /**
     * Removes a value of property MechanismOfAction given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMechanismOfAction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MECHANISMOFACTION, value);
	}
	
    /**
     * Removes a value of property MechanismOfAction given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMechanismOfAction(Thing value) {
		Base.remove(this.model, this.getResource(), MECHANISMOFACTION, value);
	}
  
    /**
     * Removes all values of property MechanismOfAction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMechanismOfAction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MECHANISMOFACTION);
	}
	
    /**
     * Removes all values of property MechanismOfAction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMechanismOfAction() {
		Base.removeAll(this.model, this.getResource(), MECHANISMOFACTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65fded43 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMeltingPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MELTINGPOINT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65fded43 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMeltingPoint() {
		return Base.has(this.model, this.getResource(), MELTINGPOINT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65fded43 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMeltingPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MELTINGPOINT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65fded43 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMeltingPoint( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MELTINGPOINT, value);
	}

     /**
     * Get all values of property MeltingPoint as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMeltingPoint_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MELTINGPOINT);
	}
	
    /**
     * Get all values of property MeltingPoint as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMeltingPoint_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MELTINGPOINT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MeltingPoint as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMeltingPoint_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MELTINGPOINT);
	}

    /**
     * Get all values of property MeltingPoint as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMeltingPoint_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MELTINGPOINT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MeltingPoint     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllMeltingPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MELTINGPOINT, Thing.class);
	}
	
    /**
     * Get all values of property MeltingPoint as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllMeltingPoint_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MELTINGPOINT, Thing.class);
	}

    /**
     * Get all values of property MeltingPoint     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllMeltingPoint() {
		return Base.getAll(this.model, this.getResource(), MELTINGPOINT, Thing.class);
	}

    /**
     * Get all values of property MeltingPoint as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllMeltingPoint_as() {
		return Base.getAll_as(this.model, this.getResource(), MELTINGPOINT, Thing.class);
	}
 
    /**
     * Adds a value to property MeltingPoint as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMeltingPoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MELTINGPOINT, value);
	}
	
    /**
     * Adds a value to property MeltingPoint as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMeltingPoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MELTINGPOINT, value);
	}
    /**
     * Adds a value to property MeltingPoint from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMeltingPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MELTINGPOINT, value);
	}
	
    /**
     * Adds a value to property MeltingPoint from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMeltingPoint(Thing value) {
		Base.add(this.model, this.getResource(), MELTINGPOINT, value);
	}
  

    /**
     * Sets a value of property MeltingPoint from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMeltingPoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MELTINGPOINT, value);
	}
	
    /**
     * Sets a value of property MeltingPoint from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMeltingPoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MELTINGPOINT, value);
	}
    /**
     * Sets a value of property MeltingPoint from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMeltingPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MELTINGPOINT, value);
	}
	
    /**
     * Sets a value of property MeltingPoint from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMeltingPoint(Thing value) {
		Base.set(this.model, this.getResource(), MELTINGPOINT, value);
	}
  


    /**
     * Removes a value of property MeltingPoint as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMeltingPoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MELTINGPOINT, value);
	}
	
    /**
     * Removes a value of property MeltingPoint as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMeltingPoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MELTINGPOINT, value);
	}
    /**
     * Removes a value of property MeltingPoint given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMeltingPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MELTINGPOINT, value);
	}
	
    /**
     * Removes a value of property MeltingPoint given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMeltingPoint(Thing value) {
		Base.remove(this.model, this.getResource(), MELTINGPOINT, value);
	}
  
    /**
     * Removes all values of property MeltingPoint     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMeltingPoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MELTINGPOINT);
	}
	
    /**
     * Removes all values of property MeltingPoint	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMeltingPoint() {
		Base.removeAll(this.model, this.getResource(), MELTINGPOINT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25558c5e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMolecularWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MOLECULARWEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25558c5e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMolecularWeight() {
		return Base.has(this.model, this.getResource(), MOLECULARWEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25558c5e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMolecularWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MOLECULARWEIGHT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25558c5e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMolecularWeight( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MOLECULARWEIGHT, value);
	}

     /**
     * Get all values of property MolecularWeight as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeight_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MOLECULARWEIGHT);
	}
	
    /**
     * Get all values of property MolecularWeight as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeight_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MOLECULARWEIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MolecularWeight as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeight_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MOLECULARWEIGHT);
	}

    /**
     * Get all values of property MolecularWeight as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeight_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MOLECULARWEIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MolecularWeight     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllMolecularWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MOLECULARWEIGHT, Thing.class);
	}
	
    /**
     * Get all values of property MolecularWeight as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllMolecularWeight_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MOLECULARWEIGHT, Thing.class);
	}

    /**
     * Get all values of property MolecularWeight     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllMolecularWeight() {
		return Base.getAll(this.model, this.getResource(), MOLECULARWEIGHT, Thing.class);
	}

    /**
     * Get all values of property MolecularWeight as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllMolecularWeight_as() {
		return Base.getAll_as(this.model, this.getResource(), MOLECULARWEIGHT, Thing.class);
	}
 
    /**
     * Adds a value to property MolecularWeight as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMolecularWeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MOLECULARWEIGHT, value);
	}
	
    /**
     * Adds a value to property MolecularWeight as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMolecularWeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MOLECULARWEIGHT, value);
	}
    /**
     * Adds a value to property MolecularWeight from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMolecularWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MOLECULARWEIGHT, value);
	}
	
    /**
     * Adds a value to property MolecularWeight from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMolecularWeight(Thing value) {
		Base.add(this.model, this.getResource(), MOLECULARWEIGHT, value);
	}
  

    /**
     * Sets a value of property MolecularWeight from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMolecularWeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MOLECULARWEIGHT, value);
	}
	
    /**
     * Sets a value of property MolecularWeight from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMolecularWeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MOLECULARWEIGHT, value);
	}
    /**
     * Sets a value of property MolecularWeight from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMolecularWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MOLECULARWEIGHT, value);
	}
	
    /**
     * Sets a value of property MolecularWeight from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMolecularWeight(Thing value) {
		Base.set(this.model, this.getResource(), MOLECULARWEIGHT, value);
	}
  


    /**
     * Removes a value of property MolecularWeight as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMolecularWeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MOLECULARWEIGHT, value);
	}
	
    /**
     * Removes a value of property MolecularWeight as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMolecularWeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MOLECULARWEIGHT, value);
	}
    /**
     * Removes a value of property MolecularWeight given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMolecularWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MOLECULARWEIGHT, value);
	}
	
    /**
     * Removes a value of property MolecularWeight given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMolecularWeight(Thing value) {
		Base.remove(this.model, this.getResource(), MOLECULARWEIGHT, value);
	}
  
    /**
     * Removes all values of property MolecularWeight     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMolecularWeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MOLECULARWEIGHT);
	}
	
    /**
     * Removes all values of property MolecularWeight	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMolecularWeight() {
		Base.removeAll(this.model, this.getResource(), MOLECULARWEIGHT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f85e5a5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMolecularWeightAverage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MOLECULARWEIGHTAVERAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f85e5a5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMolecularWeightAverage() {
		return Base.has(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f85e5a5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMolecularWeightAverage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MOLECULARWEIGHTAVERAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f85e5a5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMolecularWeightAverage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE, value);
	}

     /**
     * Get all values of property MolecularWeightAverage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeightAverage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MOLECULARWEIGHTAVERAGE);
	}
	
    /**
     * Get all values of property MolecularWeightAverage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeightAverage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MOLECULARWEIGHTAVERAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MolecularWeightAverage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeightAverage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE);
	}

    /**
     * Get all values of property MolecularWeightAverage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeightAverage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MolecularWeightAverage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllMolecularWeightAverage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MOLECULARWEIGHTAVERAGE, Thing.class);
	}
	
    /**
     * Get all values of property MolecularWeightAverage as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllMolecularWeightAverage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MOLECULARWEIGHTAVERAGE, Thing.class);
	}

    /**
     * Get all values of property MolecularWeightAverage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllMolecularWeightAverage() {
		return Base.getAll(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE, Thing.class);
	}

    /**
     * Get all values of property MolecularWeightAverage as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllMolecularWeightAverage_as() {
		return Base.getAll_as(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE, Thing.class);
	}
 
    /**
     * Adds a value to property MolecularWeightAverage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMolecularWeightAverage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MOLECULARWEIGHTAVERAGE, value);
	}
	
    /**
     * Adds a value to property MolecularWeightAverage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMolecularWeightAverage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE, value);
	}
    /**
     * Adds a value to property MolecularWeightAverage from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMolecularWeightAverage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MOLECULARWEIGHTAVERAGE, value);
	}
	
    /**
     * Adds a value to property MolecularWeightAverage from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMolecularWeightAverage(Thing value) {
		Base.add(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE, value);
	}
  

    /**
     * Sets a value of property MolecularWeightAverage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMolecularWeightAverage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MOLECULARWEIGHTAVERAGE, value);
	}
	
    /**
     * Sets a value of property MolecularWeightAverage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMolecularWeightAverage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE, value);
	}
    /**
     * Sets a value of property MolecularWeightAverage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMolecularWeightAverage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MOLECULARWEIGHTAVERAGE, value);
	}
	
    /**
     * Sets a value of property MolecularWeightAverage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMolecularWeightAverage(Thing value) {
		Base.set(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE, value);
	}
  


    /**
     * Removes a value of property MolecularWeightAverage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMolecularWeightAverage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MOLECULARWEIGHTAVERAGE, value);
	}
	
    /**
     * Removes a value of property MolecularWeightAverage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMolecularWeightAverage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE, value);
	}
    /**
     * Removes a value of property MolecularWeightAverage given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMolecularWeightAverage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MOLECULARWEIGHTAVERAGE, value);
	}
	
    /**
     * Removes a value of property MolecularWeightAverage given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMolecularWeightAverage(Thing value) {
		Base.remove(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE, value);
	}
  
    /**
     * Removes all values of property MolecularWeightAverage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMolecularWeightAverage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MOLECULARWEIGHTAVERAGE);
	}
	
    /**
     * Removes all values of property MolecularWeightAverage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMolecularWeightAverage() {
		Base.removeAll(this.model, this.getResource(), MOLECULARWEIGHTAVERAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4efc8afe has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMolecularWeightMono(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MOLECULARWEIGHTMONO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4efc8afe has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMolecularWeightMono() {
		return Base.has(this.model, this.getResource(), MOLECULARWEIGHTMONO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4efc8afe has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMolecularWeightMono(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MOLECULARWEIGHTMONO, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4efc8afe has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMolecularWeightMono( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MOLECULARWEIGHTMONO, value);
	}

     /**
     * Get all values of property MolecularWeightMono as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeightMono_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MOLECULARWEIGHTMONO);
	}
	
    /**
     * Get all values of property MolecularWeightMono as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeightMono_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MOLECULARWEIGHTMONO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MolecularWeightMono as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeightMono_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MOLECULARWEIGHTMONO);
	}

    /**
     * Get all values of property MolecularWeightMono as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMolecularWeightMono_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MOLECULARWEIGHTMONO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MolecularWeightMono     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllMolecularWeightMono(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MOLECULARWEIGHTMONO, Thing.class);
	}
	
    /**
     * Get all values of property MolecularWeightMono as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllMolecularWeightMono_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MOLECULARWEIGHTMONO, Thing.class);
	}

    /**
     * Get all values of property MolecularWeightMono     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllMolecularWeightMono() {
		return Base.getAll(this.model, this.getResource(), MOLECULARWEIGHTMONO, Thing.class);
	}

    /**
     * Get all values of property MolecularWeightMono as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllMolecularWeightMono_as() {
		return Base.getAll_as(this.model, this.getResource(), MOLECULARWEIGHTMONO, Thing.class);
	}
 
    /**
     * Adds a value to property MolecularWeightMono as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMolecularWeightMono( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MOLECULARWEIGHTMONO, value);
	}
	
    /**
     * Adds a value to property MolecularWeightMono as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMolecularWeightMono( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MOLECULARWEIGHTMONO, value);
	}
    /**
     * Adds a value to property MolecularWeightMono from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMolecularWeightMono(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MOLECULARWEIGHTMONO, value);
	}
	
    /**
     * Adds a value to property MolecularWeightMono from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMolecularWeightMono(Thing value) {
		Base.add(this.model, this.getResource(), MOLECULARWEIGHTMONO, value);
	}
  

    /**
     * Sets a value of property MolecularWeightMono from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMolecularWeightMono( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MOLECULARWEIGHTMONO, value);
	}
	
    /**
     * Sets a value of property MolecularWeightMono from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMolecularWeightMono( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MOLECULARWEIGHTMONO, value);
	}
    /**
     * Sets a value of property MolecularWeightMono from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMolecularWeightMono(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MOLECULARWEIGHTMONO, value);
	}
	
    /**
     * Sets a value of property MolecularWeightMono from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMolecularWeightMono(Thing value) {
		Base.set(this.model, this.getResource(), MOLECULARWEIGHTMONO, value);
	}
  


    /**
     * Removes a value of property MolecularWeightMono as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMolecularWeightMono( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MOLECULARWEIGHTMONO, value);
	}
	
    /**
     * Removes a value of property MolecularWeightMono as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMolecularWeightMono( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MOLECULARWEIGHTMONO, value);
	}
    /**
     * Removes a value of property MolecularWeightMono given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMolecularWeightMono(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MOLECULARWEIGHTMONO, value);
	}
	
    /**
     * Removes a value of property MolecularWeightMono given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMolecularWeightMono(Thing value) {
		Base.remove(this.model, this.getResource(), MOLECULARWEIGHTMONO, value);
	}
  
    /**
     * Removes all values of property MolecularWeightMono     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMolecularWeightMono( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MOLECULARWEIGHTMONO);
	}
	
    /**
     * Removes all values of property MolecularWeightMono	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMolecularWeightMono() {
		Base.removeAll(this.model, this.getResource(), MOLECULARWEIGHTMONO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2eb159cb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMsdsFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MSDSFILES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2eb159cb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMsdsFiles() {
		return Base.has(this.model, this.getResource(), MSDSFILES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2eb159cb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMsdsFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MSDSFILES, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2eb159cb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMsdsFiles( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MSDSFILES, value);
	}

     /**
     * Get all values of property MsdsFiles as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMsdsFiles_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MSDSFILES);
	}
	
    /**
     * Get all values of property MsdsFiles as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMsdsFiles_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MSDSFILES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MsdsFiles as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMsdsFiles_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MSDSFILES);
	}

    /**
     * Get all values of property MsdsFiles as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMsdsFiles_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MSDSFILES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MsdsFiles     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllMsdsFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MSDSFILES, Thing.class);
	}
	
    /**
     * Get all values of property MsdsFiles as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllMsdsFiles_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MSDSFILES, Thing.class);
	}

    /**
     * Get all values of property MsdsFiles     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllMsdsFiles() {
		return Base.getAll(this.model, this.getResource(), MSDSFILES, Thing.class);
	}

    /**
     * Get all values of property MsdsFiles as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllMsdsFiles_as() {
		return Base.getAll_as(this.model, this.getResource(), MSDSFILES, Thing.class);
	}
 
    /**
     * Adds a value to property MsdsFiles as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMsdsFiles( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MSDSFILES, value);
	}
	
    /**
     * Adds a value to property MsdsFiles as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMsdsFiles( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MSDSFILES, value);
	}
    /**
     * Adds a value to property MsdsFiles from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMsdsFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MSDSFILES, value);
	}
	
    /**
     * Adds a value to property MsdsFiles from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMsdsFiles(Thing value) {
		Base.add(this.model, this.getResource(), MSDSFILES, value);
	}
  

    /**
     * Sets a value of property MsdsFiles from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMsdsFiles( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MSDSFILES, value);
	}
	
    /**
     * Sets a value of property MsdsFiles from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMsdsFiles( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MSDSFILES, value);
	}
    /**
     * Sets a value of property MsdsFiles from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMsdsFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MSDSFILES, value);
	}
	
    /**
     * Sets a value of property MsdsFiles from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMsdsFiles(Thing value) {
		Base.set(this.model, this.getResource(), MSDSFILES, value);
	}
  


    /**
     * Removes a value of property MsdsFiles as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMsdsFiles( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MSDSFILES, value);
	}
	
    /**
     * Removes a value of property MsdsFiles as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMsdsFiles( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MSDSFILES, value);
	}
    /**
     * Removes a value of property MsdsFiles given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMsdsFiles(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MSDSFILES, value);
	}
	
    /**
     * Removes a value of property MsdsFiles given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMsdsFiles(Thing value) {
		Base.remove(this.model, this.getResource(), MSDSFILES, value);
	}
  
    /**
     * Removes all values of property MsdsFiles     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMsdsFiles( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MSDSFILES);
	}
	
    /**
     * Removes all values of property MsdsFiles	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMsdsFiles() {
		Base.removeAll(this.model, this.getResource(), MSDSFILES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f4c4638 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f4c4638 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasName() {
		return Base.has(this.model, this.getResource(), NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f4c4638 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f4c4638 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAME, value);
	}

     /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAME);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAME);
	}

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAME, Thing.class);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, Thing.class);
	}

    /**
     * Get all values of property Name     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllName() {
		return Base.getAll(this.model, this.getResource(), NAME, Thing.class);
	}

    /**
     * Get all values of property Name as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllName_as() {
		return Base.getAll_as(this.model, this.getResource(), NAME, Thing.class);
	}
 
    /**
     * Adds a value to property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
    /**
     * Adds a value to property Name from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addName(Thing value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
  

    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
    /**
     * Sets a value of property Name from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setName(Thing value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
  


    /**
     * Removes a value of property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
    /**
     * Removes a value of property Name given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeName(Thing value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
  
    /**
     * Removes all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAME);
	}
	
    /**
     * Removes all values of property Name	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllName() {
		Base.removeAll(this.model, this.getResource(), NAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2791158d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNumberOfResidues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NUMBEROFRESIDUES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2791158d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNumberOfResidues() {
		return Base.has(this.model, this.getResource(), NUMBEROFRESIDUES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2791158d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNumberOfResidues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NUMBEROFRESIDUES, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2791158d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNumberOfResidues( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NUMBEROFRESIDUES, value);
	}

     /**
     * Get all values of property NumberOfResidues as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNumberOfResidues_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NUMBEROFRESIDUES);
	}
	
    /**
     * Get all values of property NumberOfResidues as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNumberOfResidues_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMBEROFRESIDUES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NumberOfResidues as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNumberOfResidues_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NUMBEROFRESIDUES);
	}

    /**
     * Get all values of property NumberOfResidues as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNumberOfResidues_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NUMBEROFRESIDUES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NumberOfResidues     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllNumberOfResidues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NUMBEROFRESIDUES, Thing.class);
	}
	
    /**
     * Get all values of property NumberOfResidues as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllNumberOfResidues_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMBEROFRESIDUES, Thing.class);
	}

    /**
     * Get all values of property NumberOfResidues     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllNumberOfResidues() {
		return Base.getAll(this.model, this.getResource(), NUMBEROFRESIDUES, Thing.class);
	}

    /**
     * Get all values of property NumberOfResidues as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllNumberOfResidues_as() {
		return Base.getAll_as(this.model, this.getResource(), NUMBEROFRESIDUES, Thing.class);
	}
 
    /**
     * Adds a value to property NumberOfResidues as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNumberOfResidues( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NUMBEROFRESIDUES, value);
	}
	
    /**
     * Adds a value to property NumberOfResidues as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNumberOfResidues( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NUMBEROFRESIDUES, value);
	}
    /**
     * Adds a value to property NumberOfResidues from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNumberOfResidues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, NUMBEROFRESIDUES, value);
	}
	
    /**
     * Adds a value to property NumberOfResidues from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNumberOfResidues(Thing value) {
		Base.add(this.model, this.getResource(), NUMBEROFRESIDUES, value);
	}
  

    /**
     * Sets a value of property NumberOfResidues from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNumberOfResidues( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NUMBEROFRESIDUES, value);
	}
	
    /**
     * Sets a value of property NumberOfResidues from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNumberOfResidues( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NUMBEROFRESIDUES, value);
	}
    /**
     * Sets a value of property NumberOfResidues from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNumberOfResidues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, NUMBEROFRESIDUES, value);
	}
	
    /**
     * Sets a value of property NumberOfResidues from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNumberOfResidues(Thing value) {
		Base.set(this.model, this.getResource(), NUMBEROFRESIDUES, value);
	}
  


    /**
     * Removes a value of property NumberOfResidues as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNumberOfResidues( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NUMBEROFRESIDUES, value);
	}
	
    /**
     * Removes a value of property NumberOfResidues as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNumberOfResidues( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NUMBEROFRESIDUES, value);
	}
    /**
     * Removes a value of property NumberOfResidues given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNumberOfResidues(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, NUMBEROFRESIDUES, value);
	}
	
    /**
     * Removes a value of property NumberOfResidues given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNumberOfResidues(Thing value) {
		Base.remove(this.model, this.getResource(), NUMBEROFRESIDUES, value);
	}
  
    /**
     * Removes all values of property NumberOfResidues     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNumberOfResidues( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NUMBEROFRESIDUES);
	}
	
    /**
     * Removes all values of property NumberOfResidues	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNumberOfResidues() {
		Base.removeAll(this.model, this.getResource(), NUMBEROFRESIDUES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d01b3b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d01b3b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPage() {
		return Base.has(this.model, this.getResource(), PAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d01b3b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d01b3b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PAGE, value);
	}

     /**
     * Get all values of property Page as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PAGE);
	}
	
    /**
     * Get all values of property Page as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Page as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PAGE);
	}

    /**
     * Get all values of property Page as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Page     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PAGE, Thing.class);
	}
	
    /**
     * Get all values of property Page as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGE, Thing.class);
	}

    /**
     * Get all values of property Page     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPage() {
		return Base.getAll(this.model, this.getResource(), PAGE, Thing.class);
	}

    /**
     * Get all values of property Page as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPage_as() {
		return Base.getAll_as(this.model, this.getResource(), PAGE, Thing.class);
	}
 
    /**
     * Adds a value to property Page as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PAGE, value);
	}
	
    /**
     * Adds a value to property Page as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Adds a value to property Page from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PAGE, value);
	}
	
    /**
     * Adds a value to property Page from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPage(Thing value) {
		Base.add(this.model, this.getResource(), PAGE, value);
	}
  

    /**
     * Sets a value of property Page from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PAGE, value);
	}
	
    /**
     * Sets a value of property Page from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Sets a value of property Page from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PAGE, value);
	}
	
    /**
     * Sets a value of property Page from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPage(Thing value) {
		Base.set(this.model, this.getResource(), PAGE, value);
	}
  


    /**
     * Removes a value of property Page as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PAGE, value);
	}
	
    /**
     * Removes a value of property Page as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Removes a value of property Page given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PAGE, value);
	}
	
    /**
     * Removes a value of property Page given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePage(Thing value) {
		Base.remove(this.model, this.getResource(), PAGE, value);
	}
  
    /**
     * Removes all values of property Page     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PAGE);
	}
	
    /**
     * Removes all values of property Page	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPage() {
		Base.removeAll(this.model, this.getResource(), PAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e93225d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPathway(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PATHWAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e93225d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPathway() {
		return Base.has(this.model, this.getResource(), PATHWAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e93225d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPathway(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PATHWAY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e93225d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPathway( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PATHWAY, value);
	}

     /**
     * Get all values of property Pathway as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPathway_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PATHWAY);
	}
	
    /**
     * Get all values of property Pathway as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPathway_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PATHWAY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Pathway as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPathway_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PATHWAY);
	}

    /**
     * Get all values of property Pathway as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPathway_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PATHWAY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Pathway     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPathway(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PATHWAY, Thing.class);
	}
	
    /**
     * Get all values of property Pathway as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPathway_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PATHWAY, Thing.class);
	}

    /**
     * Get all values of property Pathway     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPathway() {
		return Base.getAll(this.model, this.getResource(), PATHWAY, Thing.class);
	}

    /**
     * Get all values of property Pathway as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPathway_as() {
		return Base.getAll_as(this.model, this.getResource(), PATHWAY, Thing.class);
	}
 
    /**
     * Adds a value to property Pathway as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPathway( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PATHWAY, value);
	}
	
    /**
     * Adds a value to property Pathway as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPathway( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PATHWAY, value);
	}
    /**
     * Adds a value to property Pathway from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPathway(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PATHWAY, value);
	}
	
    /**
     * Adds a value to property Pathway from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPathway(Thing value) {
		Base.add(this.model, this.getResource(), PATHWAY, value);
	}
  

    /**
     * Sets a value of property Pathway from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPathway( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PATHWAY, value);
	}
	
    /**
     * Sets a value of property Pathway from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPathway( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PATHWAY, value);
	}
    /**
     * Sets a value of property Pathway from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPathway(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PATHWAY, value);
	}
	
    /**
     * Sets a value of property Pathway from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPathway(Thing value) {
		Base.set(this.model, this.getResource(), PATHWAY, value);
	}
  


    /**
     * Removes a value of property Pathway as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePathway( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PATHWAY, value);
	}
	
    /**
     * Removes a value of property Pathway as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePathway( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PATHWAY, value);
	}
    /**
     * Removes a value of property Pathway given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePathway(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PATHWAY, value);
	}
	
    /**
     * Removes a value of property Pathway given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePathway(Thing value) {
		Base.remove(this.model, this.getResource(), PATHWAY, value);
	}
  
    /**
     * Removes all values of property Pathway     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPathway( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PATHWAY);
	}
	
    /**
     * Removes all values of property Pathway	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPathway() {
		Base.removeAll(this.model, this.getResource(), PATHWAY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d134e05 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPatientInformationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PATIENTINFORMATIONINSERT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d134e05 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPatientInformationInsert() {
		return Base.has(this.model, this.getResource(), PATIENTINFORMATIONINSERT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d134e05 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPatientInformationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PATIENTINFORMATIONINSERT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d134e05 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPatientInformationInsert( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PATIENTINFORMATIONINSERT, value);
	}

     /**
     * Get all values of property PatientInformationInsert as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPatientInformationInsert_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PATIENTINFORMATIONINSERT);
	}
	
    /**
     * Get all values of property PatientInformationInsert as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPatientInformationInsert_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PATIENTINFORMATIONINSERT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PatientInformationInsert as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPatientInformationInsert_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PATIENTINFORMATIONINSERT);
	}

    /**
     * Get all values of property PatientInformationInsert as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPatientInformationInsert_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PATIENTINFORMATIONINSERT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PatientInformationInsert     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPatientInformationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PATIENTINFORMATIONINSERT, Thing.class);
	}
	
    /**
     * Get all values of property PatientInformationInsert as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPatientInformationInsert_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PATIENTINFORMATIONINSERT, Thing.class);
	}

    /**
     * Get all values of property PatientInformationInsert     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPatientInformationInsert() {
		return Base.getAll(this.model, this.getResource(), PATIENTINFORMATIONINSERT, Thing.class);
	}

    /**
     * Get all values of property PatientInformationInsert as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPatientInformationInsert_as() {
		return Base.getAll_as(this.model, this.getResource(), PATIENTINFORMATIONINSERT, Thing.class);
	}
 
    /**
     * Adds a value to property PatientInformationInsert as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPatientInformationInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PATIENTINFORMATIONINSERT, value);
	}
	
    /**
     * Adds a value to property PatientInformationInsert as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPatientInformationInsert( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PATIENTINFORMATIONINSERT, value);
	}
    /**
     * Adds a value to property PatientInformationInsert from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPatientInformationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PATIENTINFORMATIONINSERT, value);
	}
	
    /**
     * Adds a value to property PatientInformationInsert from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPatientInformationInsert(Thing value) {
		Base.add(this.model, this.getResource(), PATIENTINFORMATIONINSERT, value);
	}
  

    /**
     * Sets a value of property PatientInformationInsert from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPatientInformationInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PATIENTINFORMATIONINSERT, value);
	}
	
    /**
     * Sets a value of property PatientInformationInsert from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPatientInformationInsert( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PATIENTINFORMATIONINSERT, value);
	}
    /**
     * Sets a value of property PatientInformationInsert from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPatientInformationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PATIENTINFORMATIONINSERT, value);
	}
	
    /**
     * Sets a value of property PatientInformationInsert from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPatientInformationInsert(Thing value) {
		Base.set(this.model, this.getResource(), PATIENTINFORMATIONINSERT, value);
	}
  


    /**
     * Removes a value of property PatientInformationInsert as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePatientInformationInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PATIENTINFORMATIONINSERT, value);
	}
	
    /**
     * Removes a value of property PatientInformationInsert as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePatientInformationInsert( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PATIENTINFORMATIONINSERT, value);
	}
    /**
     * Removes a value of property PatientInformationInsert given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePatientInformationInsert(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PATIENTINFORMATIONINSERT, value);
	}
	
    /**
     * Removes a value of property PatientInformationInsert given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePatientInformationInsert(Thing value) {
		Base.remove(this.model, this.getResource(), PATIENTINFORMATIONINSERT, value);
	}
  
    /**
     * Removes all values of property PatientInformationInsert     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPatientInformationInsert( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PATIENTINFORMATIONINSERT);
	}
	
    /**
     * Removes all values of property PatientInformationInsert	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPatientInformationInsert() {
		Base.removeAll(this.model, this.getResource(), PATIENTINFORMATIONINSERT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@792f004e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPdbExperimentalId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PDBEXPERIMENTALID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@792f004e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPdbExperimentalId() {
		return Base.has(this.model, this.getResource(), PDBEXPERIMENTALID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@792f004e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPdbExperimentalId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PDBEXPERIMENTALID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@792f004e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPdbExperimentalId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PDBEXPERIMENTALID, value);
	}

     /**
     * Get all values of property PdbExperimentalId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPdbExperimentalId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PDBEXPERIMENTALID);
	}
	
    /**
     * Get all values of property PdbExperimentalId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPdbExperimentalId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PDBEXPERIMENTALID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PdbExperimentalId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPdbExperimentalId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PDBEXPERIMENTALID);
	}

    /**
     * Get all values of property PdbExperimentalId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPdbExperimentalId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PDBEXPERIMENTALID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PdbExperimentalId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPdbExperimentalId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PDBEXPERIMENTALID, Thing.class);
	}
	
    /**
     * Get all values of property PdbExperimentalId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPdbExperimentalId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PDBEXPERIMENTALID, Thing.class);
	}

    /**
     * Get all values of property PdbExperimentalId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPdbExperimentalId() {
		return Base.getAll(this.model, this.getResource(), PDBEXPERIMENTALID, Thing.class);
	}

    /**
     * Get all values of property PdbExperimentalId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPdbExperimentalId_as() {
		return Base.getAll_as(this.model, this.getResource(), PDBEXPERIMENTALID, Thing.class);
	}
 
    /**
     * Adds a value to property PdbExperimentalId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPdbExperimentalId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PDBEXPERIMENTALID, value);
	}
	
    /**
     * Adds a value to property PdbExperimentalId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPdbExperimentalId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PDBEXPERIMENTALID, value);
	}
    /**
     * Adds a value to property PdbExperimentalId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPdbExperimentalId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PDBEXPERIMENTALID, value);
	}
	
    /**
     * Adds a value to property PdbExperimentalId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPdbExperimentalId(Thing value) {
		Base.add(this.model, this.getResource(), PDBEXPERIMENTALID, value);
	}
  

    /**
     * Sets a value of property PdbExperimentalId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPdbExperimentalId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PDBEXPERIMENTALID, value);
	}
	
    /**
     * Sets a value of property PdbExperimentalId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPdbExperimentalId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PDBEXPERIMENTALID, value);
	}
    /**
     * Sets a value of property PdbExperimentalId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPdbExperimentalId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PDBEXPERIMENTALID, value);
	}
	
    /**
     * Sets a value of property PdbExperimentalId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPdbExperimentalId(Thing value) {
		Base.set(this.model, this.getResource(), PDBEXPERIMENTALID, value);
	}
  


    /**
     * Removes a value of property PdbExperimentalId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePdbExperimentalId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PDBEXPERIMENTALID, value);
	}
	
    /**
     * Removes a value of property PdbExperimentalId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePdbExperimentalId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PDBEXPERIMENTALID, value);
	}
    /**
     * Removes a value of property PdbExperimentalId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePdbExperimentalId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PDBEXPERIMENTALID, value);
	}
	
    /**
     * Removes a value of property PdbExperimentalId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePdbExperimentalId(Thing value) {
		Base.remove(this.model, this.getResource(), PDBEXPERIMENTALID, value);
	}
  
    /**
     * Removes all values of property PdbExperimentalId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPdbExperimentalId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PDBEXPERIMENTALID);
	}
	
    /**
     * Removes all values of property PdbExperimentalId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPdbExperimentalId() {
		Base.removeAll(this.model, this.getResource(), PDBEXPERIMENTALID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ea0b965 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPdbHomologyId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PDBHOMOLOGYID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ea0b965 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPdbHomologyId() {
		return Base.has(this.model, this.getResource(), PDBHOMOLOGYID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ea0b965 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPdbHomologyId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PDBHOMOLOGYID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ea0b965 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPdbHomologyId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PDBHOMOLOGYID, value);
	}

     /**
     * Get all values of property PdbHomologyId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPdbHomologyId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PDBHOMOLOGYID);
	}
	
    /**
     * Get all values of property PdbHomologyId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPdbHomologyId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PDBHOMOLOGYID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PdbHomologyId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPdbHomologyId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PDBHOMOLOGYID);
	}

    /**
     * Get all values of property PdbHomologyId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPdbHomologyId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PDBHOMOLOGYID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PdbHomologyId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPdbHomologyId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PDBHOMOLOGYID, Thing.class);
	}
	
    /**
     * Get all values of property PdbHomologyId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPdbHomologyId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PDBHOMOLOGYID, Thing.class);
	}

    /**
     * Get all values of property PdbHomologyId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPdbHomologyId() {
		return Base.getAll(this.model, this.getResource(), PDBHOMOLOGYID, Thing.class);
	}

    /**
     * Get all values of property PdbHomologyId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPdbHomologyId_as() {
		return Base.getAll_as(this.model, this.getResource(), PDBHOMOLOGYID, Thing.class);
	}
 
    /**
     * Adds a value to property PdbHomologyId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPdbHomologyId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PDBHOMOLOGYID, value);
	}
	
    /**
     * Adds a value to property PdbHomologyId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPdbHomologyId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PDBHOMOLOGYID, value);
	}
    /**
     * Adds a value to property PdbHomologyId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPdbHomologyId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PDBHOMOLOGYID, value);
	}
	
    /**
     * Adds a value to property PdbHomologyId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPdbHomologyId(Thing value) {
		Base.add(this.model, this.getResource(), PDBHOMOLOGYID, value);
	}
  

    /**
     * Sets a value of property PdbHomologyId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPdbHomologyId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PDBHOMOLOGYID, value);
	}
	
    /**
     * Sets a value of property PdbHomologyId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPdbHomologyId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PDBHOMOLOGYID, value);
	}
    /**
     * Sets a value of property PdbHomologyId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPdbHomologyId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PDBHOMOLOGYID, value);
	}
	
    /**
     * Sets a value of property PdbHomologyId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPdbHomologyId(Thing value) {
		Base.set(this.model, this.getResource(), PDBHOMOLOGYID, value);
	}
  


    /**
     * Removes a value of property PdbHomologyId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePdbHomologyId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PDBHOMOLOGYID, value);
	}
	
    /**
     * Removes a value of property PdbHomologyId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePdbHomologyId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PDBHOMOLOGYID, value);
	}
    /**
     * Removes a value of property PdbHomologyId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePdbHomologyId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PDBHOMOLOGYID, value);
	}
	
    /**
     * Removes a value of property PdbHomologyId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePdbHomologyId(Thing value) {
		Base.remove(this.model, this.getResource(), PDBHOMOLOGYID, value);
	}
  
    /**
     * Removes all values of property PdbHomologyId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPdbHomologyId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PDBHOMOLOGYID);
	}
	
    /**
     * Removes all values of property PdbHomologyId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPdbHomologyId() {
		Base.removeAll(this.model, this.getResource(), PDBHOMOLOGYID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17f3e1ce has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPdbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PDBID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17f3e1ce has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPdbId() {
		return Base.has(this.model, this.getResource(), PDBID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17f3e1ce has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPdbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PDBID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17f3e1ce has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPdbId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PDBID, value);
	}

     /**
     * Get all values of property PdbId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPdbId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PDBID);
	}
	
    /**
     * Get all values of property PdbId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPdbId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PDBID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PdbId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPdbId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PDBID);
	}

    /**
     * Get all values of property PdbId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPdbId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PDBID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PdbId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPdbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PDBID, Thing.class);
	}
	
    /**
     * Get all values of property PdbId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPdbId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PDBID, Thing.class);
	}

    /**
     * Get all values of property PdbId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPdbId() {
		return Base.getAll(this.model, this.getResource(), PDBID, Thing.class);
	}

    /**
     * Get all values of property PdbId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPdbId_as() {
		return Base.getAll_as(this.model, this.getResource(), PDBID, Thing.class);
	}
 
    /**
     * Adds a value to property PdbId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPdbId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PDBID, value);
	}
	
    /**
     * Adds a value to property PdbId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPdbId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PDBID, value);
	}
    /**
     * Adds a value to property PdbId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPdbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PDBID, value);
	}
	
    /**
     * Adds a value to property PdbId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPdbId(Thing value) {
		Base.add(this.model, this.getResource(), PDBID, value);
	}
  

    /**
     * Sets a value of property PdbId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPdbId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PDBID, value);
	}
	
    /**
     * Sets a value of property PdbId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPdbId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PDBID, value);
	}
    /**
     * Sets a value of property PdbId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPdbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PDBID, value);
	}
	
    /**
     * Sets a value of property PdbId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPdbId(Thing value) {
		Base.set(this.model, this.getResource(), PDBID, value);
	}
  


    /**
     * Removes a value of property PdbId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePdbId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PDBID, value);
	}
	
    /**
     * Removes a value of property PdbId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePdbId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PDBID, value);
	}
    /**
     * Removes a value of property PdbId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePdbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PDBID, value);
	}
	
    /**
     * Removes a value of property PdbId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePdbId(Thing value) {
		Base.remove(this.model, this.getResource(), PDBID, value);
	}
  
    /**
     * Removes all values of property PdbId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPdbId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PDBID);
	}
	
    /**
     * Removes all values of property PdbId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPdbId() {
		Base.removeAll(this.model, this.getResource(), PDBID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c383c66 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPdbIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PDBIDPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c383c66 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPdbIdPage() {
		return Base.has(this.model, this.getResource(), PDBIDPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c383c66 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPdbIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PDBIDPAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c383c66 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPdbIdPage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PDBIDPAGE, value);
	}

     /**
     * Get all values of property PdbIdPage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPdbIdPage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PDBIDPAGE);
	}
	
    /**
     * Get all values of property PdbIdPage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPdbIdPage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PDBIDPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PdbIdPage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPdbIdPage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PDBIDPAGE);
	}

    /**
     * Get all values of property PdbIdPage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPdbIdPage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PDBIDPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PdbIdPage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPdbIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PDBIDPAGE, Thing.class);
	}
	
    /**
     * Get all values of property PdbIdPage as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPdbIdPage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PDBIDPAGE, Thing.class);
	}

    /**
     * Get all values of property PdbIdPage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPdbIdPage() {
		return Base.getAll(this.model, this.getResource(), PDBIDPAGE, Thing.class);
	}

    /**
     * Get all values of property PdbIdPage as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPdbIdPage_as() {
		return Base.getAll_as(this.model, this.getResource(), PDBIDPAGE, Thing.class);
	}
 
    /**
     * Adds a value to property PdbIdPage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPdbIdPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PDBIDPAGE, value);
	}
	
    /**
     * Adds a value to property PdbIdPage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPdbIdPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PDBIDPAGE, value);
	}
    /**
     * Adds a value to property PdbIdPage from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPdbIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PDBIDPAGE, value);
	}
	
    /**
     * Adds a value to property PdbIdPage from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPdbIdPage(Thing value) {
		Base.add(this.model, this.getResource(), PDBIDPAGE, value);
	}
  

    /**
     * Sets a value of property PdbIdPage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPdbIdPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PDBIDPAGE, value);
	}
	
    /**
     * Sets a value of property PdbIdPage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPdbIdPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PDBIDPAGE, value);
	}
    /**
     * Sets a value of property PdbIdPage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPdbIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PDBIDPAGE, value);
	}
	
    /**
     * Sets a value of property PdbIdPage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPdbIdPage(Thing value) {
		Base.set(this.model, this.getResource(), PDBIDPAGE, value);
	}
  


    /**
     * Removes a value of property PdbIdPage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePdbIdPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PDBIDPAGE, value);
	}
	
    /**
     * Removes a value of property PdbIdPage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePdbIdPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PDBIDPAGE, value);
	}
    /**
     * Removes a value of property PdbIdPage given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePdbIdPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PDBIDPAGE, value);
	}
	
    /**
     * Removes a value of property PdbIdPage given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePdbIdPage(Thing value) {
		Base.remove(this.model, this.getResource(), PDBIDPAGE, value);
	}
  
    /**
     * Removes all values of property PdbIdPage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPdbIdPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PDBIDPAGE);
	}
	
    /**
     * Removes all values of property PdbIdPage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPdbIdPage() {
		Base.removeAll(this.model, this.getResource(), PDBIDPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@267963d5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPdrhealthLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PDRHEALTHLINK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@267963d5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPdrhealthLink() {
		return Base.has(this.model, this.getResource(), PDRHEALTHLINK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@267963d5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPdrhealthLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PDRHEALTHLINK, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@267963d5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPdrhealthLink( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PDRHEALTHLINK, value);
	}

     /**
     * Get all values of property PdrhealthLink as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPdrhealthLink_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PDRHEALTHLINK);
	}
	
    /**
     * Get all values of property PdrhealthLink as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPdrhealthLink_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PDRHEALTHLINK, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PdrhealthLink as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPdrhealthLink_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PDRHEALTHLINK);
	}

    /**
     * Get all values of property PdrhealthLink as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPdrhealthLink_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PDRHEALTHLINK, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PdrhealthLink     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPdrhealthLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PDRHEALTHLINK, Thing.class);
	}
	
    /**
     * Get all values of property PdrhealthLink as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPdrhealthLink_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PDRHEALTHLINK, Thing.class);
	}

    /**
     * Get all values of property PdrhealthLink     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPdrhealthLink() {
		return Base.getAll(this.model, this.getResource(), PDRHEALTHLINK, Thing.class);
	}

    /**
     * Get all values of property PdrhealthLink as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPdrhealthLink_as() {
		return Base.getAll_as(this.model, this.getResource(), PDRHEALTHLINK, Thing.class);
	}
 
    /**
     * Adds a value to property PdrhealthLink as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPdrhealthLink( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PDRHEALTHLINK, value);
	}
	
    /**
     * Adds a value to property PdrhealthLink as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPdrhealthLink( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PDRHEALTHLINK, value);
	}
    /**
     * Adds a value to property PdrhealthLink from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPdrhealthLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PDRHEALTHLINK, value);
	}
	
    /**
     * Adds a value to property PdrhealthLink from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPdrhealthLink(Thing value) {
		Base.add(this.model, this.getResource(), PDRHEALTHLINK, value);
	}
  

    /**
     * Sets a value of property PdrhealthLink from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPdrhealthLink( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PDRHEALTHLINK, value);
	}
	
    /**
     * Sets a value of property PdrhealthLink from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPdrhealthLink( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PDRHEALTHLINK, value);
	}
    /**
     * Sets a value of property PdrhealthLink from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPdrhealthLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PDRHEALTHLINK, value);
	}
	
    /**
     * Sets a value of property PdrhealthLink from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPdrhealthLink(Thing value) {
		Base.set(this.model, this.getResource(), PDRHEALTHLINK, value);
	}
  


    /**
     * Removes a value of property PdrhealthLink as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePdrhealthLink( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PDRHEALTHLINK, value);
	}
	
    /**
     * Removes a value of property PdrhealthLink as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePdrhealthLink( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PDRHEALTHLINK, value);
	}
    /**
     * Removes a value of property PdrhealthLink given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePdrhealthLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PDRHEALTHLINK, value);
	}
	
    /**
     * Removes a value of property PdrhealthLink given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePdrhealthLink(Thing value) {
		Base.remove(this.model, this.getResource(), PDRHEALTHLINK, value);
	}
  
    /**
     * Removes all values of property PdrhealthLink     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPdrhealthLink( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PDRHEALTHLINK);
	}
	
    /**
     * Removes all values of property PdrhealthLink	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPdrhealthLink() {
		Base.removeAll(this.model, this.getResource(), PDRHEALTHLINK);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33b6722f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPfamDomainFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PFAMDOMAINFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33b6722f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPfamDomainFunction() {
		return Base.has(this.model, this.getResource(), PFAMDOMAINFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33b6722f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPfamDomainFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PFAMDOMAINFUNCTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33b6722f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPfamDomainFunction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PFAMDOMAINFUNCTION, value);
	}

     /**
     * Get all values of property PfamDomainFunction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPfamDomainFunction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PFAMDOMAINFUNCTION);
	}
	
    /**
     * Get all values of property PfamDomainFunction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPfamDomainFunction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PFAMDOMAINFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PfamDomainFunction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPfamDomainFunction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PFAMDOMAINFUNCTION);
	}

    /**
     * Get all values of property PfamDomainFunction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPfamDomainFunction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PFAMDOMAINFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PfamDomainFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPfamDomainFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PFAMDOMAINFUNCTION, Thing.class);
	}
	
    /**
     * Get all values of property PfamDomainFunction as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPfamDomainFunction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PFAMDOMAINFUNCTION, Thing.class);
	}

    /**
     * Get all values of property PfamDomainFunction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPfamDomainFunction() {
		return Base.getAll(this.model, this.getResource(), PFAMDOMAINFUNCTION, Thing.class);
	}

    /**
     * Get all values of property PfamDomainFunction as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPfamDomainFunction_as() {
		return Base.getAll_as(this.model, this.getResource(), PFAMDOMAINFUNCTION, Thing.class);
	}
 
    /**
     * Adds a value to property PfamDomainFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPfamDomainFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PFAMDOMAINFUNCTION, value);
	}
	
    /**
     * Adds a value to property PfamDomainFunction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPfamDomainFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PFAMDOMAINFUNCTION, value);
	}
    /**
     * Adds a value to property PfamDomainFunction from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPfamDomainFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PFAMDOMAINFUNCTION, value);
	}
	
    /**
     * Adds a value to property PfamDomainFunction from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPfamDomainFunction(Thing value) {
		Base.add(this.model, this.getResource(), PFAMDOMAINFUNCTION, value);
	}
  

    /**
     * Sets a value of property PfamDomainFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPfamDomainFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PFAMDOMAINFUNCTION, value);
	}
	
    /**
     * Sets a value of property PfamDomainFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPfamDomainFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PFAMDOMAINFUNCTION, value);
	}
    /**
     * Sets a value of property PfamDomainFunction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPfamDomainFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PFAMDOMAINFUNCTION, value);
	}
	
    /**
     * Sets a value of property PfamDomainFunction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPfamDomainFunction(Thing value) {
		Base.set(this.model, this.getResource(), PFAMDOMAINFUNCTION, value);
	}
  


    /**
     * Removes a value of property PfamDomainFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePfamDomainFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PFAMDOMAINFUNCTION, value);
	}
	
    /**
     * Removes a value of property PfamDomainFunction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePfamDomainFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PFAMDOMAINFUNCTION, value);
	}
    /**
     * Removes a value of property PfamDomainFunction given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePfamDomainFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PFAMDOMAINFUNCTION, value);
	}
	
    /**
     * Removes a value of property PfamDomainFunction given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePfamDomainFunction(Thing value) {
		Base.remove(this.model, this.getResource(), PFAMDOMAINFUNCTION, value);
	}
  
    /**
     * Removes all values of property PfamDomainFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPfamDomainFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PFAMDOMAINFUNCTION);
	}
	
    /**
     * Removes all values of property PfamDomainFunction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPfamDomainFunction() {
		Base.removeAll(this.model, this.getResource(), PFAMDOMAINFUNCTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@407364f8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPfamDomainFunctionPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PFAMDOMAINFUNCTIONPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@407364f8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPfamDomainFunctionPage() {
		return Base.has(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@407364f8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPfamDomainFunctionPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PFAMDOMAINFUNCTIONPAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@407364f8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPfamDomainFunctionPage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE, value);
	}

     /**
     * Get all values of property PfamDomainFunctionPage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPfamDomainFunctionPage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PFAMDOMAINFUNCTIONPAGE);
	}
	
    /**
     * Get all values of property PfamDomainFunctionPage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPfamDomainFunctionPage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PFAMDOMAINFUNCTIONPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PfamDomainFunctionPage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPfamDomainFunctionPage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE);
	}

    /**
     * Get all values of property PfamDomainFunctionPage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPfamDomainFunctionPage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PfamDomainFunctionPage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPfamDomainFunctionPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PFAMDOMAINFUNCTIONPAGE, Thing.class);
	}
	
    /**
     * Get all values of property PfamDomainFunctionPage as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPfamDomainFunctionPage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PFAMDOMAINFUNCTIONPAGE, Thing.class);
	}

    /**
     * Get all values of property PfamDomainFunctionPage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPfamDomainFunctionPage() {
		return Base.getAll(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE, Thing.class);
	}

    /**
     * Get all values of property PfamDomainFunctionPage as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPfamDomainFunctionPage_as() {
		return Base.getAll_as(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE, Thing.class);
	}
 
    /**
     * Adds a value to property PfamDomainFunctionPage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPfamDomainFunctionPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PFAMDOMAINFUNCTIONPAGE, value);
	}
	
    /**
     * Adds a value to property PfamDomainFunctionPage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPfamDomainFunctionPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE, value);
	}
    /**
     * Adds a value to property PfamDomainFunctionPage from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPfamDomainFunctionPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PFAMDOMAINFUNCTIONPAGE, value);
	}
	
    /**
     * Adds a value to property PfamDomainFunctionPage from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPfamDomainFunctionPage(Thing value) {
		Base.add(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE, value);
	}
  

    /**
     * Sets a value of property PfamDomainFunctionPage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPfamDomainFunctionPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PFAMDOMAINFUNCTIONPAGE, value);
	}
	
    /**
     * Sets a value of property PfamDomainFunctionPage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPfamDomainFunctionPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE, value);
	}
    /**
     * Sets a value of property PfamDomainFunctionPage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPfamDomainFunctionPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PFAMDOMAINFUNCTIONPAGE, value);
	}
	
    /**
     * Sets a value of property PfamDomainFunctionPage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPfamDomainFunctionPage(Thing value) {
		Base.set(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE, value);
	}
  


    /**
     * Removes a value of property PfamDomainFunctionPage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePfamDomainFunctionPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PFAMDOMAINFUNCTIONPAGE, value);
	}
	
    /**
     * Removes a value of property PfamDomainFunctionPage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePfamDomainFunctionPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE, value);
	}
    /**
     * Removes a value of property PfamDomainFunctionPage given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePfamDomainFunctionPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PFAMDOMAINFUNCTIONPAGE, value);
	}
	
    /**
     * Removes a value of property PfamDomainFunctionPage given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePfamDomainFunctionPage(Thing value) {
		Base.remove(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE, value);
	}
  
    /**
     * Removes all values of property PfamDomainFunctionPage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPfamDomainFunctionPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PFAMDOMAINFUNCTIONPAGE);
	}
	
    /**
     * Removes all values of property PfamDomainFunctionPage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPfamDomainFunctionPage() {
		Base.removeAll(this.model, this.getResource(), PFAMDOMAINFUNCTIONPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2159b575 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PHARMACOLOGY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2159b575 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPharmacology() {
		return Base.has(this.model, this.getResource(), PHARMACOLOGY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2159b575 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PHARMACOLOGY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2159b575 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPharmacology( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PHARMACOLOGY, value);
	}

     /**
     * Get all values of property Pharmacology as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPharmacology_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PHARMACOLOGY);
	}
	
    /**
     * Get all values of property Pharmacology as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPharmacology_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHARMACOLOGY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Pharmacology as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPharmacology_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PHARMACOLOGY);
	}

    /**
     * Get all values of property Pharmacology as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPharmacology_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PHARMACOLOGY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Pharmacology     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PHARMACOLOGY, Thing.class);
	}
	
    /**
     * Get all values of property Pharmacology as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPharmacology_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHARMACOLOGY, Thing.class);
	}

    /**
     * Get all values of property Pharmacology     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPharmacology() {
		return Base.getAll(this.model, this.getResource(), PHARMACOLOGY, Thing.class);
	}

    /**
     * Get all values of property Pharmacology as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPharmacology_as() {
		return Base.getAll_as(this.model, this.getResource(), PHARMACOLOGY, Thing.class);
	}
 
    /**
     * Adds a value to property Pharmacology as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPharmacology( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PHARMACOLOGY, value);
	}
	
    /**
     * Adds a value to property Pharmacology as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPharmacology( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PHARMACOLOGY, value);
	}
    /**
     * Adds a value to property Pharmacology from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PHARMACOLOGY, value);
	}
	
    /**
     * Adds a value to property Pharmacology from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPharmacology(Thing value) {
		Base.add(this.model, this.getResource(), PHARMACOLOGY, value);
	}
  

    /**
     * Sets a value of property Pharmacology from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPharmacology( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PHARMACOLOGY, value);
	}
	
    /**
     * Sets a value of property Pharmacology from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPharmacology( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PHARMACOLOGY, value);
	}
    /**
     * Sets a value of property Pharmacology from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PHARMACOLOGY, value);
	}
	
    /**
     * Sets a value of property Pharmacology from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPharmacology(Thing value) {
		Base.set(this.model, this.getResource(), PHARMACOLOGY, value);
	}
  


    /**
     * Removes a value of property Pharmacology as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePharmacology( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PHARMACOLOGY, value);
	}
	
    /**
     * Removes a value of property Pharmacology as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePharmacology( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PHARMACOLOGY, value);
	}
    /**
     * Removes a value of property Pharmacology given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePharmacology(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PHARMACOLOGY, value);
	}
	
    /**
     * Removes a value of property Pharmacology given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePharmacology(Thing value) {
		Base.remove(this.model, this.getResource(), PHARMACOLOGY, value);
	}
  
    /**
     * Removes all values of property Pharmacology     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPharmacology( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PHARMACOLOGY);
	}
	
    /**
     * Removes all values of property Pharmacology	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPharmacology() {
		Base.removeAll(this.model, this.getResource(), PHARMACOLOGY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4acce2d2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPharmgkbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PHARMGKBID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4acce2d2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPharmgkbId() {
		return Base.has(this.model, this.getResource(), PHARMGKBID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4acce2d2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPharmgkbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PHARMGKBID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4acce2d2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPharmgkbId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PHARMGKBID, value);
	}

     /**
     * Get all values of property PharmgkbId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPharmgkbId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PHARMGKBID);
	}
	
    /**
     * Get all values of property PharmgkbId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPharmgkbId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHARMGKBID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PharmgkbId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPharmgkbId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PHARMGKBID);
	}

    /**
     * Get all values of property PharmgkbId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPharmgkbId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PHARMGKBID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PharmgkbId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPharmgkbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PHARMGKBID, Thing.class);
	}
	
    /**
     * Get all values of property PharmgkbId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPharmgkbId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHARMGKBID, Thing.class);
	}

    /**
     * Get all values of property PharmgkbId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPharmgkbId() {
		return Base.getAll(this.model, this.getResource(), PHARMGKBID, Thing.class);
	}

    /**
     * Get all values of property PharmgkbId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPharmgkbId_as() {
		return Base.getAll_as(this.model, this.getResource(), PHARMGKBID, Thing.class);
	}
 
    /**
     * Adds a value to property PharmgkbId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPharmgkbId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PHARMGKBID, value);
	}
	
    /**
     * Adds a value to property PharmgkbId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPharmgkbId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PHARMGKBID, value);
	}
    /**
     * Adds a value to property PharmgkbId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPharmgkbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PHARMGKBID, value);
	}
	
    /**
     * Adds a value to property PharmgkbId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPharmgkbId(Thing value) {
		Base.add(this.model, this.getResource(), PHARMGKBID, value);
	}
  

    /**
     * Sets a value of property PharmgkbId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPharmgkbId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PHARMGKBID, value);
	}
	
    /**
     * Sets a value of property PharmgkbId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPharmgkbId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PHARMGKBID, value);
	}
    /**
     * Sets a value of property PharmgkbId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPharmgkbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PHARMGKBID, value);
	}
	
    /**
     * Sets a value of property PharmgkbId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPharmgkbId(Thing value) {
		Base.set(this.model, this.getResource(), PHARMGKBID, value);
	}
  


    /**
     * Removes a value of property PharmgkbId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePharmgkbId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PHARMGKBID, value);
	}
	
    /**
     * Removes a value of property PharmgkbId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePharmgkbId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PHARMGKBID, value);
	}
    /**
     * Removes a value of property PharmgkbId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePharmgkbId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PHARMGKBID, value);
	}
	
    /**
     * Removes a value of property PharmgkbId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePharmgkbId(Thing value) {
		Base.remove(this.model, this.getResource(), PHARMGKBID, value);
	}
  
    /**
     * Removes all values of property PharmgkbId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPharmgkbId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PHARMGKBID);
	}
	
    /**
     * Removes all values of property PharmgkbId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPharmgkbId() {
		Base.removeAll(this.model, this.getResource(), PHARMGKBID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c993c67 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPkaIsoelectricPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PKAISOELECTRICPOINT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c993c67 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPkaIsoelectricPoint() {
		return Base.has(this.model, this.getResource(), PKAISOELECTRICPOINT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c993c67 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPkaIsoelectricPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PKAISOELECTRICPOINT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c993c67 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPkaIsoelectricPoint( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PKAISOELECTRICPOINT, value);
	}

     /**
     * Get all values of property PkaIsoelectricPoint as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPkaIsoelectricPoint_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PKAISOELECTRICPOINT);
	}
	
    /**
     * Get all values of property PkaIsoelectricPoint as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPkaIsoelectricPoint_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PKAISOELECTRICPOINT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PkaIsoelectricPoint as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPkaIsoelectricPoint_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PKAISOELECTRICPOINT);
	}

    /**
     * Get all values of property PkaIsoelectricPoint as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPkaIsoelectricPoint_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PKAISOELECTRICPOINT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PkaIsoelectricPoint     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPkaIsoelectricPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PKAISOELECTRICPOINT, Thing.class);
	}
	
    /**
     * Get all values of property PkaIsoelectricPoint as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPkaIsoelectricPoint_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PKAISOELECTRICPOINT, Thing.class);
	}

    /**
     * Get all values of property PkaIsoelectricPoint     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPkaIsoelectricPoint() {
		return Base.getAll(this.model, this.getResource(), PKAISOELECTRICPOINT, Thing.class);
	}

    /**
     * Get all values of property PkaIsoelectricPoint as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPkaIsoelectricPoint_as() {
		return Base.getAll_as(this.model, this.getResource(), PKAISOELECTRICPOINT, Thing.class);
	}
 
    /**
     * Adds a value to property PkaIsoelectricPoint as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPkaIsoelectricPoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PKAISOELECTRICPOINT, value);
	}
	
    /**
     * Adds a value to property PkaIsoelectricPoint as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPkaIsoelectricPoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PKAISOELECTRICPOINT, value);
	}
    /**
     * Adds a value to property PkaIsoelectricPoint from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPkaIsoelectricPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PKAISOELECTRICPOINT, value);
	}
	
    /**
     * Adds a value to property PkaIsoelectricPoint from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPkaIsoelectricPoint(Thing value) {
		Base.add(this.model, this.getResource(), PKAISOELECTRICPOINT, value);
	}
  

    /**
     * Sets a value of property PkaIsoelectricPoint from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPkaIsoelectricPoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PKAISOELECTRICPOINT, value);
	}
	
    /**
     * Sets a value of property PkaIsoelectricPoint from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPkaIsoelectricPoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PKAISOELECTRICPOINT, value);
	}
    /**
     * Sets a value of property PkaIsoelectricPoint from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPkaIsoelectricPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PKAISOELECTRICPOINT, value);
	}
	
    /**
     * Sets a value of property PkaIsoelectricPoint from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPkaIsoelectricPoint(Thing value) {
		Base.set(this.model, this.getResource(), PKAISOELECTRICPOINT, value);
	}
  


    /**
     * Removes a value of property PkaIsoelectricPoint as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePkaIsoelectricPoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PKAISOELECTRICPOINT, value);
	}
	
    /**
     * Removes a value of property PkaIsoelectricPoint as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePkaIsoelectricPoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PKAISOELECTRICPOINT, value);
	}
    /**
     * Removes a value of property PkaIsoelectricPoint given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePkaIsoelectricPoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PKAISOELECTRICPOINT, value);
	}
	
    /**
     * Removes a value of property PkaIsoelectricPoint given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePkaIsoelectricPoint(Thing value) {
		Base.remove(this.model, this.getResource(), PKAISOELECTRICPOINT, value);
	}
  
    /**
     * Removes all values of property PkaIsoelectricPoint     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPkaIsoelectricPoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PKAISOELECTRICPOINT);
	}
	
    /**
     * Removes all values of property PkaIsoelectricPoint	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPkaIsoelectricPoint() {
		Base.removeAll(this.model, this.getResource(), PKAISOELECTRICPOINT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bfd7fa0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, POSSIBLEDISEASETARGET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bfd7fa0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPossibleDiseaseTarget() {
		return Base.has(this.model, this.getResource(), POSSIBLEDISEASETARGET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bfd7fa0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bfd7fa0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPossibleDiseaseTarget( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}

     /**
     * Get all values of property PossibleDiseaseTarget as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPossibleDiseaseTarget_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, POSSIBLEDISEASETARGET);
	}
	
    /**
     * Get all values of property PossibleDiseaseTarget as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPossibleDiseaseTarget_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSSIBLEDISEASETARGET, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PossibleDiseaseTarget as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPossibleDiseaseTarget_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), POSSIBLEDISEASETARGET);
	}

    /**
     * Get all values of property PossibleDiseaseTarget as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPossibleDiseaseTarget_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), POSSIBLEDISEASETARGET, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PossibleDiseaseTarget     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, POSSIBLEDISEASETARGET, Thing.class);
	}
	
    /**
     * Get all values of property PossibleDiseaseTarget as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPossibleDiseaseTarget_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSSIBLEDISEASETARGET, Thing.class);
	}

    /**
     * Get all values of property PossibleDiseaseTarget     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPossibleDiseaseTarget() {
		return Base.getAll(this.model, this.getResource(), POSSIBLEDISEASETARGET, Thing.class);
	}

    /**
     * Get all values of property PossibleDiseaseTarget as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPossibleDiseaseTarget_as() {
		return Base.getAll_as(this.model, this.getResource(), POSSIBLEDISEASETARGET, Thing.class);
	}
 
    /**
     * Adds a value to property PossibleDiseaseTarget as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPossibleDiseaseTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Adds a value to property PossibleDiseaseTarget as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPossibleDiseaseTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
    /**
     * Adds a value to property PossibleDiseaseTarget from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Adds a value to property PossibleDiseaseTarget from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPossibleDiseaseTarget(Thing value) {
		Base.add(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
  

    /**
     * Sets a value of property PossibleDiseaseTarget from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPossibleDiseaseTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Sets a value of property PossibleDiseaseTarget from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPossibleDiseaseTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
    /**
     * Sets a value of property PossibleDiseaseTarget from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Sets a value of property PossibleDiseaseTarget from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPossibleDiseaseTarget(Thing value) {
		Base.set(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
  


    /**
     * Removes a value of property PossibleDiseaseTarget as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePossibleDiseaseTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Removes a value of property PossibleDiseaseTarget as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePossibleDiseaseTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
    /**
     * Removes a value of property PossibleDiseaseTarget given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePossibleDiseaseTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, POSSIBLEDISEASETARGET, value);
	}
	
    /**
     * Removes a value of property PossibleDiseaseTarget given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePossibleDiseaseTarget(Thing value) {
		Base.remove(this.model, this.getResource(), POSSIBLEDISEASETARGET, value);
	}
  
    /**
     * Removes all values of property PossibleDiseaseTarget     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPossibleDiseaseTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, POSSIBLEDISEASETARGET);
	}
	
    /**
     * Removes all values of property PossibleDiseaseTarget	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPossibleDiseaseTarget() {
		Base.removeAll(this.model, this.getResource(), POSSIBLEDISEASETARGET);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67c41710 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPredictedLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67c41710 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPredictedLogpHydrophobicity() {
		return Base.has(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67c41710 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPredictedLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67c41710 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPredictedLogpHydrophobicity( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY, value);
	}

     /**
     * Get all values of property PredictedLogpHydrophobicity as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPredictedLogpHydrophobicity_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY);
	}
	
    /**
     * Get all values of property PredictedLogpHydrophobicity as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPredictedLogpHydrophobicity_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PredictedLogpHydrophobicity as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPredictedLogpHydrophobicity_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY);
	}

    /**
     * Get all values of property PredictedLogpHydrophobicity as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPredictedLogpHydrophobicity_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PredictedLogpHydrophobicity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPredictedLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY, Thing.class);
	}
	
    /**
     * Get all values of property PredictedLogpHydrophobicity as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPredictedLogpHydrophobicity_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY, Thing.class);
	}

    /**
     * Get all values of property PredictedLogpHydrophobicity     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPredictedLogpHydrophobicity() {
		return Base.getAll(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY, Thing.class);
	}

    /**
     * Get all values of property PredictedLogpHydrophobicity as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPredictedLogpHydrophobicity_as() {
		return Base.getAll_as(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY, Thing.class);
	}
 
    /**
     * Adds a value to property PredictedLogpHydrophobicity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPredictedLogpHydrophobicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Adds a value to property PredictedLogpHydrophobicity as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPredictedLogpHydrophobicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY, value);
	}
    /**
     * Adds a value to property PredictedLogpHydrophobicity from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPredictedLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Adds a value to property PredictedLogpHydrophobicity from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPredictedLogpHydrophobicity(Thing value) {
		Base.add(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY, value);
	}
  

    /**
     * Sets a value of property PredictedLogpHydrophobicity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPredictedLogpHydrophobicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Sets a value of property PredictedLogpHydrophobicity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPredictedLogpHydrophobicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY, value);
	}
    /**
     * Sets a value of property PredictedLogpHydrophobicity from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPredictedLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Sets a value of property PredictedLogpHydrophobicity from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPredictedLogpHydrophobicity(Thing value) {
		Base.set(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY, value);
	}
  


    /**
     * Removes a value of property PredictedLogpHydrophobicity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePredictedLogpHydrophobicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Removes a value of property PredictedLogpHydrophobicity as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePredictedLogpHydrophobicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY, value);
	}
    /**
     * Removes a value of property PredictedLogpHydrophobicity given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePredictedLogpHydrophobicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY, value);
	}
	
    /**
     * Removes a value of property PredictedLogpHydrophobicity given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePredictedLogpHydrophobicity(Thing value) {
		Base.remove(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY, value);
	}
  
    /**
     * Removes all values of property PredictedLogpHydrophobicity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPredictedLogpHydrophobicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREDICTEDLOGPHYDROPHOBICITY);
	}
	
    /**
     * Removes all values of property PredictedLogpHydrophobicity	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPredictedLogpHydrophobicity() {
		Base.removeAll(this.model, this.getResource(), PREDICTEDLOGPHYDROPHOBICITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@161d679f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPredictedLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREDICTEDLOGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@161d679f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPredictedLogs() {
		return Base.has(this.model, this.getResource(), PREDICTEDLOGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@161d679f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPredictedLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREDICTEDLOGS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@161d679f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPredictedLogs( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREDICTEDLOGS, value);
	}

     /**
     * Get all values of property PredictedLogs as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPredictedLogs_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PREDICTEDLOGS);
	}
	
    /**
     * Get all values of property PredictedLogs as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPredictedLogs_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREDICTEDLOGS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PredictedLogs as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPredictedLogs_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREDICTEDLOGS);
	}

    /**
     * Get all values of property PredictedLogs as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPredictedLogs_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREDICTEDLOGS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PredictedLogs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPredictedLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PREDICTEDLOGS, Thing.class);
	}
	
    /**
     * Get all values of property PredictedLogs as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPredictedLogs_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREDICTEDLOGS, Thing.class);
	}

    /**
     * Get all values of property PredictedLogs     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPredictedLogs() {
		return Base.getAll(this.model, this.getResource(), PREDICTEDLOGS, Thing.class);
	}

    /**
     * Get all values of property PredictedLogs as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPredictedLogs_as() {
		return Base.getAll_as(this.model, this.getResource(), PREDICTEDLOGS, Thing.class);
	}
 
    /**
     * Adds a value to property PredictedLogs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPredictedLogs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PREDICTEDLOGS, value);
	}
	
    /**
     * Adds a value to property PredictedLogs as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPredictedLogs( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PREDICTEDLOGS, value);
	}
    /**
     * Adds a value to property PredictedLogs from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPredictedLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PREDICTEDLOGS, value);
	}
	
    /**
     * Adds a value to property PredictedLogs from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPredictedLogs(Thing value) {
		Base.add(this.model, this.getResource(), PREDICTEDLOGS, value);
	}
  

    /**
     * Sets a value of property PredictedLogs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPredictedLogs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREDICTEDLOGS, value);
	}
	
    /**
     * Sets a value of property PredictedLogs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPredictedLogs( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREDICTEDLOGS, value);
	}
    /**
     * Sets a value of property PredictedLogs from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPredictedLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PREDICTEDLOGS, value);
	}
	
    /**
     * Sets a value of property PredictedLogs from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPredictedLogs(Thing value) {
		Base.set(this.model, this.getResource(), PREDICTEDLOGS, value);
	}
  


    /**
     * Removes a value of property PredictedLogs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePredictedLogs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREDICTEDLOGS, value);
	}
	
    /**
     * Removes a value of property PredictedLogs as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePredictedLogs( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREDICTEDLOGS, value);
	}
    /**
     * Removes a value of property PredictedLogs given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePredictedLogs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PREDICTEDLOGS, value);
	}
	
    /**
     * Removes a value of property PredictedLogs given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePredictedLogs(Thing value) {
		Base.remove(this.model, this.getResource(), PREDICTEDLOGS, value);
	}
  
    /**
     * Removes all values of property PredictedLogs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPredictedLogs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREDICTEDLOGS);
	}
	
    /**
     * Removes all values of property PredictedLogs	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPredictedLogs() {
		Base.removeAll(this.model, this.getResource(), PREDICTEDLOGS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14dafe2e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPredictedWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREDICTEDWATERSOLUBILITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14dafe2e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPredictedWaterSolubility() {
		return Base.has(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14dafe2e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPredictedWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREDICTEDWATERSOLUBILITY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14dafe2e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPredictedWaterSolubility( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY, value);
	}

     /**
     * Get all values of property PredictedWaterSolubility as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPredictedWaterSolubility_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PREDICTEDWATERSOLUBILITY);
	}
	
    /**
     * Get all values of property PredictedWaterSolubility as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPredictedWaterSolubility_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREDICTEDWATERSOLUBILITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PredictedWaterSolubility as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPredictedWaterSolubility_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY);
	}

    /**
     * Get all values of property PredictedWaterSolubility as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPredictedWaterSolubility_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PredictedWaterSolubility     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPredictedWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PREDICTEDWATERSOLUBILITY, Thing.class);
	}
	
    /**
     * Get all values of property PredictedWaterSolubility as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPredictedWaterSolubility_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREDICTEDWATERSOLUBILITY, Thing.class);
	}

    /**
     * Get all values of property PredictedWaterSolubility     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPredictedWaterSolubility() {
		return Base.getAll(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY, Thing.class);
	}

    /**
     * Get all values of property PredictedWaterSolubility as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPredictedWaterSolubility_as() {
		return Base.getAll_as(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY, Thing.class);
	}
 
    /**
     * Adds a value to property PredictedWaterSolubility as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPredictedWaterSolubility( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PREDICTEDWATERSOLUBILITY, value);
	}
	
    /**
     * Adds a value to property PredictedWaterSolubility as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPredictedWaterSolubility( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY, value);
	}
    /**
     * Adds a value to property PredictedWaterSolubility from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPredictedWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PREDICTEDWATERSOLUBILITY, value);
	}
	
    /**
     * Adds a value to property PredictedWaterSolubility from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPredictedWaterSolubility(Thing value) {
		Base.add(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY, value);
	}
  

    /**
     * Sets a value of property PredictedWaterSolubility from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPredictedWaterSolubility( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREDICTEDWATERSOLUBILITY, value);
	}
	
    /**
     * Sets a value of property PredictedWaterSolubility from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPredictedWaterSolubility( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY, value);
	}
    /**
     * Sets a value of property PredictedWaterSolubility from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPredictedWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PREDICTEDWATERSOLUBILITY, value);
	}
	
    /**
     * Sets a value of property PredictedWaterSolubility from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPredictedWaterSolubility(Thing value) {
		Base.set(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY, value);
	}
  


    /**
     * Removes a value of property PredictedWaterSolubility as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePredictedWaterSolubility( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREDICTEDWATERSOLUBILITY, value);
	}
	
    /**
     * Removes a value of property PredictedWaterSolubility as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePredictedWaterSolubility( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY, value);
	}
    /**
     * Removes a value of property PredictedWaterSolubility given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePredictedWaterSolubility(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PREDICTEDWATERSOLUBILITY, value);
	}
	
    /**
     * Removes a value of property PredictedWaterSolubility given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePredictedWaterSolubility(Thing value) {
		Base.remove(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY, value);
	}
  
    /**
     * Removes all values of property PredictedWaterSolubility     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPredictedWaterSolubility( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREDICTEDWATERSOLUBILITY);
	}
	
    /**
     * Removes all values of property PredictedWaterSolubility	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPredictedWaterSolubility() {
		Base.removeAll(this.model, this.getResource(), PREDICTEDWATERSOLUBILITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@141aac80 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrimaryAccessionNo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRIMARYACCESSIONNO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@141aac80 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrimaryAccessionNo() {
		return Base.has(this.model, this.getResource(), PRIMARYACCESSIONNO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@141aac80 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrimaryAccessionNo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRIMARYACCESSIONNO, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@141aac80 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrimaryAccessionNo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRIMARYACCESSIONNO, value);
	}

     /**
     * Get all values of property PrimaryAccessionNo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryAccessionNo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRIMARYACCESSIONNO);
	}
	
    /**
     * Get all values of property PrimaryAccessionNo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrimaryAccessionNo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIMARYACCESSIONNO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PrimaryAccessionNo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryAccessionNo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRIMARYACCESSIONNO);
	}

    /**
     * Get all values of property PrimaryAccessionNo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrimaryAccessionNo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRIMARYACCESSIONNO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PrimaryAccessionNo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPrimaryAccessionNo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRIMARYACCESSIONNO, Thing.class);
	}
	
    /**
     * Get all values of property PrimaryAccessionNo as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPrimaryAccessionNo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIMARYACCESSIONNO, Thing.class);
	}

    /**
     * Get all values of property PrimaryAccessionNo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPrimaryAccessionNo() {
		return Base.getAll(this.model, this.getResource(), PRIMARYACCESSIONNO, Thing.class);
	}

    /**
     * Get all values of property PrimaryAccessionNo as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPrimaryAccessionNo_as() {
		return Base.getAll_as(this.model, this.getResource(), PRIMARYACCESSIONNO, Thing.class);
	}
 
    /**
     * Adds a value to property PrimaryAccessionNo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrimaryAccessionNo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRIMARYACCESSIONNO, value);
	}
	
    /**
     * Adds a value to property PrimaryAccessionNo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrimaryAccessionNo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRIMARYACCESSIONNO, value);
	}
    /**
     * Adds a value to property PrimaryAccessionNo from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrimaryAccessionNo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PRIMARYACCESSIONNO, value);
	}
	
    /**
     * Adds a value to property PrimaryAccessionNo from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrimaryAccessionNo(Thing value) {
		Base.add(this.model, this.getResource(), PRIMARYACCESSIONNO, value);
	}
  

    /**
     * Sets a value of property PrimaryAccessionNo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrimaryAccessionNo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRIMARYACCESSIONNO, value);
	}
	
    /**
     * Sets a value of property PrimaryAccessionNo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrimaryAccessionNo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRIMARYACCESSIONNO, value);
	}
    /**
     * Sets a value of property PrimaryAccessionNo from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrimaryAccessionNo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PRIMARYACCESSIONNO, value);
	}
	
    /**
     * Sets a value of property PrimaryAccessionNo from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrimaryAccessionNo(Thing value) {
		Base.set(this.model, this.getResource(), PRIMARYACCESSIONNO, value);
	}
  


    /**
     * Removes a value of property PrimaryAccessionNo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrimaryAccessionNo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRIMARYACCESSIONNO, value);
	}
	
    /**
     * Removes a value of property PrimaryAccessionNo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrimaryAccessionNo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRIMARYACCESSIONNO, value);
	}
    /**
     * Removes a value of property PrimaryAccessionNo given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrimaryAccessionNo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PRIMARYACCESSIONNO, value);
	}
	
    /**
     * Removes a value of property PrimaryAccessionNo given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrimaryAccessionNo(Thing value) {
		Base.remove(this.model, this.getResource(), PRIMARYACCESSIONNO, value);
	}
  
    /**
     * Removes all values of property PrimaryAccessionNo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrimaryAccessionNo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRIMARYACCESSIONNO);
	}
	
    /**
     * Removes all values of property PrimaryAccessionNo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrimaryAccessionNo() {
		Base.removeAll(this.model, this.getResource(), PRIMARYACCESSIONNO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13440696 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasProteinBinding(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PROTEINBINDING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13440696 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasProteinBinding() {
		return Base.has(this.model, this.getResource(), PROTEINBINDING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13440696 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasProteinBinding(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PROTEINBINDING, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@13440696 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasProteinBinding( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PROTEINBINDING, value);
	}

     /**
     * Get all values of property ProteinBinding as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllProteinBinding_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PROTEINBINDING);
	}
	
    /**
     * Get all values of property ProteinBinding as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllProteinBinding_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROTEINBINDING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ProteinBinding as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllProteinBinding_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PROTEINBINDING);
	}

    /**
     * Get all values of property ProteinBinding as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllProteinBinding_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PROTEINBINDING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ProteinBinding     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllProteinBinding(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PROTEINBINDING, Thing.class);
	}
	
    /**
     * Get all values of property ProteinBinding as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllProteinBinding_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROTEINBINDING, Thing.class);
	}

    /**
     * Get all values of property ProteinBinding     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllProteinBinding() {
		return Base.getAll(this.model, this.getResource(), PROTEINBINDING, Thing.class);
	}

    /**
     * Get all values of property ProteinBinding as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllProteinBinding_as() {
		return Base.getAll_as(this.model, this.getResource(), PROTEINBINDING, Thing.class);
	}
 
    /**
     * Adds a value to property ProteinBinding as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addProteinBinding( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PROTEINBINDING, value);
	}
	
    /**
     * Adds a value to property ProteinBinding as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addProteinBinding( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PROTEINBINDING, value);
	}
    /**
     * Adds a value to property ProteinBinding from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addProteinBinding(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PROTEINBINDING, value);
	}
	
    /**
     * Adds a value to property ProteinBinding from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addProteinBinding(Thing value) {
		Base.add(this.model, this.getResource(), PROTEINBINDING, value);
	}
  

    /**
     * Sets a value of property ProteinBinding from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setProteinBinding( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PROTEINBINDING, value);
	}
	
    /**
     * Sets a value of property ProteinBinding from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setProteinBinding( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PROTEINBINDING, value);
	}
    /**
     * Sets a value of property ProteinBinding from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setProteinBinding(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PROTEINBINDING, value);
	}
	
    /**
     * Sets a value of property ProteinBinding from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setProteinBinding(Thing value) {
		Base.set(this.model, this.getResource(), PROTEINBINDING, value);
	}
  


    /**
     * Removes a value of property ProteinBinding as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeProteinBinding( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PROTEINBINDING, value);
	}
	
    /**
     * Removes a value of property ProteinBinding as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeProteinBinding( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PROTEINBINDING, value);
	}
    /**
     * Removes a value of property ProteinBinding given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeProteinBinding(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PROTEINBINDING, value);
	}
	
    /**
     * Removes a value of property ProteinBinding given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeProteinBinding(Thing value) {
		Base.remove(this.model, this.getResource(), PROTEINBINDING, value);
	}
  
    /**
     * Removes all values of property ProteinBinding     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllProteinBinding( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROTEINBINDING);
	}
	
    /**
     * Removes all values of property ProteinBinding	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllProteinBinding() {
		Base.removeAll(this.model, this.getResource(), PROTEINBINDING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b94c65e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasProteinSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PROTEINSEQUENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b94c65e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasProteinSequence() {
		return Base.has(this.model, this.getResource(), PROTEINSEQUENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b94c65e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasProteinSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PROTEINSEQUENCE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b94c65e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasProteinSequence( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PROTEINSEQUENCE, value);
	}

     /**
     * Get all values of property ProteinSequence as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllProteinSequence_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PROTEINSEQUENCE);
	}
	
    /**
     * Get all values of property ProteinSequence as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllProteinSequence_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROTEINSEQUENCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ProteinSequence as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllProteinSequence_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PROTEINSEQUENCE);
	}

    /**
     * Get all values of property ProteinSequence as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllProteinSequence_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PROTEINSEQUENCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ProteinSequence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllProteinSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PROTEINSEQUENCE, Thing.class);
	}
	
    /**
     * Get all values of property ProteinSequence as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllProteinSequence_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROTEINSEQUENCE, Thing.class);
	}

    /**
     * Get all values of property ProteinSequence     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllProteinSequence() {
		return Base.getAll(this.model, this.getResource(), PROTEINSEQUENCE, Thing.class);
	}

    /**
     * Get all values of property ProteinSequence as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllProteinSequence_as() {
		return Base.getAll_as(this.model, this.getResource(), PROTEINSEQUENCE, Thing.class);
	}
 
    /**
     * Adds a value to property ProteinSequence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addProteinSequence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PROTEINSEQUENCE, value);
	}
	
    /**
     * Adds a value to property ProteinSequence as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addProteinSequence( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PROTEINSEQUENCE, value);
	}
    /**
     * Adds a value to property ProteinSequence from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addProteinSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PROTEINSEQUENCE, value);
	}
	
    /**
     * Adds a value to property ProteinSequence from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addProteinSequence(Thing value) {
		Base.add(this.model, this.getResource(), PROTEINSEQUENCE, value);
	}
  

    /**
     * Sets a value of property ProteinSequence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setProteinSequence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PROTEINSEQUENCE, value);
	}
	
    /**
     * Sets a value of property ProteinSequence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setProteinSequence( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PROTEINSEQUENCE, value);
	}
    /**
     * Sets a value of property ProteinSequence from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setProteinSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PROTEINSEQUENCE, value);
	}
	
    /**
     * Sets a value of property ProteinSequence from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setProteinSequence(Thing value) {
		Base.set(this.model, this.getResource(), PROTEINSEQUENCE, value);
	}
  


    /**
     * Removes a value of property ProteinSequence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeProteinSequence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PROTEINSEQUENCE, value);
	}
	
    /**
     * Removes a value of property ProteinSequence as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeProteinSequence( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PROTEINSEQUENCE, value);
	}
    /**
     * Removes a value of property ProteinSequence given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeProteinSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PROTEINSEQUENCE, value);
	}
	
    /**
     * Removes a value of property ProteinSequence given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeProteinSequence(Thing value) {
		Base.remove(this.model, this.getResource(), PROTEINSEQUENCE, value);
	}
  
    /**
     * Removes all values of property ProteinSequence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllProteinSequence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROTEINSEQUENCE);
	}
	
    /**
     * Removes all values of property ProteinSequence	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllProteinSequence() {
		Base.removeAll(this.model, this.getResource(), PROTEINSEQUENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c8a063 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPubchemCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PUBCHEMCOMPOUNDID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c8a063 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPubchemCompoundId() {
		return Base.has(this.model, this.getResource(), PUBCHEMCOMPOUNDID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c8a063 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPubchemCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PUBCHEMCOMPOUNDID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c8a063 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPubchemCompoundId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PUBCHEMCOMPOUNDID, value);
	}

     /**
     * Get all values of property PubchemCompoundId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPubchemCompoundId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PUBCHEMCOMPOUNDID);
	}
	
    /**
     * Get all values of property PubchemCompoundId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPubchemCompoundId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBCHEMCOMPOUNDID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PubchemCompoundId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPubchemCompoundId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PUBCHEMCOMPOUNDID);
	}

    /**
     * Get all values of property PubchemCompoundId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPubchemCompoundId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PUBCHEMCOMPOUNDID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PubchemCompoundId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPubchemCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PUBCHEMCOMPOUNDID, Thing.class);
	}
	
    /**
     * Get all values of property PubchemCompoundId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPubchemCompoundId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBCHEMCOMPOUNDID, Thing.class);
	}

    /**
     * Get all values of property PubchemCompoundId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPubchemCompoundId() {
		return Base.getAll(this.model, this.getResource(), PUBCHEMCOMPOUNDID, Thing.class);
	}

    /**
     * Get all values of property PubchemCompoundId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPubchemCompoundId_as() {
		return Base.getAll_as(this.model, this.getResource(), PUBCHEMCOMPOUNDID, Thing.class);
	}
 
    /**
     * Adds a value to property PubchemCompoundId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPubchemCompoundId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PUBCHEMCOMPOUNDID, value);
	}
	
    /**
     * Adds a value to property PubchemCompoundId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPubchemCompoundId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PUBCHEMCOMPOUNDID, value);
	}
    /**
     * Adds a value to property PubchemCompoundId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPubchemCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PUBCHEMCOMPOUNDID, value);
	}
	
    /**
     * Adds a value to property PubchemCompoundId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPubchemCompoundId(Thing value) {
		Base.add(this.model, this.getResource(), PUBCHEMCOMPOUNDID, value);
	}
  

    /**
     * Sets a value of property PubchemCompoundId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPubchemCompoundId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PUBCHEMCOMPOUNDID, value);
	}
	
    /**
     * Sets a value of property PubchemCompoundId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPubchemCompoundId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PUBCHEMCOMPOUNDID, value);
	}
    /**
     * Sets a value of property PubchemCompoundId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPubchemCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PUBCHEMCOMPOUNDID, value);
	}
	
    /**
     * Sets a value of property PubchemCompoundId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPubchemCompoundId(Thing value) {
		Base.set(this.model, this.getResource(), PUBCHEMCOMPOUNDID, value);
	}
  


    /**
     * Removes a value of property PubchemCompoundId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePubchemCompoundId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PUBCHEMCOMPOUNDID, value);
	}
	
    /**
     * Removes a value of property PubchemCompoundId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePubchemCompoundId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PUBCHEMCOMPOUNDID, value);
	}
    /**
     * Removes a value of property PubchemCompoundId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePubchemCompoundId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PUBCHEMCOMPOUNDID, value);
	}
	
    /**
     * Removes a value of property PubchemCompoundId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePubchemCompoundId(Thing value) {
		Base.remove(this.model, this.getResource(), PUBCHEMCOMPOUNDID, value);
	}
  
    /**
     * Removes all values of property PubchemCompoundId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPubchemCompoundId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PUBCHEMCOMPOUNDID);
	}
	
    /**
     * Removes all values of property PubchemCompoundId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPubchemCompoundId() {
		Base.removeAll(this.model, this.getResource(), PUBCHEMCOMPOUNDID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e90bdd2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPubchemSubstanceId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PUBCHEMSUBSTANCEID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e90bdd2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPubchemSubstanceId() {
		return Base.has(this.model, this.getResource(), PUBCHEMSUBSTANCEID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e90bdd2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPubchemSubstanceId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PUBCHEMSUBSTANCEID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e90bdd2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPubchemSubstanceId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PUBCHEMSUBSTANCEID, value);
	}

     /**
     * Get all values of property PubchemSubstanceId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPubchemSubstanceId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PUBCHEMSUBSTANCEID);
	}
	
    /**
     * Get all values of property PubchemSubstanceId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPubchemSubstanceId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBCHEMSUBSTANCEID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PubchemSubstanceId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPubchemSubstanceId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PUBCHEMSUBSTANCEID);
	}

    /**
     * Get all values of property PubchemSubstanceId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPubchemSubstanceId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PUBCHEMSUBSTANCEID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PubchemSubstanceId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPubchemSubstanceId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PUBCHEMSUBSTANCEID, Thing.class);
	}
	
    /**
     * Get all values of property PubchemSubstanceId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPubchemSubstanceId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBCHEMSUBSTANCEID, Thing.class);
	}

    /**
     * Get all values of property PubchemSubstanceId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPubchemSubstanceId() {
		return Base.getAll(this.model, this.getResource(), PUBCHEMSUBSTANCEID, Thing.class);
	}

    /**
     * Get all values of property PubchemSubstanceId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPubchemSubstanceId_as() {
		return Base.getAll_as(this.model, this.getResource(), PUBCHEMSUBSTANCEID, Thing.class);
	}
 
    /**
     * Adds a value to property PubchemSubstanceId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPubchemSubstanceId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PUBCHEMSUBSTANCEID, value);
	}
	
    /**
     * Adds a value to property PubchemSubstanceId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPubchemSubstanceId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PUBCHEMSUBSTANCEID, value);
	}
    /**
     * Adds a value to property PubchemSubstanceId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPubchemSubstanceId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PUBCHEMSUBSTANCEID, value);
	}
	
    /**
     * Adds a value to property PubchemSubstanceId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPubchemSubstanceId(Thing value) {
		Base.add(this.model, this.getResource(), PUBCHEMSUBSTANCEID, value);
	}
  

    /**
     * Sets a value of property PubchemSubstanceId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPubchemSubstanceId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PUBCHEMSUBSTANCEID, value);
	}
	
    /**
     * Sets a value of property PubchemSubstanceId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPubchemSubstanceId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PUBCHEMSUBSTANCEID, value);
	}
    /**
     * Sets a value of property PubchemSubstanceId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPubchemSubstanceId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PUBCHEMSUBSTANCEID, value);
	}
	
    /**
     * Sets a value of property PubchemSubstanceId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPubchemSubstanceId(Thing value) {
		Base.set(this.model, this.getResource(), PUBCHEMSUBSTANCEID, value);
	}
  


    /**
     * Removes a value of property PubchemSubstanceId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePubchemSubstanceId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PUBCHEMSUBSTANCEID, value);
	}
	
    /**
     * Removes a value of property PubchemSubstanceId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePubchemSubstanceId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PUBCHEMSUBSTANCEID, value);
	}
    /**
     * Removes a value of property PubchemSubstanceId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePubchemSubstanceId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PUBCHEMSUBSTANCEID, value);
	}
	
    /**
     * Removes a value of property PubchemSubstanceId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePubchemSubstanceId(Thing value) {
		Base.remove(this.model, this.getResource(), PUBCHEMSUBSTANCEID, value);
	}
  
    /**
     * Removes all values of property PubchemSubstanceId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPubchemSubstanceId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PUBCHEMSUBSTANCEID);
	}
	
    /**
     * Removes all values of property PubchemSubstanceId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPubchemSubstanceId() {
		Base.removeAll(this.model, this.getResource(), PUBCHEMSUBSTANCEID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55793337 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REACTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55793337 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReaction() {
		return Base.has(this.model, this.getResource(), REACTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55793337 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REACTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55793337 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReaction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REACTION, value);
	}

     /**
     * Get all values of property Reaction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReaction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REACTION);
	}
	
    /**
     * Get all values of property Reaction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReaction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REACTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Reaction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReaction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REACTION);
	}

    /**
     * Get all values of property Reaction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReaction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REACTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Reaction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REACTION, Thing.class);
	}
	
    /**
     * Get all values of property Reaction as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllReaction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REACTION, Thing.class);
	}

    /**
     * Get all values of property Reaction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllReaction() {
		return Base.getAll(this.model, this.getResource(), REACTION, Thing.class);
	}

    /**
     * Get all values of property Reaction as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllReaction_as() {
		return Base.getAll_as(this.model, this.getResource(), REACTION, Thing.class);
	}
 
    /**
     * Adds a value to property Reaction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addReaction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REACTION, value);
	}
	
    /**
     * Adds a value to property Reaction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addReaction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REACTION, value);
	}
    /**
     * Adds a value to property Reaction from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, REACTION, value);
	}
	
    /**
     * Adds a value to property Reaction from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addReaction(Thing value) {
		Base.add(this.model, this.getResource(), REACTION, value);
	}
  

    /**
     * Sets a value of property Reaction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReaction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REACTION, value);
	}
	
    /**
     * Sets a value of property Reaction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReaction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REACTION, value);
	}
    /**
     * Sets a value of property Reaction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, REACTION, value);
	}
	
    /**
     * Sets a value of property Reaction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReaction(Thing value) {
		Base.set(this.model, this.getResource(), REACTION, value);
	}
  


    /**
     * Removes a value of property Reaction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReaction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REACTION, value);
	}
	
    /**
     * Removes a value of property Reaction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReaction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REACTION, value);
	}
    /**
     * Removes a value of property Reaction given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReaction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, REACTION, value);
	}
	
    /**
     * Removes a value of property Reaction given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReaction(Thing value) {
		Base.remove(this.model, this.getResource(), REACTION, value);
	}
  
    /**
     * Removes all values of property Reaction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReaction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REACTION);
	}
	
    /**
     * Removes all values of property Reaction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReaction() {
		Base.removeAll(this.model, this.getResource(), REACTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55340aff has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55340aff has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReference() {
		return Base.has(this.model, this.getResource(), REFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55340aff has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REFERENCE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55340aff has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReference( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REFERENCE, value);
	}

     /**
     * Get all values of property Reference as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReference_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REFERENCE);
	}
	
    /**
     * Get all values of property Reference as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReference_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERENCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Reference as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReference_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REFERENCE);
	}

    /**
     * Get all values of property Reference as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReference_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REFERENCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Reference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REFERENCE, Thing.class);
	}
	
    /**
     * Get all values of property Reference as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllReference_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERENCE, Thing.class);
	}

    /**
     * Get all values of property Reference     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllReference() {
		return Base.getAll(this.model, this.getResource(), REFERENCE, Thing.class);
	}

    /**
     * Get all values of property Reference as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllReference_as() {
		return Base.getAll_as(this.model, this.getResource(), REFERENCE, Thing.class);
	}
 
    /**
     * Adds a value to property Reference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REFERENCE, value);
	}
	
    /**
     * Adds a value to property Reference as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REFERENCE, value);
	}
    /**
     * Adds a value to property Reference from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, REFERENCE, value);
	}
	
    /**
     * Adds a value to property Reference from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addReference(Thing value) {
		Base.add(this.model, this.getResource(), REFERENCE, value);
	}
  

    /**
     * Sets a value of property Reference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REFERENCE, value);
	}
	
    /**
     * Sets a value of property Reference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REFERENCE, value);
	}
    /**
     * Sets a value of property Reference from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, REFERENCE, value);
	}
	
    /**
     * Sets a value of property Reference from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReference(Thing value) {
		Base.set(this.model, this.getResource(), REFERENCE, value);
	}
  


    /**
     * Removes a value of property Reference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REFERENCE, value);
	}
	
    /**
     * Removes a value of property Reference as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REFERENCE, value);
	}
    /**
     * Removes a value of property Reference given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, REFERENCE, value);
	}
	
    /**
     * Removes a value of property Reference given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReference(Thing value) {
		Base.remove(this.model, this.getResource(), REFERENCE, value);
	}
  
    /**
     * Removes all values of property Reference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REFERENCE);
	}
	
    /**
     * Removes all values of property Reference	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReference() {
		Base.removeAll(this.model, this.getResource(), REFERENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bc99e5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRxlistLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RXLISTLINK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bc99e5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRxlistLink() {
		return Base.has(this.model, this.getResource(), RXLISTLINK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bc99e5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRxlistLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RXLISTLINK, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bc99e5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRxlistLink( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RXLISTLINK, value);
	}

     /**
     * Get all values of property RxlistLink as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRxlistLink_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RXLISTLINK);
	}
	
    /**
     * Get all values of property RxlistLink as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRxlistLink_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RXLISTLINK, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RxlistLink as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRxlistLink_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RXLISTLINK);
	}

    /**
     * Get all values of property RxlistLink as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRxlistLink_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RXLISTLINK, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RxlistLink     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllRxlistLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RXLISTLINK, Thing.class);
	}
	
    /**
     * Get all values of property RxlistLink as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllRxlistLink_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RXLISTLINK, Thing.class);
	}

    /**
     * Get all values of property RxlistLink     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllRxlistLink() {
		return Base.getAll(this.model, this.getResource(), RXLISTLINK, Thing.class);
	}

    /**
     * Get all values of property RxlistLink as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllRxlistLink_as() {
		return Base.getAll_as(this.model, this.getResource(), RXLISTLINK, Thing.class);
	}
 
    /**
     * Adds a value to property RxlistLink as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRxlistLink( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RXLISTLINK, value);
	}
	
    /**
     * Adds a value to property RxlistLink as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRxlistLink( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RXLISTLINK, value);
	}
    /**
     * Adds a value to property RxlistLink from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRxlistLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, RXLISTLINK, value);
	}
	
    /**
     * Adds a value to property RxlistLink from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRxlistLink(Thing value) {
		Base.add(this.model, this.getResource(), RXLISTLINK, value);
	}
  

    /**
     * Sets a value of property RxlistLink from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRxlistLink( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RXLISTLINK, value);
	}
	
    /**
     * Sets a value of property RxlistLink from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRxlistLink( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RXLISTLINK, value);
	}
    /**
     * Sets a value of property RxlistLink from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRxlistLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, RXLISTLINK, value);
	}
	
    /**
     * Sets a value of property RxlistLink from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRxlistLink(Thing value) {
		Base.set(this.model, this.getResource(), RXLISTLINK, value);
	}
  


    /**
     * Removes a value of property RxlistLink as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRxlistLink( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RXLISTLINK, value);
	}
	
    /**
     * Removes a value of property RxlistLink as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRxlistLink( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RXLISTLINK, value);
	}
    /**
     * Removes a value of property RxlistLink given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRxlistLink(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, RXLISTLINK, value);
	}
	
    /**
     * Removes a value of property RxlistLink given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRxlistLink(Thing value) {
		Base.remove(this.model, this.getResource(), RXLISTLINK, value);
	}
  
    /**
     * Removes all values of property RxlistLink     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRxlistLink( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RXLISTLINK);
	}
	
    /**
     * Removes all values of property RxlistLink	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRxlistLink() {
		Base.removeAll(this.model, this.getResource(), RXLISTLINK);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76658b5f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SAMEAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76658b5f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSameAs() {
		return Base.has(this.model, this.getResource(), SAMEAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76658b5f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SAMEAS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76658b5f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSameAs( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SAMEAS, value);
	}

     /**
     * Get all values of property SameAs as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SAMEAS);
	}
	
    /**
     * Get all values of property SameAs as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMEAS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SameAs as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SAMEAS);
	}

    /**
     * Get all values of property SameAs as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SAMEAS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SameAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SAMEAS, Thing.class);
	}
	
    /**
     * Get all values of property SameAs as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSameAs_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMEAS, Thing.class);
	}

    /**
     * Get all values of property SameAs     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSameAs() {
		return Base.getAll(this.model, this.getResource(), SAMEAS, Thing.class);
	}

    /**
     * Get all values of property SameAs as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSameAs_as() {
		return Base.getAll_as(this.model, this.getResource(), SAMEAS, Thing.class);
	}
 
    /**
     * Adds a value to property SameAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Adds a value to property SameAs as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Adds a value to property SameAs from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Adds a value to property SameAs from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSameAs(Thing value) {
		Base.add(this.model, this.getResource(), SAMEAS, value);
	}
  

    /**
     * Sets a value of property SameAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Sets a value of property SameAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Sets a value of property SameAs from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Sets a value of property SameAs from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSameAs(Thing value) {
		Base.set(this.model, this.getResource(), SAMEAS, value);
	}
  


    /**
     * Removes a value of property SameAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Removes a value of property SameAs as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Removes a value of property SameAs given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Removes a value of property SameAs given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSameAs(Thing value) {
		Base.remove(this.model, this.getResource(), SAMEAS, value);
	}
  
    /**
     * Removes all values of property SameAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SAMEAS);
	}
	
    /**
     * Removes all values of property SameAs	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSameAs() {
		Base.removeAll(this.model, this.getResource(), SAMEAS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bf93a6d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSecondaryAccessionNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SECONDARYACCESSIONNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bf93a6d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSecondaryAccessionNumber() {
		return Base.has(this.model, this.getResource(), SECONDARYACCESSIONNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bf93a6d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSecondaryAccessionNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SECONDARYACCESSIONNUMBER, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bf93a6d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSecondaryAccessionNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SECONDARYACCESSIONNUMBER, value);
	}

     /**
     * Get all values of property SecondaryAccessionNumber as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSecondaryAccessionNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SECONDARYACCESSIONNUMBER);
	}
	
    /**
     * Get all values of property SecondaryAccessionNumber as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSecondaryAccessionNumber_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SECONDARYACCESSIONNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SecondaryAccessionNumber as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSecondaryAccessionNumber_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SECONDARYACCESSIONNUMBER);
	}

    /**
     * Get all values of property SecondaryAccessionNumber as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSecondaryAccessionNumber_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SECONDARYACCESSIONNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SecondaryAccessionNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSecondaryAccessionNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SECONDARYACCESSIONNUMBER, Thing.class);
	}
	
    /**
     * Get all values of property SecondaryAccessionNumber as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSecondaryAccessionNumber_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SECONDARYACCESSIONNUMBER, Thing.class);
	}

    /**
     * Get all values of property SecondaryAccessionNumber     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSecondaryAccessionNumber() {
		return Base.getAll(this.model, this.getResource(), SECONDARYACCESSIONNUMBER, Thing.class);
	}

    /**
     * Get all values of property SecondaryAccessionNumber as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSecondaryAccessionNumber_as() {
		return Base.getAll_as(this.model, this.getResource(), SECONDARYACCESSIONNUMBER, Thing.class);
	}
 
    /**
     * Adds a value to property SecondaryAccessionNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSecondaryAccessionNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SECONDARYACCESSIONNUMBER, value);
	}
	
    /**
     * Adds a value to property SecondaryAccessionNumber as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSecondaryAccessionNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SECONDARYACCESSIONNUMBER, value);
	}
    /**
     * Adds a value to property SecondaryAccessionNumber from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSecondaryAccessionNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SECONDARYACCESSIONNUMBER, value);
	}
	
    /**
     * Adds a value to property SecondaryAccessionNumber from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSecondaryAccessionNumber(Thing value) {
		Base.add(this.model, this.getResource(), SECONDARYACCESSIONNUMBER, value);
	}
  

    /**
     * Sets a value of property SecondaryAccessionNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSecondaryAccessionNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SECONDARYACCESSIONNUMBER, value);
	}
	
    /**
     * Sets a value of property SecondaryAccessionNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSecondaryAccessionNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SECONDARYACCESSIONNUMBER, value);
	}
    /**
     * Sets a value of property SecondaryAccessionNumber from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSecondaryAccessionNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SECONDARYACCESSIONNUMBER, value);
	}
	
    /**
     * Sets a value of property SecondaryAccessionNumber from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSecondaryAccessionNumber(Thing value) {
		Base.set(this.model, this.getResource(), SECONDARYACCESSIONNUMBER, value);
	}
  


    /**
     * Removes a value of property SecondaryAccessionNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSecondaryAccessionNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SECONDARYACCESSIONNUMBER, value);
	}
	
    /**
     * Removes a value of property SecondaryAccessionNumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSecondaryAccessionNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SECONDARYACCESSIONNUMBER, value);
	}
    /**
     * Removes a value of property SecondaryAccessionNumber given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSecondaryAccessionNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SECONDARYACCESSIONNUMBER, value);
	}
	
    /**
     * Removes a value of property SecondaryAccessionNumber given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSecondaryAccessionNumber(Thing value) {
		Base.remove(this.model, this.getResource(), SECONDARYACCESSIONNUMBER, value);
	}
  
    /**
     * Removes all values of property SecondaryAccessionNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSecondaryAccessionNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SECONDARYACCESSIONNUMBER);
	}
	
    /**
     * Removes all values of property SecondaryAccessionNumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSecondaryAccessionNumber() {
		Base.removeAll(this.model, this.getResource(), SECONDARYACCESSIONNUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d6bad4a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SIGNAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d6bad4a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSignal() {
		return Base.has(this.model, this.getResource(), SIGNAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d6bad4a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SIGNAL, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d6bad4a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSignal( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SIGNAL, value);
	}

     /**
     * Get all values of property Signal as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSignal_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SIGNAL);
	}
	
    /**
     * Get all values of property Signal as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSignal_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIGNAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Signal as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSignal_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SIGNAL);
	}

    /**
     * Get all values of property Signal as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSignal_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SIGNAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Signal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SIGNAL, Thing.class);
	}
	
    /**
     * Get all values of property Signal as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSignal_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIGNAL, Thing.class);
	}

    /**
     * Get all values of property Signal     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSignal() {
		return Base.getAll(this.model, this.getResource(), SIGNAL, Thing.class);
	}

    /**
     * Get all values of property Signal as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSignal_as() {
		return Base.getAll_as(this.model, this.getResource(), SIGNAL, Thing.class);
	}
 
    /**
     * Adds a value to property Signal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSignal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Adds a value to property Signal as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSignal( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SIGNAL, value);
	}
    /**
     * Adds a value to property Signal from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Adds a value to property Signal from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSignal(Thing value) {
		Base.add(this.model, this.getResource(), SIGNAL, value);
	}
  

    /**
     * Sets a value of property Signal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSignal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Sets a value of property Signal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSignal( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SIGNAL, value);
	}
    /**
     * Sets a value of property Signal from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Sets a value of property Signal from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSignal(Thing value) {
		Base.set(this.model, this.getResource(), SIGNAL, value);
	}
  


    /**
     * Removes a value of property Signal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSignal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Removes a value of property Signal as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSignal( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SIGNAL, value);
	}
    /**
     * Removes a value of property Signal given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Removes a value of property Signal given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSignal(Thing value) {
		Base.remove(this.model, this.getResource(), SIGNAL, value);
	}
  
    /**
     * Removes all values of property Signal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSignal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SIGNAL);
	}
	
    /**
     * Removes all values of property Signal	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSignal() {
		Base.removeAll(this.model, this.getResource(), SIGNAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3db83124 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSmilesStringCanonical(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SMILESSTRINGCANONICAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3db83124 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSmilesStringCanonical() {
		return Base.has(this.model, this.getResource(), SMILESSTRINGCANONICAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3db83124 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSmilesStringCanonical(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SMILESSTRINGCANONICAL, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3db83124 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSmilesStringCanonical( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SMILESSTRINGCANONICAL, value);
	}

     /**
     * Get all values of property SmilesStringCanonical as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSmilesStringCanonical_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SMILESSTRINGCANONICAL);
	}
	
    /**
     * Get all values of property SmilesStringCanonical as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSmilesStringCanonical_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SMILESSTRINGCANONICAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SmilesStringCanonical as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSmilesStringCanonical_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SMILESSTRINGCANONICAL);
	}

    /**
     * Get all values of property SmilesStringCanonical as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSmilesStringCanonical_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SMILESSTRINGCANONICAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SmilesStringCanonical     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSmilesStringCanonical(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SMILESSTRINGCANONICAL, Thing.class);
	}
	
    /**
     * Get all values of property SmilesStringCanonical as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSmilesStringCanonical_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SMILESSTRINGCANONICAL, Thing.class);
	}

    /**
     * Get all values of property SmilesStringCanonical     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSmilesStringCanonical() {
		return Base.getAll(this.model, this.getResource(), SMILESSTRINGCANONICAL, Thing.class);
	}

    /**
     * Get all values of property SmilesStringCanonical as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSmilesStringCanonical_as() {
		return Base.getAll_as(this.model, this.getResource(), SMILESSTRINGCANONICAL, Thing.class);
	}
 
    /**
     * Adds a value to property SmilesStringCanonical as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSmilesStringCanonical( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SMILESSTRINGCANONICAL, value);
	}
	
    /**
     * Adds a value to property SmilesStringCanonical as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSmilesStringCanonical( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SMILESSTRINGCANONICAL, value);
	}
    /**
     * Adds a value to property SmilesStringCanonical from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSmilesStringCanonical(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SMILESSTRINGCANONICAL, value);
	}
	
    /**
     * Adds a value to property SmilesStringCanonical from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSmilesStringCanonical(Thing value) {
		Base.add(this.model, this.getResource(), SMILESSTRINGCANONICAL, value);
	}
  

    /**
     * Sets a value of property SmilesStringCanonical from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSmilesStringCanonical( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SMILESSTRINGCANONICAL, value);
	}
	
    /**
     * Sets a value of property SmilesStringCanonical from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSmilesStringCanonical( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SMILESSTRINGCANONICAL, value);
	}
    /**
     * Sets a value of property SmilesStringCanonical from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSmilesStringCanonical(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SMILESSTRINGCANONICAL, value);
	}
	
    /**
     * Sets a value of property SmilesStringCanonical from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSmilesStringCanonical(Thing value) {
		Base.set(this.model, this.getResource(), SMILESSTRINGCANONICAL, value);
	}
  


    /**
     * Removes a value of property SmilesStringCanonical as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSmilesStringCanonical( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SMILESSTRINGCANONICAL, value);
	}
	
    /**
     * Removes a value of property SmilesStringCanonical as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSmilesStringCanonical( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SMILESSTRINGCANONICAL, value);
	}
    /**
     * Removes a value of property SmilesStringCanonical given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSmilesStringCanonical(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SMILESSTRINGCANONICAL, value);
	}
	
    /**
     * Removes a value of property SmilesStringCanonical given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSmilesStringCanonical(Thing value) {
		Base.remove(this.model, this.getResource(), SMILESSTRINGCANONICAL, value);
	}
  
    /**
     * Removes all values of property SmilesStringCanonical     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSmilesStringCanonical( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SMILESSTRINGCANONICAL);
	}
	
    /**
     * Removes all values of property SmilesStringCanonical	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSmilesStringCanonical() {
		Base.removeAll(this.model, this.getResource(), SMILESSTRINGCANONICAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35e0e1d8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSmilesStringIsomeric(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SMILESSTRINGISOMERIC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35e0e1d8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSmilesStringIsomeric() {
		return Base.has(this.model, this.getResource(), SMILESSTRINGISOMERIC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35e0e1d8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSmilesStringIsomeric(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SMILESSTRINGISOMERIC, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35e0e1d8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSmilesStringIsomeric( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SMILESSTRINGISOMERIC, value);
	}

     /**
     * Get all values of property SmilesStringIsomeric as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSmilesStringIsomeric_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SMILESSTRINGISOMERIC);
	}
	
    /**
     * Get all values of property SmilesStringIsomeric as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSmilesStringIsomeric_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SMILESSTRINGISOMERIC, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SmilesStringIsomeric as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSmilesStringIsomeric_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SMILESSTRINGISOMERIC);
	}

    /**
     * Get all values of property SmilesStringIsomeric as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSmilesStringIsomeric_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SMILESSTRINGISOMERIC, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SmilesStringIsomeric     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSmilesStringIsomeric(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SMILESSTRINGISOMERIC, Thing.class);
	}
	
    /**
     * Get all values of property SmilesStringIsomeric as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSmilesStringIsomeric_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SMILESSTRINGISOMERIC, Thing.class);
	}

    /**
     * Get all values of property SmilesStringIsomeric     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSmilesStringIsomeric() {
		return Base.getAll(this.model, this.getResource(), SMILESSTRINGISOMERIC, Thing.class);
	}

    /**
     * Get all values of property SmilesStringIsomeric as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSmilesStringIsomeric_as() {
		return Base.getAll_as(this.model, this.getResource(), SMILESSTRINGISOMERIC, Thing.class);
	}
 
    /**
     * Adds a value to property SmilesStringIsomeric as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSmilesStringIsomeric( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SMILESSTRINGISOMERIC, value);
	}
	
    /**
     * Adds a value to property SmilesStringIsomeric as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSmilesStringIsomeric( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SMILESSTRINGISOMERIC, value);
	}
    /**
     * Adds a value to property SmilesStringIsomeric from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSmilesStringIsomeric(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SMILESSTRINGISOMERIC, value);
	}
	
    /**
     * Adds a value to property SmilesStringIsomeric from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSmilesStringIsomeric(Thing value) {
		Base.add(this.model, this.getResource(), SMILESSTRINGISOMERIC, value);
	}
  

    /**
     * Sets a value of property SmilesStringIsomeric from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSmilesStringIsomeric( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SMILESSTRINGISOMERIC, value);
	}
	
    /**
     * Sets a value of property SmilesStringIsomeric from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSmilesStringIsomeric( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SMILESSTRINGISOMERIC, value);
	}
    /**
     * Sets a value of property SmilesStringIsomeric from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSmilesStringIsomeric(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SMILESSTRINGISOMERIC, value);
	}
	
    /**
     * Sets a value of property SmilesStringIsomeric from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSmilesStringIsomeric(Thing value) {
		Base.set(this.model, this.getResource(), SMILESSTRINGISOMERIC, value);
	}
  


    /**
     * Removes a value of property SmilesStringIsomeric as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSmilesStringIsomeric( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SMILESSTRINGISOMERIC, value);
	}
	
    /**
     * Removes a value of property SmilesStringIsomeric as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSmilesStringIsomeric( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SMILESSTRINGISOMERIC, value);
	}
    /**
     * Removes a value of property SmilesStringIsomeric given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSmilesStringIsomeric(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SMILESSTRINGISOMERIC, value);
	}
	
    /**
     * Removes a value of property SmilesStringIsomeric given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSmilesStringIsomeric(Thing value) {
		Base.remove(this.model, this.getResource(), SMILESSTRINGISOMERIC, value);
	}
  
    /**
     * Removes all values of property SmilesStringIsomeric     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSmilesStringIsomeric( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SMILESSTRINGISOMERIC);
	}
	
    /**
     * Removes all values of property SmilesStringIsomeric	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSmilesStringIsomeric() {
		Base.removeAll(this.model, this.getResource(), SMILESSTRINGISOMERIC);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a4d2e1c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSpecificFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SPECIFICFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a4d2e1c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSpecificFunction() {
		return Base.has(this.model, this.getResource(), SPECIFICFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a4d2e1c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSpecificFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SPECIFICFUNCTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a4d2e1c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSpecificFunction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SPECIFICFUNCTION, value);
	}

     /**
     * Get all values of property SpecificFunction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpecificFunction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SPECIFICFUNCTION);
	}
	
    /**
     * Get all values of property SpecificFunction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSpecificFunction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPECIFICFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SpecificFunction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpecificFunction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SPECIFICFUNCTION);
	}

    /**
     * Get all values of property SpecificFunction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSpecificFunction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SPECIFICFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SpecificFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSpecificFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SPECIFICFUNCTION, Thing.class);
	}
	
    /**
     * Get all values of property SpecificFunction as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSpecificFunction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPECIFICFUNCTION, Thing.class);
	}

    /**
     * Get all values of property SpecificFunction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSpecificFunction() {
		return Base.getAll(this.model, this.getResource(), SPECIFICFUNCTION, Thing.class);
	}

    /**
     * Get all values of property SpecificFunction as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSpecificFunction_as() {
		return Base.getAll_as(this.model, this.getResource(), SPECIFICFUNCTION, Thing.class);
	}
 
    /**
     * Adds a value to property SpecificFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSpecificFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SPECIFICFUNCTION, value);
	}
	
    /**
     * Adds a value to property SpecificFunction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSpecificFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SPECIFICFUNCTION, value);
	}
    /**
     * Adds a value to property SpecificFunction from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSpecificFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SPECIFICFUNCTION, value);
	}
	
    /**
     * Adds a value to property SpecificFunction from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSpecificFunction(Thing value) {
		Base.add(this.model, this.getResource(), SPECIFICFUNCTION, value);
	}
  

    /**
     * Sets a value of property SpecificFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSpecificFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SPECIFICFUNCTION, value);
	}
	
    /**
     * Sets a value of property SpecificFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSpecificFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SPECIFICFUNCTION, value);
	}
    /**
     * Sets a value of property SpecificFunction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSpecificFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SPECIFICFUNCTION, value);
	}
	
    /**
     * Sets a value of property SpecificFunction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSpecificFunction(Thing value) {
		Base.set(this.model, this.getResource(), SPECIFICFUNCTION, value);
	}
  


    /**
     * Removes a value of property SpecificFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSpecificFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SPECIFICFUNCTION, value);
	}
	
    /**
     * Removes a value of property SpecificFunction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSpecificFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SPECIFICFUNCTION, value);
	}
    /**
     * Removes a value of property SpecificFunction given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSpecificFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SPECIFICFUNCTION, value);
	}
	
    /**
     * Removes a value of property SpecificFunction given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSpecificFunction(Thing value) {
		Base.remove(this.model, this.getResource(), SPECIFICFUNCTION, value);
	}
  
    /**
     * Removes all values of property SpecificFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSpecificFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SPECIFICFUNCTION);
	}
	
    /**
     * Removes all values of property SpecificFunction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSpecificFunction() {
		Base.removeAll(this.model, this.getResource(), SPECIFICFUNCTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7efa1df2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, STATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7efa1df2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasState() {
		return Base.has(this.model, this.getResource(), STATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7efa1df2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, STATE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7efa1df2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasState( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), STATE, value);
	}

     /**
     * Get all values of property State as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllState_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, STATE);
	}
	
    /**
     * Get all values of property State as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllState_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property State as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllState_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), STATE);
	}

    /**
     * Get all values of property State as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllState_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), STATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property State     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, STATE, Thing.class);
	}
	
    /**
     * Get all values of property State as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllState_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STATE, Thing.class);
	}

    /**
     * Get all values of property State     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllState() {
		return Base.getAll(this.model, this.getResource(), STATE, Thing.class);
	}

    /**
     * Get all values of property State as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllState_as() {
		return Base.getAll_as(this.model, this.getResource(), STATE, Thing.class);
	}
 
    /**
     * Adds a value to property State as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, STATE, value);
	}
	
    /**
     * Adds a value to property State as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addState( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), STATE, value);
	}
    /**
     * Adds a value to property State from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, STATE, value);
	}
	
    /**
     * Adds a value to property State from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addState(Thing value) {
		Base.add(this.model, this.getResource(), STATE, value);
	}
  

    /**
     * Sets a value of property State from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, STATE, value);
	}
	
    /**
     * Sets a value of property State from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setState( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), STATE, value);
	}
    /**
     * Sets a value of property State from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, STATE, value);
	}
	
    /**
     * Sets a value of property State from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setState(Thing value) {
		Base.set(this.model, this.getResource(), STATE, value);
	}
  


    /**
     * Removes a value of property State as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, STATE, value);
	}
	
    /**
     * Removes a value of property State as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeState( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), STATE, value);
	}
    /**
     * Removes a value of property State given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, STATE, value);
	}
	
    /**
     * Removes a value of property State given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeState(Thing value) {
		Base.remove(this.model, this.getResource(), STATE, value);
	}
  
    /**
     * Removes all values of property State     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, STATE);
	}
	
    /**
     * Removes all values of property State	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllState() {
		Base.removeAll(this.model, this.getResource(), STATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5eb00902 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, STRUCTURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5eb00902 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasStructure() {
		return Base.has(this.model, this.getResource(), STRUCTURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5eb00902 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, STRUCTURE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5eb00902 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasStructure( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), STRUCTURE, value);
	}

     /**
     * Get all values of property Structure as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStructure_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, STRUCTURE);
	}
	
    /**
     * Get all values of property Structure as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStructure_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STRUCTURE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Structure as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStructure_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), STRUCTURE);
	}

    /**
     * Get all values of property Structure as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStructure_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), STRUCTURE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Structure     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, STRUCTURE, Thing.class);
	}
	
    /**
     * Get all values of property Structure as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllStructure_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STRUCTURE, Thing.class);
	}

    /**
     * Get all values of property Structure     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllStructure() {
		return Base.getAll(this.model, this.getResource(), STRUCTURE, Thing.class);
	}

    /**
     * Get all values of property Structure as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllStructure_as() {
		return Base.getAll_as(this.model, this.getResource(), STRUCTURE, Thing.class);
	}
 
    /**
     * Adds a value to property Structure as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addStructure( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, STRUCTURE, value);
	}
	
    /**
     * Adds a value to property Structure as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addStructure( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), STRUCTURE, value);
	}
    /**
     * Adds a value to property Structure from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, STRUCTURE, value);
	}
	
    /**
     * Adds a value to property Structure from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addStructure(Thing value) {
		Base.add(this.model, this.getResource(), STRUCTURE, value);
	}
  

    /**
     * Sets a value of property Structure from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setStructure( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, STRUCTURE, value);
	}
	
    /**
     * Sets a value of property Structure from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setStructure( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), STRUCTURE, value);
	}
    /**
     * Sets a value of property Structure from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, STRUCTURE, value);
	}
	
    /**
     * Sets a value of property Structure from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setStructure(Thing value) {
		Base.set(this.model, this.getResource(), STRUCTURE, value);
	}
  


    /**
     * Removes a value of property Structure as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeStructure( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, STRUCTURE, value);
	}
	
    /**
     * Removes a value of property Structure as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeStructure( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), STRUCTURE, value);
	}
    /**
     * Removes a value of property Structure given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeStructure(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, STRUCTURE, value);
	}
	
    /**
     * Removes a value of property Structure given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeStructure(Thing value) {
		Base.remove(this.model, this.getResource(), STRUCTURE, value);
	}
  
    /**
     * Removes all values of property Structure     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllStructure( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, STRUCTURE);
	}
	
    /**
     * Removes all values of property Structure	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllStructure() {
		Base.removeAll(this.model, this.getResource(), STRUCTURE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4438afa8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSwissprotId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SWISSPROTID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4438afa8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSwissprotId() {
		return Base.has(this.model, this.getResource(), SWISSPROTID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4438afa8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSwissprotId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SWISSPROTID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4438afa8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSwissprotId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SWISSPROTID, value);
	}

     /**
     * Get all values of property SwissprotId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSwissprotId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SWISSPROTID);
	}
	
    /**
     * Get all values of property SwissprotId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSwissprotId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SWISSPROTID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SwissprotId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSwissprotId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SWISSPROTID);
	}

    /**
     * Get all values of property SwissprotId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSwissprotId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SWISSPROTID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SwissprotId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSwissprotId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SWISSPROTID, Thing.class);
	}
	
    /**
     * Get all values of property SwissprotId as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSwissprotId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SWISSPROTID, Thing.class);
	}

    /**
     * Get all values of property SwissprotId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSwissprotId() {
		return Base.getAll(this.model, this.getResource(), SWISSPROTID, Thing.class);
	}

    /**
     * Get all values of property SwissprotId as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSwissprotId_as() {
		return Base.getAll_as(this.model, this.getResource(), SWISSPROTID, Thing.class);
	}
 
    /**
     * Adds a value to property SwissprotId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSwissprotId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SWISSPROTID, value);
	}
	
    /**
     * Adds a value to property SwissprotId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSwissprotId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SWISSPROTID, value);
	}
    /**
     * Adds a value to property SwissprotId from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSwissprotId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SWISSPROTID, value);
	}
	
    /**
     * Adds a value to property SwissprotId from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSwissprotId(Thing value) {
		Base.add(this.model, this.getResource(), SWISSPROTID, value);
	}
  

    /**
     * Sets a value of property SwissprotId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSwissprotId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SWISSPROTID, value);
	}
	
    /**
     * Sets a value of property SwissprotId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSwissprotId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SWISSPROTID, value);
	}
    /**
     * Sets a value of property SwissprotId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSwissprotId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SWISSPROTID, value);
	}
	
    /**
     * Sets a value of property SwissprotId from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSwissprotId(Thing value) {
		Base.set(this.model, this.getResource(), SWISSPROTID, value);
	}
  


    /**
     * Removes a value of property SwissprotId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSwissprotId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SWISSPROTID, value);
	}
	
    /**
     * Removes a value of property SwissprotId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSwissprotId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SWISSPROTID, value);
	}
    /**
     * Removes a value of property SwissprotId given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSwissprotId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SWISSPROTID, value);
	}
	
    /**
     * Removes a value of property SwissprotId given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSwissprotId(Thing value) {
		Base.remove(this.model, this.getResource(), SWISSPROTID, value);
	}
  
    /**
     * Removes all values of property SwissprotId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSwissprotId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SWISSPROTID);
	}
	
    /**
     * Removes all values of property SwissprotId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSwissprotId() {
		Base.removeAll(this.model, this.getResource(), SWISSPROTID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1cf64352 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSwissprotName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SWISSPROTNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1cf64352 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSwissprotName() {
		return Base.has(this.model, this.getResource(), SWISSPROTNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1cf64352 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSwissprotName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SWISSPROTNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1cf64352 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSwissprotName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SWISSPROTNAME, value);
	}

     /**
     * Get all values of property SwissprotName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSwissprotName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SWISSPROTNAME);
	}
	
    /**
     * Get all values of property SwissprotName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSwissprotName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SWISSPROTNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SwissprotName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSwissprotName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SWISSPROTNAME);
	}

    /**
     * Get all values of property SwissprotName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSwissprotName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SWISSPROTNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SwissprotName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSwissprotName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SWISSPROTNAME, Thing.class);
	}
	
    /**
     * Get all values of property SwissprotName as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSwissprotName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SWISSPROTNAME, Thing.class);
	}

    /**
     * Get all values of property SwissprotName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSwissprotName() {
		return Base.getAll(this.model, this.getResource(), SWISSPROTNAME, Thing.class);
	}

    /**
     * Get all values of property SwissprotName as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSwissprotName_as() {
		return Base.getAll_as(this.model, this.getResource(), SWISSPROTNAME, Thing.class);
	}
 
    /**
     * Adds a value to property SwissprotName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSwissprotName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SWISSPROTNAME, value);
	}
	
    /**
     * Adds a value to property SwissprotName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSwissprotName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SWISSPROTNAME, value);
	}
    /**
     * Adds a value to property SwissprotName from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSwissprotName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SWISSPROTNAME, value);
	}
	
    /**
     * Adds a value to property SwissprotName from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSwissprotName(Thing value) {
		Base.add(this.model, this.getResource(), SWISSPROTNAME, value);
	}
  

    /**
     * Sets a value of property SwissprotName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSwissprotName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SWISSPROTNAME, value);
	}
	
    /**
     * Sets a value of property SwissprotName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSwissprotName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SWISSPROTNAME, value);
	}
    /**
     * Sets a value of property SwissprotName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSwissprotName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SWISSPROTNAME, value);
	}
	
    /**
     * Sets a value of property SwissprotName from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSwissprotName(Thing value) {
		Base.set(this.model, this.getResource(), SWISSPROTNAME, value);
	}
  


    /**
     * Removes a value of property SwissprotName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSwissprotName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SWISSPROTNAME, value);
	}
	
    /**
     * Removes a value of property SwissprotName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSwissprotName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SWISSPROTNAME, value);
	}
    /**
     * Removes a value of property SwissprotName given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSwissprotName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SWISSPROTNAME, value);
	}
	
    /**
     * Removes a value of property SwissprotName given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSwissprotName(Thing value) {
		Base.remove(this.model, this.getResource(), SWISSPROTNAME, value);
	}
  
    /**
     * Removes all values of property SwissprotName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSwissprotName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SWISSPROTNAME);
	}
	
    /**
     * Removes all values of property SwissprotName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSwissprotName() {
		Base.removeAll(this.model, this.getResource(), SWISSPROTNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2109486 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSwissprotPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SWISSPROTPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2109486 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSwissprotPage() {
		return Base.has(this.model, this.getResource(), SWISSPROTPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2109486 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSwissprotPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SWISSPROTPAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2109486 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSwissprotPage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SWISSPROTPAGE, value);
	}

     /**
     * Get all values of property SwissprotPage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSwissprotPage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SWISSPROTPAGE);
	}
	
    /**
     * Get all values of property SwissprotPage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSwissprotPage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SWISSPROTPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SwissprotPage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSwissprotPage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SWISSPROTPAGE);
	}

    /**
     * Get all values of property SwissprotPage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSwissprotPage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SWISSPROTPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SwissprotPage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSwissprotPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SWISSPROTPAGE, Thing.class);
	}
	
    /**
     * Get all values of property SwissprotPage as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSwissprotPage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SWISSPROTPAGE, Thing.class);
	}

    /**
     * Get all values of property SwissprotPage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSwissprotPage() {
		return Base.getAll(this.model, this.getResource(), SWISSPROTPAGE, Thing.class);
	}

    /**
     * Get all values of property SwissprotPage as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSwissprotPage_as() {
		return Base.getAll_as(this.model, this.getResource(), SWISSPROTPAGE, Thing.class);
	}
 
    /**
     * Adds a value to property SwissprotPage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSwissprotPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SWISSPROTPAGE, value);
	}
	
    /**
     * Adds a value to property SwissprotPage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSwissprotPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SWISSPROTPAGE, value);
	}
    /**
     * Adds a value to property SwissprotPage from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSwissprotPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SWISSPROTPAGE, value);
	}
	
    /**
     * Adds a value to property SwissprotPage from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSwissprotPage(Thing value) {
		Base.add(this.model, this.getResource(), SWISSPROTPAGE, value);
	}
  

    /**
     * Sets a value of property SwissprotPage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSwissprotPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SWISSPROTPAGE, value);
	}
	
    /**
     * Sets a value of property SwissprotPage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSwissprotPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SWISSPROTPAGE, value);
	}
    /**
     * Sets a value of property SwissprotPage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSwissprotPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SWISSPROTPAGE, value);
	}
	
    /**
     * Sets a value of property SwissprotPage from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSwissprotPage(Thing value) {
		Base.set(this.model, this.getResource(), SWISSPROTPAGE, value);
	}
  


    /**
     * Removes a value of property SwissprotPage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSwissprotPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SWISSPROTPAGE, value);
	}
	
    /**
     * Removes a value of property SwissprotPage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSwissprotPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SWISSPROTPAGE, value);
	}
    /**
     * Removes a value of property SwissprotPage given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSwissprotPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SWISSPROTPAGE, value);
	}
	
    /**
     * Removes a value of property SwissprotPage given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSwissprotPage(Thing value) {
		Base.remove(this.model, this.getResource(), SWISSPROTPAGE, value);
	}
  
    /**
     * Removes all values of property SwissprotPage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSwissprotPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SWISSPROTPAGE);
	}
	
    /**
     * Removes all values of property SwissprotPage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSwissprotPage() {
		Base.removeAll(this.model, this.getResource(), SWISSPROTPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f90b60e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSynonym(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SYNONYM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f90b60e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSynonym() {
		return Base.has(this.model, this.getResource(), SYNONYM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f90b60e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSynonym(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SYNONYM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f90b60e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSynonym( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SYNONYM, value);
	}

     /**
     * Get all values of property Synonym as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSynonym_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SYNONYM);
	}
	
    /**
     * Get all values of property Synonym as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSynonym_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SYNONYM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Synonym as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSynonym_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SYNONYM);
	}

    /**
     * Get all values of property Synonym as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSynonym_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SYNONYM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Synonym     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSynonym(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SYNONYM, Thing.class);
	}
	
    /**
     * Get all values of property Synonym as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSynonym_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SYNONYM, Thing.class);
	}

    /**
     * Get all values of property Synonym     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSynonym() {
		return Base.getAll(this.model, this.getResource(), SYNONYM, Thing.class);
	}

    /**
     * Get all values of property Synonym as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSynonym_as() {
		return Base.getAll_as(this.model, this.getResource(), SYNONYM, Thing.class);
	}
 
    /**
     * Adds a value to property Synonym as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSynonym( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SYNONYM, value);
	}
	
    /**
     * Adds a value to property Synonym as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSynonym( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SYNONYM, value);
	}
    /**
     * Adds a value to property Synonym from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSynonym(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SYNONYM, value);
	}
	
    /**
     * Adds a value to property Synonym from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSynonym(Thing value) {
		Base.add(this.model, this.getResource(), SYNONYM, value);
	}
  

    /**
     * Sets a value of property Synonym from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSynonym( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SYNONYM, value);
	}
	
    /**
     * Sets a value of property Synonym from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSynonym( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SYNONYM, value);
	}
    /**
     * Sets a value of property Synonym from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSynonym(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SYNONYM, value);
	}
	
    /**
     * Sets a value of property Synonym from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSynonym(Thing value) {
		Base.set(this.model, this.getResource(), SYNONYM, value);
	}
  


    /**
     * Removes a value of property Synonym as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSynonym( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SYNONYM, value);
	}
	
    /**
     * Removes a value of property Synonym as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSynonym( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SYNONYM, value);
	}
    /**
     * Removes a value of property Synonym given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSynonym(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SYNONYM, value);
	}
	
    /**
     * Removes a value of property Synonym given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSynonym(Thing value) {
		Base.remove(this.model, this.getResource(), SYNONYM, value);
	}
  
    /**
     * Removes all values of property Synonym     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSynonym( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SYNONYM);
	}
	
    /**
     * Removes all values of property Synonym	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSynonym() {
		Base.removeAll(this.model, this.getResource(), SYNONYM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aefeec0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSynthesisReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SYNTHESISREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aefeec0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSynthesisReference() {
		return Base.has(this.model, this.getResource(), SYNTHESISREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aefeec0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSynthesisReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SYNTHESISREFERENCE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aefeec0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSynthesisReference( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SYNTHESISREFERENCE, value);
	}

     /**
     * Get all values of property SynthesisReference as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSynthesisReference_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SYNTHESISREFERENCE);
	}
	
    /**
     * Get all values of property SynthesisReference as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSynthesisReference_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SYNTHESISREFERENCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SynthesisReference as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSynthesisReference_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SYNTHESISREFERENCE);
	}

    /**
     * Get all values of property SynthesisReference as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSynthesisReference_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SYNTHESISREFERENCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SynthesisReference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSynthesisReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SYNTHESISREFERENCE, Thing.class);
	}
	
    /**
     * Get all values of property SynthesisReference as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSynthesisReference_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SYNTHESISREFERENCE, Thing.class);
	}

    /**
     * Get all values of property SynthesisReference     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSynthesisReference() {
		return Base.getAll(this.model, this.getResource(), SYNTHESISREFERENCE, Thing.class);
	}

    /**
     * Get all values of property SynthesisReference as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSynthesisReference_as() {
		return Base.getAll_as(this.model, this.getResource(), SYNTHESISREFERENCE, Thing.class);
	}
 
    /**
     * Adds a value to property SynthesisReference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSynthesisReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SYNTHESISREFERENCE, value);
	}
	
    /**
     * Adds a value to property SynthesisReference as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSynthesisReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SYNTHESISREFERENCE, value);
	}
    /**
     * Adds a value to property SynthesisReference from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSynthesisReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SYNTHESISREFERENCE, value);
	}
	
    /**
     * Adds a value to property SynthesisReference from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSynthesisReference(Thing value) {
		Base.add(this.model, this.getResource(), SYNTHESISREFERENCE, value);
	}
  

    /**
     * Sets a value of property SynthesisReference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSynthesisReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SYNTHESISREFERENCE, value);
	}
	
    /**
     * Sets a value of property SynthesisReference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSynthesisReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SYNTHESISREFERENCE, value);
	}
    /**
     * Sets a value of property SynthesisReference from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSynthesisReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SYNTHESISREFERENCE, value);
	}
	
    /**
     * Sets a value of property SynthesisReference from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSynthesisReference(Thing value) {
		Base.set(this.model, this.getResource(), SYNTHESISREFERENCE, value);
	}
  


    /**
     * Removes a value of property SynthesisReference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSynthesisReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SYNTHESISREFERENCE, value);
	}
	
    /**
     * Removes a value of property SynthesisReference as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSynthesisReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SYNTHESISREFERENCE, value);
	}
    /**
     * Removes a value of property SynthesisReference given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSynthesisReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SYNTHESISREFERENCE, value);
	}
	
    /**
     * Removes a value of property SynthesisReference given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSynthesisReference(Thing value) {
		Base.remove(this.model, this.getResource(), SYNTHESISREFERENCE, value);
	}
  
    /**
     * Removes all values of property SynthesisReference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSynthesisReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SYNTHESISREFERENCE);
	}
	
    /**
     * Removes all values of property SynthesisReference	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSynthesisReference() {
		Base.removeAll(this.model, this.getResource(), SYNTHESISREFERENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d6b9ac1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d6b9ac1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTarget() {
		return Base.has(this.model, this.getResource(), TARGET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d6b9ac1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGET, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d6b9ac1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTarget( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGET, value);
	}

     /**
     * Get all values of property Target as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTarget_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TARGET);
	}
	
    /**
     * Get all values of property Target as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTarget_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGET, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Target as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTarget_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TARGET);
	}

    /**
     * Get all values of property Target as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTarget_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TARGET, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Target     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TARGET, Thing.class);
	}
	
    /**
     * Get all values of property Target as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTarget_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TARGET, Thing.class);
	}

    /**
     * Get all values of property Target     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTarget() {
		return Base.getAll(this.model, this.getResource(), TARGET, Thing.class);
	}

    /**
     * Get all values of property Target as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTarget_as() {
		return Base.getAll_as(this.model, this.getResource(), TARGET, Thing.class);
	}
 
    /**
     * Adds a value to property Target as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TARGET, value);
	}
	
    /**
     * Adds a value to property Target as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TARGET, value);
	}
    /**
     * Adds a value to property Target from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TARGET, value);
	}
	
    /**
     * Adds a value to property Target from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTarget(Thing value) {
		Base.add(this.model, this.getResource(), TARGET, value);
	}
  

    /**
     * Sets a value of property Target from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGET, value);
	}
	
    /**
     * Sets a value of property Target from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGET, value);
	}
    /**
     * Sets a value of property Target from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TARGET, value);
	}
	
    /**
     * Sets a value of property Target from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTarget(Thing value) {
		Base.set(this.model, this.getResource(), TARGET, value);
	}
  


    /**
     * Removes a value of property Target as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGET, value);
	}
	
    /**
     * Removes a value of property Target as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTarget( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGET, value);
	}
    /**
     * Removes a value of property Target given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTarget(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TARGET, value);
	}
	
    /**
     * Removes a value of property Target given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTarget(Thing value) {
		Base.remove(this.model, this.getResource(), TARGET, value);
	}
  
    /**
     * Removes all values of property Target     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTarget( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGET);
	}
	
    /**
     * Removes all values of property Target	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTarget() {
		Base.removeAll(this.model, this.getResource(), TARGET);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ab98260 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TEXT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ab98260 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasText() {
		return Base.has(this.model, this.getResource(), TEXT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ab98260 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TEXT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ab98260 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasText( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TEXT, value);
	}

     /**
     * Get all values of property Text as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllText_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TEXT);
	}
	
    /**
     * Get all values of property Text as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllText_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TEXT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Text as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllText_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TEXT);
	}

    /**
     * Get all values of property Text as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllText_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TEXT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Text     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TEXT, Thing.class);
	}
	
    /**
     * Get all values of property Text as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllText_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TEXT, Thing.class);
	}

    /**
     * Get all values of property Text     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllText() {
		return Base.getAll(this.model, this.getResource(), TEXT, Thing.class);
	}

    /**
     * Get all values of property Text as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllText_as() {
		return Base.getAll_as(this.model, this.getResource(), TEXT, Thing.class);
	}
 
    /**
     * Adds a value to property Text as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addText( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TEXT, value);
	}
	
    /**
     * Adds a value to property Text as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addText( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TEXT, value);
	}
    /**
     * Adds a value to property Text from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TEXT, value);
	}
	
    /**
     * Adds a value to property Text from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addText(Thing value) {
		Base.add(this.model, this.getResource(), TEXT, value);
	}
  

    /**
     * Sets a value of property Text from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setText( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TEXT, value);
	}
	
    /**
     * Sets a value of property Text from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setText( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TEXT, value);
	}
    /**
     * Sets a value of property Text from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TEXT, value);
	}
	
    /**
     * Sets a value of property Text from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setText(Thing value) {
		Base.set(this.model, this.getResource(), TEXT, value);
	}
  


    /**
     * Removes a value of property Text as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeText( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TEXT, value);
	}
	
    /**
     * Removes a value of property Text as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeText( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TEXT, value);
	}
    /**
     * Removes a value of property Text given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeText(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TEXT, value);
	}
	
    /**
     * Removes a value of property Text given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeText(Thing value) {
		Base.remove(this.model, this.getResource(), TEXT, value);
	}
  
    /**
     * Removes all values of property Text     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllText( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TEXT);
	}
	
    /**
     * Removes all values of property Text	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllText() {
		Base.removeAll(this.model, this.getResource(), TEXT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c313a2e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTheoreticalPi(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, THEORETICALPI);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c313a2e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTheoreticalPi() {
		return Base.has(this.model, this.getResource(), THEORETICALPI);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c313a2e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTheoreticalPi(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, THEORETICALPI, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c313a2e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTheoreticalPi( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), THEORETICALPI, value);
	}

     /**
     * Get all values of property TheoreticalPi as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTheoreticalPi_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, THEORETICALPI);
	}
	
    /**
     * Get all values of property TheoreticalPi as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTheoreticalPi_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, THEORETICALPI, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TheoreticalPi as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTheoreticalPi_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), THEORETICALPI);
	}

    /**
     * Get all values of property TheoreticalPi as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTheoreticalPi_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), THEORETICALPI, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TheoreticalPi     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTheoreticalPi(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, THEORETICALPI, Thing.class);
	}
	
    /**
     * Get all values of property TheoreticalPi as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTheoreticalPi_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, THEORETICALPI, Thing.class);
	}

    /**
     * Get all values of property TheoreticalPi     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTheoreticalPi() {
		return Base.getAll(this.model, this.getResource(), THEORETICALPI, Thing.class);
	}

    /**
     * Get all values of property TheoreticalPi as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTheoreticalPi_as() {
		return Base.getAll_as(this.model, this.getResource(), THEORETICALPI, Thing.class);
	}
 
    /**
     * Adds a value to property TheoreticalPi as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTheoreticalPi( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, THEORETICALPI, value);
	}
	
    /**
     * Adds a value to property TheoreticalPi as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTheoreticalPi( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), THEORETICALPI, value);
	}
    /**
     * Adds a value to property TheoreticalPi from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTheoreticalPi(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, THEORETICALPI, value);
	}
	
    /**
     * Adds a value to property TheoreticalPi from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTheoreticalPi(Thing value) {
		Base.add(this.model, this.getResource(), THEORETICALPI, value);
	}
  

    /**
     * Sets a value of property TheoreticalPi from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTheoreticalPi( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, THEORETICALPI, value);
	}
	
    /**
     * Sets a value of property TheoreticalPi from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTheoreticalPi( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), THEORETICALPI, value);
	}
    /**
     * Sets a value of property TheoreticalPi from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTheoreticalPi(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, THEORETICALPI, value);
	}
	
    /**
     * Sets a value of property TheoreticalPi from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTheoreticalPi(Thing value) {
		Base.set(this.model, this.getResource(), THEORETICALPI, value);
	}
  


    /**
     * Removes a value of property TheoreticalPi as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTheoreticalPi( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, THEORETICALPI, value);
	}
	
    /**
     * Removes a value of property TheoreticalPi as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTheoreticalPi( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), THEORETICALPI, value);
	}
    /**
     * Removes a value of property TheoreticalPi given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTheoreticalPi(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, THEORETICALPI, value);
	}
	
    /**
     * Removes a value of property TheoreticalPi given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTheoreticalPi(Thing value) {
		Base.remove(this.model, this.getResource(), THEORETICALPI, value);
	}
  
    /**
     * Removes all values of property TheoreticalPi     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTheoreticalPi( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, THEORETICALPI);
	}
	
    /**
     * Removes all values of property TheoreticalPi	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTheoreticalPi() {
		Base.removeAll(this.model, this.getResource(), THEORETICALPI);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@303bcbf2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasToxicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TOXICITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@303bcbf2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasToxicity() {
		return Base.has(this.model, this.getResource(), TOXICITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@303bcbf2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasToxicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TOXICITY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@303bcbf2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasToxicity( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TOXICITY, value);
	}

     /**
     * Get all values of property Toxicity as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllToxicity_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TOXICITY);
	}
	
    /**
     * Get all values of property Toxicity as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllToxicity_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TOXICITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Toxicity as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllToxicity_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TOXICITY);
	}

    /**
     * Get all values of property Toxicity as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllToxicity_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TOXICITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Toxicity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllToxicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TOXICITY, Thing.class);
	}
	
    /**
     * Get all values of property Toxicity as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllToxicity_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TOXICITY, Thing.class);
	}

    /**
     * Get all values of property Toxicity     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllToxicity() {
		return Base.getAll(this.model, this.getResource(), TOXICITY, Thing.class);
	}

    /**
     * Get all values of property Toxicity as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllToxicity_as() {
		return Base.getAll_as(this.model, this.getResource(), TOXICITY, Thing.class);
	}
 
    /**
     * Adds a value to property Toxicity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addToxicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TOXICITY, value);
	}
	
    /**
     * Adds a value to property Toxicity as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addToxicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TOXICITY, value);
	}
    /**
     * Adds a value to property Toxicity from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addToxicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TOXICITY, value);
	}
	
    /**
     * Adds a value to property Toxicity from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addToxicity(Thing value) {
		Base.add(this.model, this.getResource(), TOXICITY, value);
	}
  

    /**
     * Sets a value of property Toxicity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setToxicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TOXICITY, value);
	}
	
    /**
     * Sets a value of property Toxicity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setToxicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TOXICITY, value);
	}
    /**
     * Sets a value of property Toxicity from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setToxicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TOXICITY, value);
	}
	
    /**
     * Sets a value of property Toxicity from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setToxicity(Thing value) {
		Base.set(this.model, this.getResource(), TOXICITY, value);
	}
  


    /**
     * Removes a value of property Toxicity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeToxicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TOXICITY, value);
	}
	
    /**
     * Removes a value of property Toxicity as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeToxicity( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TOXICITY, value);
	}
    /**
     * Removes a value of property Toxicity given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeToxicity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TOXICITY, value);
	}
	
    /**
     * Removes a value of property Toxicity given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeToxicity(Thing value) {
		Base.remove(this.model, this.getResource(), TOXICITY, value);
	}
  
    /**
     * Removes all values of property Toxicity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllToxicity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TOXICITY);
	}
	
    /**
     * Removes all values of property Toxicity	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllToxicity() {
		Base.removeAll(this.model, this.getResource(), TOXICITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b179cf5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTransmembraneRegions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRANSMEMBRANEREGIONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b179cf5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTransmembraneRegions() {
		return Base.has(this.model, this.getResource(), TRANSMEMBRANEREGIONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b179cf5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTransmembraneRegions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRANSMEMBRANEREGIONS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b179cf5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTransmembraneRegions( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRANSMEMBRANEREGIONS, value);
	}

     /**
     * Get all values of property TransmembraneRegions as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTransmembraneRegions_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TRANSMEMBRANEREGIONS);
	}
	
    /**
     * Get all values of property TransmembraneRegions as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTransmembraneRegions_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TRANSMEMBRANEREGIONS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TransmembraneRegions as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTransmembraneRegions_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TRANSMEMBRANEREGIONS);
	}

    /**
     * Get all values of property TransmembraneRegions as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTransmembraneRegions_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TRANSMEMBRANEREGIONS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TransmembraneRegions     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllTransmembraneRegions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TRANSMEMBRANEREGIONS, Thing.class);
	}
	
    /**
     * Get all values of property TransmembraneRegions as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllTransmembraneRegions_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TRANSMEMBRANEREGIONS, Thing.class);
	}

    /**
     * Get all values of property TransmembraneRegions     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllTransmembraneRegions() {
		return Base.getAll(this.model, this.getResource(), TRANSMEMBRANEREGIONS, Thing.class);
	}

    /**
     * Get all values of property TransmembraneRegions as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllTransmembraneRegions_as() {
		return Base.getAll_as(this.model, this.getResource(), TRANSMEMBRANEREGIONS, Thing.class);
	}
 
    /**
     * Adds a value to property TransmembraneRegions as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTransmembraneRegions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TRANSMEMBRANEREGIONS, value);
	}
	
    /**
     * Adds a value to property TransmembraneRegions as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTransmembraneRegions( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TRANSMEMBRANEREGIONS, value);
	}
    /**
     * Adds a value to property TransmembraneRegions from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTransmembraneRegions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TRANSMEMBRANEREGIONS, value);
	}
	
    /**
     * Adds a value to property TransmembraneRegions from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTransmembraneRegions(Thing value) {
		Base.add(this.model, this.getResource(), TRANSMEMBRANEREGIONS, value);
	}
  

    /**
     * Sets a value of property TransmembraneRegions from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTransmembraneRegions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRANSMEMBRANEREGIONS, value);
	}
	
    /**
     * Sets a value of property TransmembraneRegions from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTransmembraneRegions( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRANSMEMBRANEREGIONS, value);
	}
    /**
     * Sets a value of property TransmembraneRegions from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTransmembraneRegions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TRANSMEMBRANEREGIONS, value);
	}
	
    /**
     * Sets a value of property TransmembraneRegions from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTransmembraneRegions(Thing value) {
		Base.set(this.model, this.getResource(), TRANSMEMBRANEREGIONS, value);
	}
  


    /**
     * Removes a value of property TransmembraneRegions as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTransmembraneRegions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TRANSMEMBRANEREGIONS, value);
	}
	
    /**
     * Removes a value of property TransmembraneRegions as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTransmembraneRegions( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TRANSMEMBRANEREGIONS, value);
	}
    /**
     * Removes a value of property TransmembraneRegions given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTransmembraneRegions(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TRANSMEMBRANEREGIONS, value);
	}
	
    /**
     * Removes a value of property TransmembraneRegions given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTransmembraneRegions(Thing value) {
		Base.remove(this.model, this.getResource(), TRANSMEMBRANEREGIONS, value);
	}
  
    /**
     * Removes all values of property TransmembraneRegions     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTransmembraneRegions( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TRANSMEMBRANEREGIONS);
	}
	
    /**
     * Removes all values of property TransmembraneRegions	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTransmembraneRegions() {
		Base.removeAll(this.model, this.getResource(), TRANSMEMBRANEREGIONS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@714febf4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUpdateDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UPDATEDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@714febf4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUpdateDate() {
		return Base.has(this.model, this.getResource(), UPDATEDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@714febf4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUpdateDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UPDATEDATE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@714febf4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUpdateDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UPDATEDATE, value);
	}

     /**
     * Get all values of property UpdateDate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUpdateDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UPDATEDATE);
	}
	
    /**
     * Get all values of property UpdateDate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUpdateDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UPDATEDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UpdateDate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUpdateDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UPDATEDATE);
	}

    /**
     * Get all values of property UpdateDate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUpdateDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UPDATEDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UpdateDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllUpdateDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UPDATEDATE, Thing.class);
	}
	
    /**
     * Get all values of property UpdateDate as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllUpdateDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UPDATEDATE, Thing.class);
	}

    /**
     * Get all values of property UpdateDate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllUpdateDate() {
		return Base.getAll(this.model, this.getResource(), UPDATEDATE, Thing.class);
	}

    /**
     * Get all values of property UpdateDate as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllUpdateDate_as() {
		return Base.getAll_as(this.model, this.getResource(), UPDATEDATE, Thing.class);
	}
 
    /**
     * Adds a value to property UpdateDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUpdateDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UPDATEDATE, value);
	}
	
    /**
     * Adds a value to property UpdateDate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUpdateDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UPDATEDATE, value);
	}
    /**
     * Adds a value to property UpdateDate from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUpdateDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, UPDATEDATE, value);
	}
	
    /**
     * Adds a value to property UpdateDate from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUpdateDate(Thing value) {
		Base.add(this.model, this.getResource(), UPDATEDATE, value);
	}
  

    /**
     * Sets a value of property UpdateDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUpdateDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UPDATEDATE, value);
	}
	
    /**
     * Sets a value of property UpdateDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUpdateDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UPDATEDATE, value);
	}
    /**
     * Sets a value of property UpdateDate from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUpdateDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, UPDATEDATE, value);
	}
	
    /**
     * Sets a value of property UpdateDate from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUpdateDate(Thing value) {
		Base.set(this.model, this.getResource(), UPDATEDATE, value);
	}
  


    /**
     * Removes a value of property UpdateDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUpdateDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UPDATEDATE, value);
	}
	
    /**
     * Removes a value of property UpdateDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUpdateDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UPDATEDATE, value);
	}
    /**
     * Removes a value of property UpdateDate given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUpdateDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, UPDATEDATE, value);
	}
	
    /**
     * Removes a value of property UpdateDate given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUpdateDate(Thing value) {
		Base.remove(this.model, this.getResource(), UPDATEDATE, value);
	}
  
    /**
     * Removes all values of property UpdateDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUpdateDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UPDATEDATE);
	}
	
    /**
     * Removes all values of property UpdateDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUpdateDate() {
		Base.removeAll(this.model, this.getResource(), UPDATEDATE);
	}
 }